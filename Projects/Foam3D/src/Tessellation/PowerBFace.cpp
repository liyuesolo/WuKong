#include "../../include/Tessellation/Power.h"
#include <iostream>

// @formatter:off
void Power::getNodeBFace(const TV3 &b0, const TV3 &b1, const TV3 &b2, const VectorXT &v0, const VectorXT &v1, const VectorXT &v2, NodePosition &nodePos) {
    double x0 = v0(0);
    double y0 = v0(1);
    double z0 = v0(2);
    double w0 = v0(3);
    double x1 = v1(0);
    double y1 = v1(1);
    double z1 = v1(2);
    double w1 = v1(3);
    double x2 = v2(0);
    double y2 = v2(1);
    double z2 = v2(2);
    double w2 = v2(3);
    double xb0 = b0(0);
    double yb0 = b0(1);
    double zb0 = b0(2);
    double xb1 = b1(0);
    double yb1 = b1(1);
    double zb1 = b1(2);
    double xb2 = b2(0);
    double yb2 = b2(1);
    double zb2 = b2(2);

    double unknown[3];

    double t1 = -yb1 + yb2;
    double t4 = zb1 - zb2;
    double t5 = z1 - z2;
    double t6 = t5 * t4;
    double t8 = y0 * y0;
    double t10 = y1 * y1;
    double t12 = y2 * y2;
    double t14 = z1 * z1;
    double t18 = -yb1 * zb2 + yb2 * zb1;
    double t20 = z2 * z2;
    double t23 = -w2 + w1;
    double t24 = wmul * t23;
    double t25 = x1 * x1;
    double t26 = x2 * x2;
    double t27 = t24 - t25 + t26;
    double t32 = z0 - z2;
    double t33 = t32 * t4;
    double t37 = z0 * z0;
    double t43 = (-w2 + w0) * wmul;
    double t44 = x0 * x0;
    double t45 = t43 - t44 + t26;
    double t49 = -z1 + z0;
    double t50 = t49 * t4;
    double t57 = wmul * (-w1 + w0);
    double t58 = t57 - t44 + t25;
    double t62 = -t37 * t5;
    double t63 = -wmul * t23;
    double t66 = z2 * t14;
    double t70 = t62 + z0 * (t14 - t20 + t63 + t25 - t26) - t66 + z1 * (t20 + t43 - t44 + t26) - z2 * t58;
    double t74 = yb0 - yb2;
    double t77 = zb0 - zb2;
    double t78 = t5 * t77;
    double t86 = yb0 * zb2 - yb2 * zb0;
    double t94 = t32 * t77;
    double t105 = t49 * t77;
    double t117 = yb1 - yb0;
    double t120 = zb0 - zb1;
    double t121 = t5 * t120;
    double t129 = -yb0 * zb1 + yb1 * zb0;
    double t137 = t32 * t120;
    double t148 = t49 * t120;
    double t161 = x1 - x2;
    double t164 = x0 - x2;
    double t167 = -x1 + x0;
    double t173 = z0 * t161 - z1 * t164 + t167 * z2;
    double t198 = y1 * t32 - t49 * y2 - y0 * t5;
    double t208 = -xb1 + xb2;
    double t209 = x1 * t208;
    double t210 = -x2 * t208;
    double t213 = -t25 * t208;
    double t214 = t26 * t208;
    double t218 = -xb1 * zb2 + xb2 * zb1;
    double t222 = t24 - t10 + t12;
    double t226 = x2 * t208;
    double t229 = -t26 * t208;
    double t234 = t43 - t8 + t12;
    double t243 = t57 - t8 + t10;
    double t247 = t14 - t20 + t63 + t10 - t12;
    double t252 = t62 + z0 * t247 - t66 + z1 * (t20 + t43 - t8 + t12) - z2 * t243;
    double t256 = xb0 - xb2;
    double t257 = x1 * t256;
    double t258 = -x2 * t256;
    double t261 = -t25 * t256;
    double t262 = t26 * t256;
    double t266 = xb0 * zb2 - xb2 * zb0;
    double t273 = x2 * t256;
    double t276 = -t26 * t256;
    double t295 = xb1 - xb0;
    double t296 = x1 * t295;
    double t297 = -x2 * t295;
    double t300 = -t25 * t295;
    double t301 = t26 * t295;
    double t305 = -xb0 * zb1 + xb1 * zb0;
    double t312 = x2 * t295;
    double t315 = -t26 * t295;
    double t335 = y1 - y2;
    double t338 = y0 - y2;
    double t341 = y0 - y1;
    double t347 = z0 * t335 - z1 * t338 + t341 * z2;
    double t388 = -xb1 * yb2 + xb2 * yb1;
    double t392 = t63 + t14 - t20;
    double t403 = t43 - t37 + t20;
    double t413 = t57 - t37 + t14;
    double t423 = -t8 * t335 + y0 * t247 - y2 * t10 + y1 * (t12 + t43 - t37 + t20) - t413 * y2;
    double t433 = xb0 * yb2 - xb2 * yb0;
    double t468 = -xb0 * yb1 + xb1 * yb0;
    unknown[0] = 0.1e1 / (0.2e1 * xb0 * (-y0 * t1 * t161 + y1 * t1 * t164 - y2 * t1 * t167 + t4 * t173) + 0.2e1 * xb1 * (-y0 * t74 * t161 + y1 * t74 * t164 - y2 * t74 * t167 - t173 * t77) + 0.2e1 * xb2 * (-y0 * t117 * t161 + y1 * t117 * t164 - y2 * t117 * t167 + t173 * t120) + 0.2e1 * (t120 * yb2 + yb0 * t4 - yb1 * t77) * t198) * (xb0 * (t8 * (y1 * t1 - y2 * t1 - t6) + y0 * (-t10 * t1 + t12 * t1 - t14 * t1 + t20 * t1 + t1 * t27 + 0.2e1 * z1 * t18 - 0.2e1 * z2 * t18) + t10 * (y2 * t1 + t33) + y1 * (-t12 * t1 - t20 * t1 + t37 * t1 - t1 * t45 - 0.2e1 * z0 * t18 + 0.2e1 * z2 * t18) - t12 * t50 + y2 * (t14 * t1 - t37 * t1 + t1 * t58 + 0.2e1 * z0 * t18 - 0.2e1 * z1 * t18) + t4 * t70) + xb1 * (t8 * (y1 * t74 - y2 * t74 + t78) + y0 * (-t10 * t74 + t12 * t74 - t14 * t74 + t20 * t74 + t74 * t27 + 0.2e1 * z1 * t86 - 0.2e1 * z2 * t86) + t10 * (y2 * t74 - t94) + y1 * (-t12 * t74 - t20 * t74 + t37 * t74 - t74 * t45 - 0.2e1 * z0 * t86 + 0.2e1 * z2 * t86) + t12 * t105 + y2 * (t14 * t74 - t37 * t74 + t74 * t58 + 0.2e1 * z0 * t86 - 0.2e1 * z1 * t86) - t70 * t77) + xb2 * (t8 * (y1 * t117 - y2 * t117 - t121) + y0 * (-t10 * t117 + t12 * t117 - t14 * t117 + t20 * t117 + t117 * t27 + 0.2e1 * z1 * t129 - 0.2e1 * z2 * t129) + t10 * (y2 * t117 + t137) + y1 * (-t12 * t117 - t20 * t117 + t37 * t117 - t117 * t45 - 0.2e1 * z0 * t129 + 0.2e1 * z2 * t129) - t12 * t148 + y2 * (t14 * t117 - t37 * t117 + t117 * t58 + 0.2e1 * z0 * t129 - 0.2e1 * z1 * t129) + t70 * t120));
    unknown[1] = 0.1e1 / (0.2e1 * yb0 * (-x0 * t208 * t335 + x1 * t208 * t338 - x2 * t208 * t341 + t4 * t347) + 0.2e1 * yb1 * (-x0 * t256 * t335 + x1 * t256 * t338 - x2 * t256 * t341 - t347 * t77) + 0.2e1 * yb2 * (-x0 * t295 * t335 + x1 * t295 * t338 - x2 * t295 * t341 + t347 * t120) + 0.2e1 * (x1 * t32 - t49 * x2 - x0 * t5) * (t120 * xb2 + xb0 * t4 - xb1 * t77)) * (yb0 * (t44 * (t209 + t210 - t6) + x0 * (-t14 * t208 + t20 * t208 + t222 * t208 + 0.2e1 * z1 * t218 - 0.2e1 * z2 * t218 + t213 + t214) + t25 * (t226 + t33) + x1 * (-t20 * t208 - t234 * t208 + t37 * t208 - 0.2e1 * z0 * t218 + 0.2e1 * z2 * t218 + t229) - t26 * t50 + x2 * (t14 * t208 + t243 * t208 - t37 * t208 + 0.2e1 * z0 * t218 - 0.2e1 * z1 * t218) + t4 * t252) + yb1 * (t44 * (t257 + t258 + t78) + x0 * (-t14 * t256 + t20 * t256 + t256 * t222 + 0.2e1 * z1 * t266 - 0.2e1 * z2 * t266 + t261 + t262) + t25 * (t273 - t94) + x1 * (-t20 * t256 - t256 * t234 + t37 * t256 - 0.2e1 * z0 * t266 + 0.2e1 * z2 * t266 + t276) + t26 * t105 + x2 * (t14 * t256 + t243 * t256 - t37 * t256 + 0.2e1 * z0 * t266 - 0.2e1 * z1 * t266) - t252 * t77) + yb2 * (t44 * (t296 + t297 - t121) + x0 * (-t14 * t295 + t20 * t295 + t295 * t222 + 0.2e1 * z1 * t305 - 0.2e1 * z2 * t305 + t300 + t301) + t25 * (t312 + t137) + x1 * (-t20 * t295 - t295 * t234 + t37 * t295 - 0.2e1 * z0 * t305 + 0.2e1 * z2 * t305 + t315) - t26 * t148 + x2 * (t14 * t295 + t295 * t243 - t37 * t295 + 0.2e1 * z0 * t305 - 0.2e1 * z1 * t305) + t252 * t120));
    unknown[2] = 0.1e1 / (0.2e1 * zb0 * (x1 * t32 * t208 - x2 * t49 * t208 - x0 * t5 * t208 + t1 * t198) + 0.2e1 * zb1 * (x1 * t32 * t256 - x2 * t49 * t256 - x0 * t5 * t256 + t74 * t198) + 0.2e1 * zb2 * (x1 * t32 * t295 - x2 * t49 * t295 - x0 * t5 * t295 + t117 * t198) - 0.2e1 * (x0 * t335 - x1 * t338 + t341 * x2) * (-xb0 * t1 - t117 * xb2 - xb1 * t74)) * (zb0 * (t44 * (t1 * t335 + t209 + t210) + x0 * (-t10 * t208 + t12 * t208 - t392 * t208 + 0.2e1 * y1 * t388 - 0.2e1 * y2 * t388 + t213 + t214) + t25 * (-t1 * t338 + t226) + x1 * (-t12 * t208 - t403 * t208 + t8 * t208 - 0.2e1 * y0 * t388 + 0.2e1 * y2 * t388 + t229) + t26 * t1 * t341 + x2 * (t10 * t208 + t413 * t208 - t8 * t208 + 0.2e1 * y0 * t388 - 0.2e1 * y1 * t388) - t423 * t1) + zb1 * (t44 * (t74 * t335 + t257 + t258) + x0 * (-t10 * t256 + t12 * t256 - t256 * t392 + 0.2e1 * y1 * t433 - 0.2e1 * y2 * t433 + t261 + t262) + t25 * (-t74 * t338 + t273) + x1 * (-t12 * t256 - t403 * t256 + t8 * t256 - 0.2e1 * y0 * t433 + 0.2e1 * y2 * t433 + t276) + t26 * t74 * t341 + x2 * (t10 * t256 + t413 * t256 - t8 * t256 + 0.2e1 * y0 * t433 - 0.2e1 * y1 * t433) - t74 * t423) + (t44 * (t117 * t335 + t296 + t297) + x0 * (-t10 * t295 + t12 * t295 - t295 * t392 + 0.2e1 * y1 * t468 - 0.2e1 * y2 * t468 + t300 + t301) + t25 * (-t117 * t338 + t312) + x1 * (-t12 * t295 - t295 * t403 + t8 * t295 - 0.2e1 * y0 * t468 + 0.2e1 * y2 * t468 + t315) + t26 * t117 * t341 + x2 * (t10 * t295 + t413 * t295 - t8 * t295 + 0.2e1 * y0 * t468 - 0.2e1 * y1 * t468) - t117 * t423) * zb2);

    nodePos.pos = Eigen::Map<TV3>(unknown);
}
