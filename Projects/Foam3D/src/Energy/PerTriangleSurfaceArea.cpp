#include "../../include/Energy/PerTriangleSurfaceArea.h"

#define NINPUTS 9
#define sqrt(x) (x > 1e-14 ? sqrt(x) : 0)

// @formatter:off
void PerTriangleSurfaceArea::getValue(TriangleValue &value) const {
    double x0 = value.v0(0);
    double y0 = value.v0(1);
    double z0 = value.v0(2);
    double x1 = value.v1(0);
    double y1 = value.v1(1);
    double z1 = value.v1(2);
    double x2 = value.v2(0);
    double y2 = value.v2(1);
    double z2 = value.v2(2);

    double t1 = y1 * y1;
    double t2 = y1 * y2;
    double t3 = 0.2e1 * t2;
    double t4 = y2 * y2;
    double t5 = z1 - z2;
    double t6 = t5 * t5;
    double t8 = x0 * x0;
    double t10 = -y1 + y2;
    double t13 = z0 - z2;
    double t19 = -z1 + z0;
    double t26 = y0 * y0;
    double t29 = t13 * t13;
    double t31 = x1 * x1;
    double t42 = t19 * t19;
    double t44 = x2 * x2;
    double t50 = pow(-y1 * t13 + t19 * y2 + y0 * t5, 0.2e1);
    double t52 = sqrt(t8 * (t1 - t3 + t4 + t6) + x0 * (x1 * (0.2e1 * y0 * t10 - 0.2e1 * t13 * t5 + t3 - 0.2e1 * t4) + 0.2e1 * (-y0 * t10 + t19 * t5 - t1 + t2) * x2) + t31 * (-0.2e1 * y0 * y2 + t26 + t29 + t4) - 0.2e1 * x1 * (t26 + (-y1 - y2) * y0 + t2 + t19 * t13) * x2 + t44 * (-0.2e1 * y0 * y1 + t1 + t26 + t42) + t50);
    double t53 = t52 / 0.2e1;

    value.value = t53;
}

void PerTriangleSurfaceArea::getGradient(TriangleValue &value) const {
    double x0 = value.v0(0);
    double y0 = value.v0(1);
    double z0 = value.v0(2);
    double x1 = value.v1(0);
    double y1 = value.v1(1);
    double z1 = value.v1(2);
    double x2 = value.v2(0);
    double y2 = value.v2(1);
    double z2 = value.v2(2);

    double unknown[NINPUTS];

    double t1 = y1 * y1;
    double t2 = y1 * y2;
    double t3 = 0.2e1 * t2;
    double t4 = y2 * y2;
    double t5 = z1 - z2;
    double t6 = t5 * t5;
    double t7 = t1 - t3 + t4 + t6;
    double t8 = x0 * x0;
    double t10 = -y1 + y2;
    double t13 = z0 - z2;
    double t16 = 0.2e1 * y0 * t10 - 0.2e1 * t13 * t5 + t3 - 0.2e1 * t4;
    double t17 = x1 * t16;
    double t19 = -z1 + z0;
    double t21 = -y0 * t10 + t19 * t5 - t1 + t2;
    double t23 = 0.2e1 * t21 * x2;
    double t26 = y0 * y0;
    double t29 = t13 * t13;
    double t30 = -0.2e1 * y0 * y2 + t26 + t29 + t4;
    double t31 = x1 * x1;
    double t36 = t26 + (-y1 - y2) * y0 + t2 + t19 * t13;
    double t37 = t36 * x2;
    double t42 = t19 * t19;
    double t43 = -0.2e1 * y0 * y1 + t1 + t26 + t42;
    double t44 = x2 * x2;
    double t49 = -y1 * t13 + t19 * y2 + y0 * t5;
    double t50 = t49 * t49;
    double t52 = sqrt(t8 * t7 + x0 * (t17 + t23) + t31 * t30 - 0.2e1 * x1 * t37 + t44 * t43 + t50);
    double t53 = 0.1e1 / t52;
    double t64 = y0 - y2;
    double t66 = 0.2e1 * y0;
    double t71 = y0 - y1;
    double t84 = 0.2e1 * z0;
    double t104 = 0.2e1 * y1;
    double t121 = 0.2e1 * z1;
    double t148 = -t71 * x2;
    double t164 = -t19 * x2;
    unknown[0] = (0.2e1 * x0 * t7 + t17 + t23) * t53 / 0.4e1;
    unknown[1] = (x0 * (0.2e1 * x1 * t10 - 0.2e1 * t10 * x2) + 0.2e1 * t31 * t64 - 0.2e1 * x1 * (t66 - y1 - y2) * x2 + 0.2e1 * t44 * t71 + 0.2e1 * t5 * t49) * t53 / 0.4e1;
    unknown[2] = (x0 * (-0.2e1 * x1 * t5 + 0.2e1 * t5 * x2) + 0.2e1 * t31 * t13 - 0.2e1 * x1 * (-z1 + t84 - z2) * x2 + 0.2e1 * t44 * t19 + 0.2e1 * t10 * t49) * t53 / 0.4e1;
    unknown[3] = (x0 * t16 + 0.2e1 * x1 * t30 - 0.2e1 * t37) * t53 / 0.4e1;
    unknown[4] = (-0.2e1 * t8 * t10 + x0 * (-0.2e1 * x1 * t64 + 0.2e1 * (y0 - t104 + y2) * x2) + 0.2e1 * x1 * t64 * x2 - 0.2e1 * t44 * t71 - 0.2e1 * t13 * t49) * t53 / 0.4e1;
    unknown[5] = (0.2e1 * t8 * t5 + x0 * (-0.2e1 * x1 * t13 + 0.2e1 * (-t121 + z0 + z2) * x2) + 0.2e1 * x1 * t13 * x2 - 0.2e1 * t44 * t19 + 0.2e1 * t64 * t49) * t53 / 0.4e1;
    unknown[6] = (0.2e1 * x0 * t21 - 0.2e1 * x1 * t36 + 0.2e1 * x2 * t43) * t53 / 0.4e1;
    unknown[7] = (0.2e1 * t8 * t10 + x0 * (x1 * (t66 + t104 - 0.4e1 * y2) + 0.2e1 * t148) - 0.2e1 * t31 * t64 - 0.2e1 * x1 * t148 + 0.2e1 * t19 * t49) * t53 / 0.4e1;
    unknown[8] = (-0.2e1 * t8 * t5 + x0 * (x1 * (-0.4e1 * z2 + t84 + t121) + 0.2e1 * t164) - 0.2e1 * t31 * t13 - 0.2e1 * x1 * t164 - 0.2e1 * t71 * t49) * t53 / 0.4e1;

    value.gradient = Eigen::Map<Eigen::VectorXd>(&unknown[0], NINPUTS);
}

void PerTriangleSurfaceArea::getHessian(TriangleValue &value) const {
    double x0 = value.v0(0);
    double y0 = value.v0(1);
    double z0 = value.v0(2);
    double x1 = value.v1(0);
    double y1 = value.v1(1);
    double z1 = value.v1(2);
    double x2 = value.v2(0);
    double y2 = value.v2(1);
    double z2 = value.v2(2);

    double unknown[NINPUTS][NINPUTS];

    double t1 = y1 * y1;
    double t2 = y1 * y2;
    double t3 = 0.2e1 * t2;
    double t4 = y2 * y2;
    double t5 = z1 - z2;
    double t6 = t5 * t5;
    double t7 = t1 - t3 + t4 + t6;
    double t8 = x0 * x0;
    double t10 = -y1 + y2;
    double t12 = 0.2e1 * t4;
    double t13 = z0 - z2;
    double t16 = 0.2e1 * y0 * t10 - 0.2e1 * t13 * t5 - t12 + t3;
    double t17 = x1 * t16;
    double t19 = -z1 + z0;
    double t20 = t19 * t5;
    double t21 = -y0 * t10 - t1 + t2 + t20;
    double t23 = 0.2e1 * t21 * x2;
    double t26 = y0 * y0;
    double t27 = y0 * y2;
    double t29 = t13 * t13;
    double t30 = t26 - 0.2e1 * t27 + t4 + t29;
    double t31 = x1 * x1;
    double t36 = t26 + (-y1 - y2) * y0 + t2 + t19 * t13;
    double t37 = t36 * x2;
    double t40 = y0 * y1;
    double t42 = t19 * t19;
    double t43 = t26 - 0.2e1 * t40 + t1 + t42;
    double t44 = x2 * x2;
    double t46 = y0 * t5;
    double t47 = -y1 * t13;
    double t48 = t19 * y2;
    double t49 = t46 + t47 + t48;
    double t50 = t49 * t49;
    double t51 = t8 * t7 + x0 * (t17 + t23) + t31 * t30 - 0.2e1 * x1 * t37 + t44 * t43 + t50;
    double t52 = sqrt(t51);
    double t54 = 0.1e1 / t52 / t51;
    double t57 = 0.2e1 * x0 * t7 + t17 + t23;
    double t58 = t57 * t57;
    double t61 = 0.1e1 / t52;
    double t62 = 0.2e1 * t1;
    double t64 = 0.2e1 * t6;
    double t69 = t57 * t54;
    double t73 = 0.2e1 * x1 * t10 - 0.2e1 * t10 * x2;
    double t75 = y0 - y2;
    double t77 = 0.2e1 * y0;
    double t78 = t77 - y1 - y2;
    double t79 = t78 * x2;
    double t82 = y0 - y1;
    double t86 = 0.2e1 * t31 * t75 + 0.2e1 * t44 * t82 + 0.2e1 * t5 * t49 + x0 * t73 - 0.2e1 * x1 * t79;
    double t91 = -t86 * t69 / 0.8e1 + t73 * t61 / 0.4e1;
    double t95 = -0.2e1 * x1 * t5 + 0.2e1 * t5 * x2;
    double t98 = 0.2e1 * z0;
    double t99 = -z1 + t98 - z2;
    double t100 = t99 * x2;
    double t106 = 0.2e1 * t10 * t49 - 0.2e1 * x1 * t100 + 0.2e1 * t31 * t13 + 0.2e1 * t44 * t19 + x0 * t95;
    double t111 = -t106 * t69 / 0.8e1 + t95 * t61 / 0.4e1;
    double t116 = x0 * t16 + 0.2e1 * x1 * t30 - 0.2e1 * t37;
    double t121 = -t116 * t69 / 0.8e1 + t16 * t61 / 0.4e1;
    double t123 = -0.2e1 * x1 * t75;
    double t124 = 0.2e1 * y1;
    double t127 = 0.2e1 * (y0 - t124 + y2) * x2;
    double t130 = -t75 * x2;
    double t136 = -0.2e1 * t8 * t10 + x0 * (t123 + t127) - 0.2e1 * x1 * t130 - 0.2e1 * t44 * t82 - 0.2e1 * t13 * t49;
    double t139 = -0.2e1 * x0 * t10;
    double t144 = -t136 * t69 / 0.8e1 + (0.2e1 * t139 + t123 + t127) * t61 / 0.4e1;
    double t146 = -0.2e1 * x1 * t13;
    double t147 = 0.2e1 * z1;
    double t150 = 0.2e1 * (-t147 + z0 + z2) * x2;
    double t153 = -t13 * x2;
    double t159 = 0.2e1 * t8 * t5 + x0 * (t146 + t150) - 0.2e1 * x1 * t153 - 0.2e1 * t44 * t19 + 0.2e1 * t75 * t49;
    double t162 = 0.2e1 * x0 * t5;
    double t167 = -t159 * t69 / 0.8e1 + (0.2e1 * t162 + t146 + t150) * t61 / 0.4e1;
    double t173 = 0.2e1 * x0 * t21 - 0.2e1 * x1 * t36 + 0.2e1 * x2 * t43;
    double t178 = -t173 * t69 / 0.8e1 + t21 * t61 / 0.2e1;
    double t181 = t77 + t124 - 0.4e1 * y2;
    double t182 = x1 * t181;
    double t183 = -t82 * x2;
    double t184 = 0.2e1 * t183;
    double t192 = 0.2e1 * t8 * t10 + x0 * (t182 + t184) - 0.2e1 * t31 * t75 - 0.2e1 * x1 * t183 + 0.2e1 * t19 * t49;
    double t195 = 0.2e1 * x0 * t10;
    double t200 = -t192 * t69 / 0.8e1 + (0.2e1 * t195 + t182 + t184) * t61 / 0.4e1;
    double t203 = -0.4e1 * z2 + t98 + t147;
    double t204 = x1 * t203;
    double t205 = -t19 * x2;
    double t206 = 0.2e1 * t205;
    double t214 = -0.2e1 * t8 * t5 + x0 * (t204 + t206) - 0.2e1 * t31 * t13 - 0.2e1 * x1 * t205 - 0.2e1 * t82 * t49;
    double t217 = -0.2e1 * x0 * t5;
    double t222 = -t214 * t69 / 0.8e1 + (0.2e1 * t217 + t204 + t206) * t61 / 0.4e1;
    double t223 = t86 * t86;
    double t226 = 0.2e1 * t31;
    double t227 = x2 * x1;
    double t228 = 0.4e1 * t227;
    double t229 = 0.2e1 * t44;
    double t234 = t86 * t54;
    double t240 = -t106 * t234 / 0.8e1 + t5 * t10 * t61 / 0.2e1;
    double t249 = -t116 * t234 / 0.8e1 + (0.4e1 * x1 * t75 + t195 - 0.2e1 * t79) * t61 / 0.4e1;
    double t252 = -x1 + x2;
    double t253 = 0.2e1 * x0 * t252;
    double t254 = 0.2e1 * t227;
    double t260 = -t136 * t234 / 0.8e1 + (-0.2e1 * t13 * t5 - t229 + t253 + t254) * t61 / 0.4e1;
    double t267 = -t159 * t234 / 0.8e1 + (t5 * t75 + t46 + t47 + t48) * t61 / 0.2e1;
    double t277 = -t173 * t234 / 0.8e1 + (-0.2e1 * x1 * t78 + 0.4e1 * t82 * x2 + t139) * t61 / 0.4e1;
    double t280 = -0.2e1 * x0 * t252;
    double t285 = -t192 * t234 / 0.8e1 + (t280 - t226 + t254 + 0.2e1 * t20) * t61 / 0.4e1;
    double t292 = -t214 * t234 / 0.8e1 + (-t5 * t82 - t46 - t47 - t48) * t61 / 0.2e1;
    double t293 = t106 * t106;
    double t296 = t10 * t10;
    double t302 = t106 * t54;
    double t311 = -t116 * t302 / 0.8e1 + (0.4e1 * x1 * t13 - 0.2e1 * t100 + t217) * t61 / 0.4e1;
    double t318 = -t136 * t302 / 0.8e1 + (-t10 * t13 - t46 - t47 - t48) * t61 / 0.2e1;
    double t326 = -t159 * t302 / 0.8e1 + (0.2e1 * t10 * t75 - t229 + t253 + t254) * t61 / 0.4e1;
    double t336 = -t173 * t302 / 0.8e1 + (0.4e1 * t19 * x2 - 0.2e1 * x1 * t99 + t162) * t61 / 0.4e1;
    double t343 = -t192 * t302 / 0.8e1 + (t10 * t19 + t46 + t47 + t48) * t61 / 0.2e1;
    double t351 = -t214 * t302 / 0.8e1 + (-0.2e1 * t10 * t82 - t226 + t254 + t280) * t61 / 0.4e1;
    double t352 = t116 * t116;
    double t355 = 0.2e1 * t26;
    double t357 = 0.2e1 * t29;
    double t362 = t116 * t54;
    double t370 = -t136 * t362 / 0.8e1 + (-0.2e1 * x0 * t75 - 0.2e1 * t130) * t61 / 0.4e1;
    double t378 = -t159 * t362 / 0.8e1 + (-0.2e1 * x0 * t13 - 0.2e1 * t153) * t61 / 0.4e1;
    double t383 = -t173 * t362 / 0.8e1 - t36 * t61 / 0.2e1;
    double t391 = -t192 * t362 / 0.8e1 + (x0 * t181 + 0.2e1 * t123 - t184) * t61 / 0.4e1;
    double t399 = -t214 * t362 / 0.8e1 + (x0 * t203 + 0.2e1 * t146 - t206) * t61 / 0.4e1;
    double t400 = t136 * t136;
    double t403 = 0.2e1 * t8;
    double t405 = 0.4e1 * x2 * x0;
    double t410 = t136 * t54;
    double t416 = -t159 * t410 / 0.8e1 - t13 * t75 * t61 / 0.2e1;
    double t430 = -t173 * t410 / 0.8e1 + (x0 * (t77 - 0.4e1 * y1 + 0.2e1 * y2) + 0.2e1 * x1 * t75 - 0.4e1 * t82 * x2) * t61 / 0.4e1;
    double t434 = 0.2e1 * x0 * (x1 + x2);
    double t440 = -t192 * t410 / 0.8e1 + (-0.2e1 * t19 * t13 - t254 - t403 + t434) * t61 / 0.4e1;
    double t447 = -t214 * t410 / 0.8e1 + (t13 * t82 + t46 + t47 + t48) * t61 / 0.2e1;
    double t448 = t159 * t159;
    double t451 = t75 * t75;
    double t457 = t159 * t54;
    double t471 = -t173 * t457 / 0.8e1 + (x0 * (-0.4e1 * z1 + t98 + 0.2e1 * z2) + 0.2e1 * x1 * t13 - 0.4e1 * t19 * x2) * t61 / 0.4e1;
    double t478 = -t192 * t457 / 0.8e1 + (t75 * t19 - t46 - t47 - t48) * t61 / 0.2e1;
    double t486 = -t214 * t457 / 0.8e1 + (-0.2e1 * t75 * t82 - t254 - t403 + t434) * t61 / 0.4e1;
    double t487 = t173 * t173;
    double t491 = 0.2e1 * t42;
    double t496 = t173 * t54;
    double t505 = -t192 * t496 / 0.8e1 + (-0.2e1 * x0 * t82 + 0.2e1 * x1 * t82) * t61 / 0.4e1;
    double t514 = -t214 * t496 / 0.8e1 + (-0.2e1 * x0 * t19 + 0.2e1 * x1 * t19) * t61 / 0.4e1;
    double t515 = t192 * t192;
    double t519 = 0.4e1 * x1 * x0;
    double t530 = -t214 * t192 * t54 / 0.8e1 - t19 * t82 * t61 / 0.2e1;
    double t531 = t214 * t214;
    double t534 = t82 * t82;
    unknown[0][0] = -t58 * t54 / 0.8e1 + (t62 - 0.4e1 * t2 + t12 + t64) * t61 / 0.4e1;
    unknown[0][1] = t91;
    unknown[0][2] = t111;
    unknown[0][3] = t121;
    unknown[0][4] = t144;
    unknown[0][5] = t167;
    unknown[0][6] = t178;
    unknown[0][7] = t200;
    unknown[0][8] = t222;
    unknown[1][0] = t91;
    unknown[1][1] = -t223 * t54 / 0.8e1 + (t226 - t228 + t229 + t64) * t61 / 0.4e1;
    unknown[1][2] = t240;
    unknown[1][3] = t249;
    unknown[1][4] = t260;
    unknown[1][5] = t267;
    unknown[1][6] = t277;
    unknown[1][7] = t285;
    unknown[1][8] = t292;
    unknown[2][0] = t111;
    unknown[2][1] = t240;
    unknown[2][2] = -t293 * t54 / 0.8e1 + (t226 - t228 + t229 + 0.2e1 * t296) * t61 / 0.4e1;
    unknown[2][3] = t311;
    unknown[2][4] = t318;
    unknown[2][5] = t326;
    unknown[2][6] = t336;
    unknown[2][7] = t343;
    unknown[2][8] = t351;
    unknown[3][0] = t121;
    unknown[3][1] = t249;
    unknown[3][2] = t311;
    unknown[3][3] = -t352 * t54 / 0.8e1 + (t355 - 0.4e1 * t27 + t12 + t357) * t61 / 0.4e1;
    unknown[3][4] = t370;
    unknown[3][5] = t378;
    unknown[3][6] = t383;
    unknown[3][7] = t391;
    unknown[3][8] = t399;
    unknown[4][0] = t144;
    unknown[4][1] = t260;
    unknown[4][2] = t318;
    unknown[4][3] = t370;
    unknown[4][4] = -t400 * t54 / 0.8e1 + (t403 - t405 + t229 + t357) * t61 / 0.4e1;
    unknown[4][5] = t416;
    unknown[4][6] = t430;
    unknown[4][7] = t440;
    unknown[4][8] = t447;
    unknown[5][0] = t167;
    unknown[5][1] = t267;
    unknown[5][2] = t326;
    unknown[5][3] = t378;
    unknown[5][4] = t416;
    unknown[5][5] = -t448 * t54 / 0.8e1 + (t403 - t405 + t229 + 0.2e1 * t451) * t61 / 0.4e1;
    unknown[5][6] = t471;
    unknown[5][7] = t478;
    unknown[5][8] = t486;
    unknown[6][0] = t178;
    unknown[6][1] = t277;
    unknown[6][2] = t336;
    unknown[6][3] = t383;
    unknown[6][4] = t430;
    unknown[6][5] = t471;
    unknown[6][6] = -t487 * t54 / 0.8e1 + (t355 - 0.4e1 * t40 + t62 + t491) * t61 / 0.4e1;
    unknown[6][7] = t505;
    unknown[6][8] = t514;
    unknown[7][0] = t200;
    unknown[7][1] = t285;
    unknown[7][2] = t343;
    unknown[7][3] = t391;
    unknown[7][4] = t440;
    unknown[7][5] = t478;
    unknown[7][6] = t505;
    unknown[7][7] = -t515 * t54 / 0.8e1 + (t403 - t519 + t226 + t491) * t61 / 0.4e1;
    unknown[7][8] = t530;
    unknown[8][0] = t222;
    unknown[8][1] = t292;
    unknown[8][2] = t351;
    unknown[8][3] = t399;
    unknown[8][4] = t447;
    unknown[8][5] = t486;
    unknown[8][6] = t514;
    unknown[8][7] = t530;
    unknown[8][8] = -t531 * t54 / 0.8e1 + (t403 - t519 + t226 + 0.2e1 * t534) * t61 / 0.4e1;

    value.hessian = Eigen::Map<Eigen::MatrixXd>(&unknown[0][0], NINPUTS, NINPUTS);
}
