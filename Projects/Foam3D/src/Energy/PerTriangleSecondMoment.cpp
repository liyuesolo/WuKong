#include "../../include/Energy/PerTriangleSecondMoment.h"

#define NINPUTS 12

// @formatter:off
void PerTriangleSecondMoment::getValue(TriangleValue &value, const TV3 &centroid) const {
    double x0 = value.v0(0);
    double y0 = value.v0(1);
    double z0 = value.v0(2);
    double x1 = value.v1(0);
    double y1 = value.v1(1);
    double z1 = value.v1(2);
    double x2 = value.v2(0);
    double y2 = value.v2(1);
    double z2 = value.v2(2);
    double xc = centroid(0);
    double yc = centroid(1);
    double zc = centroid(2);

    double t1 = x0 * x0;
    double t2 = 0.5e1 * xc;
    double t5 = x1 * x1;
    double t8 = x2 * x2;
    double t11 = y0 * y0;
    double t12 = 0.5e1 * yc;
    double t15 = y1 * y1;
    double t19 = y2 * y2;
    double t22 = z0 * z0;
    double t23 = 0.5e1 * zc;
    double t26 = z1 * z1;
    double t29 = z2 * z2;
    double t32 = zc * zc;
    double t34 = xc * xc;
    double t36 = yc * yc;
    double t38 = t19 - 0.5e1 * yc * y2 + t22 + z0 * (z1 + z2 - t23) + t26 + z1 * (z2 - t23) + t29 - 0.5e1 * zc * z2 + 0.10e2 * t32 + 0.10e2 * t34 + 0.10e2 * t36;
    value.value = -((-y1 * z2 + y2 * z1) * x0 + (y0 * z2 - y2 * z0) * x1 - x2 * (y0 * z1 - y1 * z0)) * (t1 + x0 * (x1 + x2 - t2) + t5 + x1 * (x2 - t2) + t8 - 0.5e1 * xc * x2 + t11 + y0 * (y1 + y2 - t12) + t15 + y1 * (y2 - t12) + t38) / 0.60e2;
}

void PerTriangleSecondMoment::getGradient(TriangleValue &value, const TV3 &centroid) const {
    double x0 = value.v0(0);
    double y0 = value.v0(1);
    double z0 = value.v0(2);
    double x1 = value.v1(0);
    double y1 = value.v1(1);
    double z1 = value.v1(2);
    double x2 = value.v2(0);
    double y2 = value.v2(1);
    double z2 = value.v2(2);
    double xc = centroid(0);
    double yc = centroid(1);
    double zc = centroid(2);

    double unknown[NINPUTS];

    double t2 = 0.5e1 * xc;
    double t6 = -y1 * z2 + y2 * z1;
    double t10 = y0 * z2 - y2 * z0;
    double t14 = y0 * z1 - y1 * z0;
    double t16 = x1 * t10 - t14 * x2 + x0 * t6;
    double t18 = x0 * x0;
    double t21 = x1 * x1;
    double t24 = x2 * x2;
    double t27 = y0 * y0;
    double t28 = 0.5e1 * yc;
    double t31 = y1 * y1;
    double t35 = y2 * y2;
    double t38 = z0 * z0;
    double t39 = 0.5e1 * zc;
    double t42 = z1 * z1;
    double t45 = z2 * z2;
    double t48 = zc * zc;
    double t50 = xc * xc;
    double t52 = yc * yc;
    double t54 = t35 - 0.5e1 * yc * y2 + t38 + z0 * (z1 + z2 - t39) + t42 + z1 * (z2 - t39) + t45 - 0.5e1 * zc * z2 + 0.10e2 * t48 + 0.10e2 * t50 + 0.10e2 * t52;
    double t55 = t18 + x0 * (x1 + x2 - t2) + t21 + x1 * (x2 - t2) + t24 - 0.5e1 * xc * x2 + t27 + y0 * (y1 + y2 - t28) + t31 + y1 * (y2 - t28) + t54;
    unknown[0] = -t16 * (0.2e1 * x0 + x1 + x2 - t2) / 0.60e2 - t6 * t55 / 0.60e2;
    unknown[1] = -t16 * (0.2e1 * y0 + y1 + y2 - t28) / 0.60e2 - (z2 * x1 - x2 * z1) * t55 / 0.60e2;
    unknown[2] = -t16 * (0.2e1 * z0 + z1 + z2 - t39) / 0.60e2 - (-y2 * x1 + x2 * y1) * t55 / 0.60e2;
    unknown[3] = -t16 * (x0 + 0.2e1 * x1 + x2 - t2) / 0.60e2 - t10 * t55 / 0.60e2;
    unknown[4] = -t16 * (y0 + 0.2e1 * y1 + y2 - t28) / 0.60e2 - (-z2 * x0 + x2 * z0) * t55 / 0.60e2;
    unknown[5] = -t16 * (z0 + 0.2e1 * z1 + z2 - t39) / 0.60e2 - (y2 * x0 - x2 * y0) * t55 / 0.60e2;
    unknown[6] = -t16 * (x0 + x1 + 0.2e1 * x2 - t2) / 0.60e2 + t14 * t55 / 0.60e2;
    unknown[7] = -t16 * (y0 + y1 + 0.2e1 * y2 - t28) / 0.60e2 - (z1 * x0 - z0 * x1) * t55 / 0.60e2;
    unknown[8] = -t16 * (z0 + z1 + 0.2e1 * z2 - t39) / 0.60e2 - (-y1 * x0 + y0 * x1) * t55 / 0.60e2;
    unknown[9] = -t16 * (-0.5e1 * x0 - 0.5e1 * x1 - 0.5e1 * x2 + 0.20e2 * xc) / 0.60e2;
    unknown[10] = -t16 * (-0.5e1 * y0 - 0.5e1 * y1 - 0.5e1 * y2 + 0.20e2 * yc) / 0.60e2;
    unknown[11] = -t16 * (-0.5e1 * z0 - 0.5e1 * z1 - 0.5e1 * z2 + 0.20e2 * zc) / 0.60e2;

    value.gradient = Eigen::Map<Eigen::VectorXd>(&unknown[0], NINPUTS);
}

void PerTriangleSecondMoment::getHessian(TriangleValue &value, const TV3 &centroid) const {
    double x0 = value.v0(0);
    double y0 = value.v0(1);
    double z0 = value.v0(2);
    double x1 = value.v1(0);
    double y1 = value.v1(1);
    double z1 = value.v1(2);
    double x2 = value.v2(0);
    double y2 = value.v2(1);
    double z2 = value.v2(2);
    double xc = centroid(0);
    double yc = centroid(1);
    double zc = centroid(2);

    double unknown[NINPUTS][NINPUTS];

    double t3 = -y1 * z2 + y2 * z1;
    double t4 = x0 * t3;
    double t7 = y0 * z2 - y2 * z0;
    double t8 = x1 * t7;
    double t11 = y0 * z1 - y1 * z0;
    double t12 = t11 * x2;
    double t14 = 0.5e1 * xc;
    double t15 = 0.2e1 * x0 + x1 + x2 - t14;
    double t20 = x1 * z2 - x2 * z1;
    double t23 = 0.5e1 * yc;
    double t24 = 0.2e1 * y0 + y1 + y2 - t23;
    double t26 = -t20 * t15 - t3 * t24;
    double t29 = -x1 * y2 + x2 * y1;
    double t32 = 0.5e1 * zc;
    double t33 = 0.2e1 * z0 + z1 + z2 - t32;
    double t35 = -t29 * t15 - t3 * t33;
    double t38 = x0 + 0.2e1 * x1 + x2 - t14;
    double t40 = -t7 * t15 - t3 * t38 + t12 - t4 - t8;
    double t43 = -x0 * z2 + x2 * z0;
    double t46 = y0 + 0.2e1 * y1 + y2 - t23;
    double t48 = x0 * x0;
    double t51 = x1 * x1;
    double t54 = x2 * x2;
    double t57 = y0 * y0;
    double t60 = y1 * y1;
    double t64 = y2 * y2;
    double t67 = z0 * z0;
    double t70 = z1 * z1;
    double t73 = z2 * z2;
    double t76 = zc * zc;
    double t78 = xc * xc;
    double t80 = yc * yc;
    double t82 = t64 - 0.5e1 * yc * y2 + t67 + z0 * (z1 + z2 - t32) + t70 + z1 * (z2 - t32) + t73 - 0.5e1 * zc * z2 + 0.10e2 * t76 + 0.10e2 * t78 + 0.10e2 * t80;
    double t83 = t48 + x0 * (x1 + x2 - t14) + t51 + x1 * (x2 - t14) + t54 - 0.5e1 * xc * x2 + t57 + y0 * (y1 + y2 - t23) + t60 + y1 * (y2 - t23) + t82;
    double t84 = z2 * t83;
    double t85 = -t43 * t15 - t3 * t46 + t84;
    double t88 = x0 * y2 - x2 * y0;
    double t91 = z0 + 0.2e1 * z1 + z2 - t32;
    double t93 = y2 * t83;
    double t94 = -t88 * t15 - t3 * t91 - t93;
    double t97 = x0 + x1 + 0.2e1 * x2 - t14;
    double t99 = t11 * t15 - t3 * t97 + t12 - t4 - t8;
    double t102 = x0 * z1 - x1 * z0;
    double t105 = y0 + y1 + 0.2e1 * y2 - t23;
    double t107 = z1 * t83;
    double t108 = -t102 * t15 - t3 * t105 - t107;
    double t111 = -x0 * y1 + x1 * y0;
    double t114 = z0 + z1 + 0.2e1 * z2 - t32;
    double t116 = y1 * t83;
    double t117 = -t111 * t15 - t3 * t114 + t116;
    double t118 = t4 / 0.12e2;
    double t119 = t8 / 0.12e2;
    double t120 = t12 / 0.12e2;
    double t125 = -0.5e1 * x0 - 0.5e1 * x1 - 0.5e1 * x2 + 0.20e2 * xc;
    double t128 = t118 + t119 - t120 - t3 * t125 / 0.60e2;
    double t133 = -0.5e1 * y0 - 0.5e1 * y1 - 0.5e1 * y2 + 0.20e2 * yc;
    double t135 = t3 * t133 / 0.60e2;
    double t140 = -0.5e1 * z0 - 0.5e1 * z1 - 0.5e1 * z2 + 0.20e2 * zc;
    double t142 = t3 * t140 / 0.60e2;
    double t147 = -t20 * t33 - t29 * t24;
    double t150 = -t20 * t38 - t7 * t24 - t84;
    double t153 = -t20 * t46 - t43 * t24 + t12 - t4 - t8;
    double t156 = x2 * t83;
    double t157 = -t20 * t91 - t88 * t24 + t156;
    double t160 = t11 * t24 - t20 * t97 + t107;
    double t163 = -t102 * t24 - t20 * t105 + t12 - t4 - t8;
    double t166 = x1 * t83;
    double t167 = -t111 * t24 - t20 * t114 - t166;
    double t169 = t20 * t125 / 0.60e2;
    double t172 = t118 + t119 - t120 - t20 * t133 / 0.60e2;
    double t174 = t20 * t140 / 0.60e2;
    double t179 = -t29 * t38 - t7 * t33 + t93;
    double t182 = -t29 * t46 - t43 * t33 - t156;
    double t185 = -t29 * t91 - t88 * t33 + t12 - t4 - t8;
    double t188 = t11 * t33 - t29 * t97 - t116;
    double t191 = -t102 * t33 - t29 * t105 + t166;
    double t194 = -t111 * t33 - t29 * t114 + t12 - t4 - t8;
    double t196 = t29 * t125 / 0.60e2;
    double t198 = t29 * t133 / 0.60e2;
    double t201 = t118 + t119 - t120 - t29 * t140 / 0.60e2;
    double t206 = -t43 * t38 - t7 * t46;
    double t209 = -t88 * t38 - t7 * t91;
    double t212 = t11 * t38 - t7 * t97 + t12 - t4 - t8;
    double t215 = z0 * t83;
    double t216 = -t102 * t38 - t7 * t105 + t215;
    double t219 = y0 * t83;
    double t220 = -t111 * t38 - t7 * t114 - t219;
    double t223 = t118 + t119 - t120 - t7 * t125 / 0.60e2;
    double t225 = t7 * t133 / 0.60e2;
    double t227 = t7 * t140 / 0.60e2;
    double t232 = -t43 * t91 - t88 * t46;
    double t235 = t11 * t46 - t43 * t97 - t215;
    double t238 = -t102 * t46 - t43 * t105 + t12 - t4 - t8;
    double t241 = x0 * t83;
    double t242 = -t111 * t46 - t43 * t114 + t241;
    double t244 = t43 * t125 / 0.60e2;
    double t247 = t118 + t119 - t120 - t43 * t133 / 0.60e2;
    double t249 = t43 * t140 / 0.60e2;
    double t254 = t11 * t91 - t88 * t97 + t219;
    double t257 = -t102 * t91 - t88 * t105 - t241;
    double t260 = -t111 * t91 - t88 * t114 + t12 - t4 - t8;
    double t262 = t88 * t125 / 0.60e2;
    double t264 = t88 * t133 / 0.60e2;
    double t267 = t118 + t119 - t120 - t88 * t140 / 0.60e2;
    double t272 = -t102 * t97 + t11 * t105;
    double t275 = t11 * t114 - t111 * t97;
    double t278 = t118 + t119 - t120 + t11 * t125 / 0.60e2;
    double t280 = -t11 * t133 / 0.60e2;
    double t282 = -t11 * t140 / 0.60e2;
    double t287 = -t102 * t114 - t111 * t105;
    double t289 = t102 * t125 / 0.60e2;
    double t292 = t118 + t119 - t120 - t102 * t133 / 0.60e2;
    double t294 = t102 * t140 / 0.60e2;
    double t298 = t111 * t125 / 0.60e2;
    double t300 = t111 * t133 / 0.60e2;
    double t303 = t118 + t119 - t120 - t111 * t140 / 0.60e2;
    double t304 = -t4 - t8 + t12;
    unknown[0][0] = -t3 * t15 / 0.30e2 + t12 / 0.30e2 - t4 / 0.30e2 - t8 / 0.30e2;
    unknown[0][1] = t26 / 0.60e2;
    unknown[0][2] = t35 / 0.60e2;
    unknown[0][3] = t40 / 0.60e2;
    unknown[0][4] = t85 / 0.60e2;
    unknown[0][5] = t94 / 0.60e2;
    unknown[0][6] = t99 / 0.60e2;
    unknown[0][7] = t108 / 0.60e2;
    unknown[0][8] = t117 / 0.60e2;
    unknown[0][9] = t128;
    unknown[0][10] = -t135;
    unknown[0][11] = -t142;
    unknown[1][0] = t26 / 0.60e2;
    unknown[1][1] = -t20 * t24 / 0.30e2 + t12 / 0.30e2 - t4 / 0.30e2 - t8 / 0.30e2;
    unknown[1][2] = t147 / 0.60e2;
    unknown[1][3] = t150 / 0.60e2;
    unknown[1][4] = t153 / 0.60e2;
    unknown[1][5] = t157 / 0.60e2;
    unknown[1][6] = t160 / 0.60e2;
    unknown[1][7] = t163 / 0.60e2;
    unknown[1][8] = t167 / 0.60e2;
    unknown[1][9] = -t169;
    unknown[1][10] = t172;
    unknown[1][11] = -t174;
    unknown[2][0] = t35 / 0.60e2;
    unknown[2][1] = t147 / 0.60e2;
    unknown[2][2] = -t29 * t33 / 0.30e2 + t12 / 0.30e2 - t4 / 0.30e2 - t8 / 0.30e2;
    unknown[2][3] = t179 / 0.60e2;
    unknown[2][4] = t182 / 0.60e2;
    unknown[2][5] = t185 / 0.60e2;
    unknown[2][6] = t188 / 0.60e2;
    unknown[2][7] = t191 / 0.60e2;
    unknown[2][8] = t194 / 0.60e2;
    unknown[2][9] = -t196;
    unknown[2][10] = -t198;
    unknown[2][11] = t201;
    unknown[3][0] = t40 / 0.60e2;
    unknown[3][1] = t150 / 0.60e2;
    unknown[3][2] = t179 / 0.60e2;
    unknown[3][3] = -t7 * t38 / 0.30e2 + t12 / 0.30e2 - t4 / 0.30e2 - t8 / 0.30e2;
    unknown[3][4] = t206 / 0.60e2;
    unknown[3][5] = t209 / 0.60e2;
    unknown[3][6] = t212 / 0.60e2;
    unknown[3][7] = t216 / 0.60e2;
    unknown[3][8] = t220 / 0.60e2;
    unknown[3][9] = t223;
    unknown[3][10] = -t225;
    unknown[3][11] = -t227;
    unknown[4][0] = t85 / 0.60e2;
    unknown[4][1] = t153 / 0.60e2;
    unknown[4][2] = t182 / 0.60e2;
    unknown[4][3] = t206 / 0.60e2;
    unknown[4][4] = -t43 * t46 / 0.30e2 + t12 / 0.30e2 - t4 / 0.30e2 - t8 / 0.30e2;
    unknown[4][5] = t232 / 0.60e2;
    unknown[4][6] = t235 / 0.60e2;
    unknown[4][7] = t238 / 0.60e2;
    unknown[4][8] = t242 / 0.60e2;
    unknown[4][9] = -t244;
    unknown[4][10] = t247;
    unknown[4][11] = -t249;
    unknown[5][0] = t94 / 0.60e2;
    unknown[5][1] = t157 / 0.60e2;
    unknown[5][2] = t185 / 0.60e2;
    unknown[5][3] = t209 / 0.60e2;
    unknown[5][4] = t232 / 0.60e2;
    unknown[5][5] = -t88 * t91 / 0.30e2 + t12 / 0.30e2 - t4 / 0.30e2 - t8 / 0.30e2;
    unknown[5][6] = t254 / 0.60e2;
    unknown[5][7] = t257 / 0.60e2;
    unknown[5][8] = t260 / 0.60e2;
    unknown[5][9] = -t262;
    unknown[5][10] = -t264;
    unknown[5][11] = t267;
    unknown[6][0] = t99 / 0.60e2;
    unknown[6][1] = t160 / 0.60e2;
    unknown[6][2] = t188 / 0.60e2;
    unknown[6][3] = t212 / 0.60e2;
    unknown[6][4] = t235 / 0.60e2;
    unknown[6][5] = t254 / 0.60e2;
    unknown[6][6] = t11 * t97 / 0.30e2 + t12 / 0.30e2 - t4 / 0.30e2 - t8 / 0.30e2;
    unknown[6][7] = t272 / 0.60e2;
    unknown[6][8] = t275 / 0.60e2;
    unknown[6][9] = t278;
    unknown[6][10] = -t280;
    unknown[6][11] = -t282;
    unknown[7][0] = t108 / 0.60e2;
    unknown[7][1] = t163 / 0.60e2;
    unknown[7][2] = t191 / 0.60e2;
    unknown[7][3] = t216 / 0.60e2;
    unknown[7][4] = t238 / 0.60e2;
    unknown[7][5] = t257 / 0.60e2;
    unknown[7][6] = t272 / 0.60e2;
    unknown[7][7] = -t102 * t105 / 0.30e2 + t12 / 0.30e2 - t4 / 0.30e2 - t8 / 0.30e2;
    unknown[7][8] = t287 / 0.60e2;
    unknown[7][9] = -t289;
    unknown[7][10] = t292;
    unknown[7][11] = -t294;
    unknown[8][0] = t117 / 0.60e2;
    unknown[8][1] = t167 / 0.60e2;
    unknown[8][2] = t194 / 0.60e2;
    unknown[8][3] = t220 / 0.60e2;
    unknown[8][4] = t242 / 0.60e2;
    unknown[8][5] = t260 / 0.60e2;
    unknown[8][6] = t275 / 0.60e2;
    unknown[8][7] = t287 / 0.60e2;
    unknown[8][8] = -t111 * t114 / 0.30e2 + t12 / 0.30e2 - t4 / 0.30e2 - t8 / 0.30e2;
    unknown[8][9] = -t298;
    unknown[8][10] = -t300;
    unknown[8][11] = t303;
    unknown[9][0] = t128;
    unknown[9][1] = -t169;
    unknown[9][2] = -t196;
    unknown[9][3] = t223;
    unknown[9][4] = -t244;
    unknown[9][5] = -t262;
    unknown[9][6] = t278;
    unknown[9][7] = -t289;
    unknown[9][8] = -t298;
    unknown[9][9] = t304 / 0.3e1;
    unknown[9][10] = 0.0e0;
    unknown[9][11] = 0.0e0;
    unknown[10][0] = -t135;
    unknown[10][1] = t172;
    unknown[10][2] = -t198;
    unknown[10][3] = -t225;
    unknown[10][4] = t247;
    unknown[10][5] = -t264;
    unknown[10][6] = -t280;
    unknown[10][7] = t292;
    unknown[10][8] = -t300;
    unknown[10][9] = 0.0e0;
    unknown[10][10] = t304 / 0.3e1;
    unknown[10][11] = 0.0e0;
    unknown[11][0] = -t142;
    unknown[11][1] = -t174;
    unknown[11][2] = t201;
    unknown[11][3] = -t227;
    unknown[11][4] = -t249;
    unknown[11][5] = t267;
    unknown[11][6] = -t282;
    unknown[11][7] = -t294;
    unknown[11][8] = t303;
    unknown[11][9] = 0.0e0;
    unknown[11][10] = 0.0e0;
    unknown[11][11] = t304 / 0.3e1;

    value.hessian = Eigen::Map<Eigen::MatrixXd>(&unknown[0][0], NINPUTS, NINPUTS);
}
