#include "../include/FEMSolver.h"
#include <Eigen/CholmodSupport>

#include <Spectra/SymEigsShiftSolver.h>
#include <Spectra/MatOp/SparseSymShiftSolve.h>
#include <Spectra/SymEigsSolver.h>
#include <Spectra/MatOp/SparseSymMatProd.h>


template<int dim>
void FEMSolver<dim>::computeMassScaledForceVector(VectorXT& force)
{
    VectorXT force_current = force;
    force.setZero();
    if constexpr (dim == 2)
    {
        if (quadratic)
        {

            iterateQuadElementsSerial([&](const QuadEleNodes& x_deformed, 
                const QuadEleNodes& x_undeformed, const QuadEleIdx& indices, int tet_idx)
            {
                Matrix<T, dim * 6, dim * 6> element_mass_matrix;
                VectorXT Mij(144);
                VectorXT p(dim * 6);
                for (int i = 0; i < 6; i++)
                    for (int j = 0; j < 6; j++)
                        p << x_undeformed(i, j);
                
                Mij[0] = (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.2520e4 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.420e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.2520e4 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.60e2 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.60e2 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4;
                Mij[1] = 0;
                Mij[2] = (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.2520e4 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.2520e4 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.2520e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.360e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.840e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.360e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.840e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.2520e4;
                Mij[3] = 0;
                Mij[4] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.360e3 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.2520e4 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.2520e4 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.2520e4 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.360e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.840e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.840e3;
                Mij[5] = 0;
                Mij[6] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.90e2 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.90e2 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3;
                Mij[7] = 0;
                Mij[8] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.315e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3;
                Mij[9] = 0;
                Mij[10] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4;
                Mij[11] = 0;
                Mij[12] = 0;
                Mij[13] = (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.2520e4 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.420e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.2520e4 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.60e2 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.60e2 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4;
                Mij[14] = 0;
                Mij[15] = (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.2520e4 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.2520e4 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.2520e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.360e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.840e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.360e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.840e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.2520e4;
                Mij[16] = 0;
                Mij[17] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.360e3 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.2520e4 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.2520e4 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.2520e4 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.360e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.840e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.840e3;
                Mij[18] = 0;
                Mij[19] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.90e2 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.90e2 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3;
                Mij[20] = 0;
                Mij[21] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.315e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3;
                Mij[22] = 0;
                Mij[23] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4;
                Mij[24] = (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.2520e4 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.2520e4 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.2520e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.360e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.840e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.360e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.840e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.2520e4;
                Mij[25] = 0;
                Mij[26] = (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.840e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.420e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.840e3 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.60e2 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.84e2 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.84e2 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.105e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.60e2 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.84e2 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.84e2 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.105e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4;
                Mij[27] = 0;
                Mij[28] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.2520e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.360e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.840e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.360e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.840e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.840e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.840e3;
                Mij[29] = 0;
                Mij[30] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.315e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.315e3 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3;
                Mij[31] = 0;
                Mij[32] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.90e2 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.90e2 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3;
                Mij[33] = 0;
                Mij[34] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4;
                Mij[35] = 0;
                Mij[36] = 0;
                Mij[37] = (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.2520e4 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.2520e4 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.2520e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.360e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.840e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.360e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.840e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.2520e4;
                Mij[38] = 0;
                Mij[39] = (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.840e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.420e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.840e3 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.60e2 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.84e2 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.84e2 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.105e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.60e2 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.84e2 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.84e2 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.105e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4;
                Mij[40] = 0;
                Mij[41] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.2520e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.360e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.840e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.360e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.840e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.840e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.840e3;
                Mij[42] = 0;
                Mij[43] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.315e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.315e3 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3;
                Mij[44] = 0;
                Mij[45] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.90e2 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.90e2 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3;
                Mij[46] = 0;
                Mij[47] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4;
                Mij[48] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.360e3 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.2520e4 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.2520e4 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.2520e4 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.360e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.840e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.840e3;
                Mij[49] = 0;
                Mij[50] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.2520e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.360e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.840e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.360e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.840e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.840e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.840e3;
                Mij[51] = 0;
                Mij[52] = (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.84e2 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.840e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.84e2 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.84e2 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.84e2 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.840e3 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.60e2 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.60e2 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.105e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.105e3;
                Mij[53] = 0;
                Mij[54] = (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3;
                Mij[55] = 0;
                Mij[56] = (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3;
                Mij[57] = 0;
                Mij[58] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.90e2 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.90e2 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.420e3;
                Mij[59] = 0;
                Mij[60] = 0;
                Mij[61] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.360e3 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.2520e4 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.2520e4 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.2520e4 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.360e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.840e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.840e3;
                Mij[62] = 0;
                Mij[63] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.2520e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.2520e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.360e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.840e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.360e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.840e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.840e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.840e3;
                Mij[64] = 0;
                Mij[65] = (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.84e2 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.840e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.84e2 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.84e2 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.84e2 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.840e3 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.60e2 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.60e2 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.105e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.105e3;
                Mij[66] = 0;
                Mij[67] = (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3;
                Mij[68] = 0;
                Mij[69] = (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3;
                Mij[70] = 0;
                Mij[71] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.90e2 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.90e2 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.420e3;
                Mij[72] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.90e2 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.90e2 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3;
                Mij[73] = 0;
                Mij[74] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.315e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.315e3 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3;
                Mij[75] = 0;
                Mij[76] = (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3;
                Mij[77] = 0;
                Mij[78] = 0.4e1 / 0.105e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[5] - 8 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.70e2 + 0.4e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) - 0.4e1 / 0.105e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) - 0.4e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[4] - 8 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.70e2 + 0.4e1 / 0.45e2 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + 0.4e1 / 0.105e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) + 0.4e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[2] - 8 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[2] - 8 * p[10]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) - 0.4e1 / 0.45e2 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - 0.4e1 / 0.105e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[3] - 8 * p[11]) - 0.4e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (4 * p[1] + 4 * p[3] - 8 * p[11]) + 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (4 * p[1] + 4 * p[5] - 8 * p[9]) - 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[4] - 8 * p[8]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]);
                Mij[79] = 0;
                Mij[80] = 0.2e1 / 0.105e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[5] - 8 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 + 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) - 0.2e1 / 0.105e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) - 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[4] - 8 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) + 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[2] - 8 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[3] - 8 * p[11]) - 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.105e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.105e3;
                Mij[81] = 0;
                Mij[82] = 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[5] - 8 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 + 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) - 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) - 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[4] - 8 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + 0.2e1 / 0.105e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) + 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[2] - 8 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.105e3 - 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - 0.2e1 / 0.105e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[3] - 8 * p[11]) - 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.105e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3;
                Mij[83] = 0;
                Mij[84] = 0;
                Mij[85] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.90e2 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.90e2 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3;
                Mij[86] = 0;
                Mij[87] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.315e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.315e3 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3;
                Mij[88] = 0;
                Mij[89] = (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3;
                Mij[90] = 0;
                Mij[91] = 0.4e1 / 0.105e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[5] - 8 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.70e2 + 0.4e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) - 0.4e1 / 0.105e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) - 0.4e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[4] - 8 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.70e2 + 0.4e1 / 0.45e2 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + 0.4e1 / 0.105e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) + 0.4e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[2] - 8 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[2] - 8 * p[10]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) - 0.4e1 / 0.45e2 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - 0.4e1 / 0.105e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[3] - 8 * p[11]) - 0.4e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (4 * p[1] + 4 * p[3] - 8 * p[11]) + 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (4 * p[1] + 4 * p[5] - 8 * p[9]) - 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[4] - 8 * p[8]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]);
                Mij[92] = 0;
                Mij[93] = 0.2e1 / 0.105e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[5] - 8 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 + 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) - 0.2e1 / 0.105e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) - 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[4] - 8 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) + 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[2] - 8 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[3] - 8 * p[11]) - 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.105e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.105e3;
                Mij[94] = 0;
                Mij[95] = 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[5] - 8 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 + 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) - 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) - 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[4] - 8 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + 0.2e1 / 0.105e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) + 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[2] - 8 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.105e3 - 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - 0.2e1 / 0.105e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[3] - 8 * p[11]) - 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.105e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3;
                Mij[96] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.315e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3;
                Mij[97] = 0;
                Mij[98] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.90e2 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.90e2 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3;
                Mij[99] = 0;
                Mij[100] = (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3;
                Mij[101] = 0;
                Mij[102] = 0.2e1 / 0.105e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[5] - 8 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 + 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) - 0.2e1 / 0.105e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) - 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[4] - 8 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) + 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[2] - 8 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[3] - 8 * p[11]) - 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.105e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.105e3;
                Mij[103] = 0;
                Mij[104] = 0.4e1 / 0.105e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[5] - 8 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 + 0.4e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) - 0.4e1 / 0.105e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) - 0.4e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[4] - 8 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + 0.4e1 / 0.45e2 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) + 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[2] - 8 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.315e3 - 0.4e1 / 0.45e2 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[3] - 8 * p[11]) - 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.315e3 + 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (4 * p[1] + 4 * p[5] - 8 * p[9]) - 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[4] - 8 * p[8]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]);
                Mij[105] = 0;
                Mij[106] = 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[5] - 8 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.315e3 + 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) - 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) - 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[4] - 8 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.315e3 + 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) + 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[2] - 8 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[3] - 8 * p[11]) - 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3;
                Mij[107] = 0;
                Mij[108] = 0;
                Mij[109] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.315e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3;
                Mij[110] = 0;
                Mij[111] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.90e2 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.90e2 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.420e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3;
                Mij[112] = 0;
                Mij[113] = (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3;
                Mij[114] = 0;
                Mij[115] = 0.2e1 / 0.105e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[5] - 8 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 + 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) - 0.2e1 / 0.105e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) - 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[4] - 8 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) + 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[2] - 8 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[3] - 8 * p[11]) - 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.105e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.105e3;
                Mij[116] = 0;
                Mij[117] = 0.4e1 / 0.105e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[5] - 8 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 + 0.4e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) - 0.4e1 / 0.105e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) - 0.4e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[4] - 8 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + 0.4e1 / 0.45e2 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) + 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[2] - 8 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.315e3 - 0.4e1 / 0.45e2 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[3] - 8 * p[11]) - 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.315e3 + 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (4 * p[1] + 4 * p[5] - 8 * p[9]) - 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[4] - 8 * p[8]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]);
                Mij[118] = 0;
                Mij[119] = 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[5] - 8 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.315e3 + 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) - 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) - 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[4] - 8 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.315e3 + 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) + 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[2] - 8 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[3] - 8 * p[11]) - 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3;
                Mij[120] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4;
                Mij[121] = 0;
                Mij[122] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4;
                Mij[123] = 0;
                Mij[124] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.90e2 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.90e2 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.420e3;
                Mij[125] = 0;
                Mij[126] = 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[5] - 8 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 + 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) - 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) - 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[4] - 8 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + 0.2e1 / 0.105e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) + 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[2] - 8 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.105e3 - 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - 0.2e1 / 0.105e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[3] - 8 * p[11]) - 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.105e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3;
                Mij[127] = 0;
                Mij[128] = 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[5] - 8 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.315e3 + 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) - 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) - 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[4] - 8 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.315e3 + 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) + 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[2] - 8 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[3] - 8 * p[11]) - 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3;
                Mij[129] = 0;
                Mij[130] = 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[5] - 8 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 + 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) - 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) - 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[4] - 8 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + 0.4e1 / 0.45e2 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + 0.4e1 / 0.105e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) + 0.4e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[2] - 8 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[2] - 8 * p[10]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) - 0.4e1 / 0.45e2 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - 0.4e1 / 0.105e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[3] - 8 * p[11]) - 0.4e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (4 * p[1] + 4 * p[3] - 8 * p[11]) + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.315e3;
                Mij[131] = 0;
                Mij[132] = 0;
                Mij[133] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.315e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.420e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4;
                Mij[134] = 0;
                Mij[135] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.1260e4;
                Mij[136] = 0;
                Mij[137] = -(double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.630e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.1260e4 - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.630e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.630e3 + (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.1260e4 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.90e2 - (double) ((-3 * p[0] - p[2] + 4 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (-3 * p[1] - p[5] + 4 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.420e3 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.90e2 + (double) ((-3 * p[0] - p[4] + 4 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (-3 * p[1] - p[3] + 4 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.420e3;
                Mij[138] = 0;
                Mij[139] = 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[5] - 8 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 + 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) - 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) - 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[4] - 8 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + 0.2e1 / 0.105e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) + 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[2] - 8 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.105e3 - 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - 0.2e1 / 0.105e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[3] - 8 * p[11]) - 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.105e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3;
                Mij[140] = 0;
                Mij[141] = 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[5] - 8 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.315e3 + 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) - 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) - 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[4] - 8 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.315e3 + 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) + 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[2] - 8 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3 - 0.2e1 / 0.45e2 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[3] - 8 * p[11]) - 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.210e3;
                Mij[142] = 0;
                Mij[143] = 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[5] - 8 * p[9]) + (double) ((4 * p[0] + 4 * p[2] - 8 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.210e3 + 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) - 0.4e1 / 0.315e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) - 0.4e1 / 0.315e3 * (double) (4 * p[0] + 4 * p[4] - 8 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[3] - 8 * p[11])) / 0.210e3 + 0.4e1 / 0.45e2 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + 0.4e1 / 0.105e3 * (double) (-3 * p[0] - p[2] + 4 * p[10]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) + 0.4e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[2] - 8 * p[10]) * (double) (-3 * p[1] - p[5] + 4 * p[9]) + 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[2] - 8 * p[10]) * (double) (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11]) - 0.4e1 / 0.45e2 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - 0.4e1 / 0.105e3 * (double) (-3 * p[0] - p[4] + 4 * p[8]) * (double) (4 * p[1] + 4 * p[3] - 8 * p[11]) - 0.4e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (-3 * p[1] - p[3] + 4 * p[11]) - 0.2e1 / 0.105e3 * (double) (4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (double) (4 * p[1] + 4 * p[3] - 8 * p[11]) + (double) ((4 * p[0] + 4 * p[6] - 4 * p[8] - 4 * p[10]) * (4 * p[1] + 4 * p[5] - 8 * p[9])) / 0.315e3 - (double) ((4 * p[0] + 4 * p[4] - 8 * p[8]) * (4 * p[1] + 4 * p[7] - 4 * p[9] - 4 * p[11])) / 0.315e3;
                for (int i = 0; i < 12; i++)
                    for (int j = 0; j < 12; j++)
                        element_mass_matrix(i, j) = -Mij[i * 12 + j];
                Vector<T, 12> force_local;
                getSubVector<12>(force_current, indices, force_local);
                addForceEntry<12>(force, indices, element_mass_matrix * force_local);
            });


        }
        else
        {
            iterateElementsSerial([&](const EleNodes& x_deformed, 
                const EleNodes& x_undeformed, const EleIdx& indices, int tet_idx)
            {
                Matrix<T, dim * 3, dim * 3> element_mass_matrix;
                VectorXT m(36);
                VectorXT p(6);
                p << x_undeformed(0, 0), x_undeformed(0, 1), x_undeformed(1, 0), x_undeformed(1, 1),
                    x_undeformed(2, 0), x_undeformed(1, 2);
                T t1 = (p[1] - p[5]) * p[2] + (-p[1] + p[3]) * p[4] + p[0] * (-p[3] + p[5]);
                t1 = sqrt(pow(t1, 0.2e1));
                T t2 = t1 / 0.12e2;
                t1 = t1 / 0.24e2;
                m[0] = t2;
                m[1] = 0;
                m[2] = t1;
                m[3] = 0;
                m[4] = t1;
                m[5] = 0;
                m[6] = 0;
                m[7] = t2;
                m[8] = 0;
                m[9] = t1;
                m[10] = 0;
                m[11] = t1;
                m[12] = t1;
                m[13] = 0;
                m[14] = t2;
                m[15] = 0;
                m[16] = t1;
                m[17] = 0;
                m[18] = 0;
                m[19] = t1;
                m[20] = 0;
                m[21] = t2;
                m[22] = 0;
                m[23] = t1;
                m[24] = t1;
                m[25] = 0;
                m[26] = t1;
                m[27] = 0;
                m[28] = t2;
                m[29] = 0;
                m[30] = 0;
                m[31] = t1;
                m[32] = 0;
                m[33] = t1;
                m[34] = 0;
                m[35] = t2;
                for (int i = 0; i < 6; i++)
                    for (int j = 0; j < 6; j++)
                        element_mass_matrix(i, j) = m[i * 6 + j];
                Vector<T, 6> force_local;
                getSubVector<6>(force_current, indices, force_local);
                addForceEntry<6>(force, indices, element_mass_matrix * force_local);
            });

        }
    }
}

template<int dim>
T FEMSolver<dim>::computeTotalEnergy(const VectorXT& _u)
{
    T total_energy = 0.0;

    VectorXT projected = _u;
    if (!run_diff_test)
    {
        iterateDirichletDoF([&](int offset, T target)
        {
            projected[offset] = target;
        });
    }
    deformed = undeformed + projected;

    T e_NH = 0.0;
    addElastsicPotential(e_NH);
    total_energy += e_NH;

    total_energy -= _u.dot(f);


    return total_energy;
}


template <int dim>
T FEMSolver<dim>::computeResidual(const VectorXT& _u, VectorXT& residual)
{
    
    VectorXT projected = _u;

    if (!run_diff_test)
    {
        iterateDirichletDoF([&](int offset, T target)
        {
            projected[offset] = target;
        });
    }
    
    deformed = undeformed + projected;
    
    residual = f;
    
    VectorXT residual_backup = residual;

    addElasticForceEntries(residual);

    if (verbose)
    {
        std::cout << "elastic force " << (residual - residual_backup).norm() << std::endl;
        residual_backup = residual;
    }

    if (!run_diff_test)
        iterateDirichletDoF([&](int offset, T target)
        {
            residual[offset] = 0;
        });
        
    return residual.norm();
}

template <int dim>
void FEMSolver<dim>::reset()
{
    deformed = undeformed;
    u.setZero();
}

template <int dim>
void FEMSolver<dim>::checkHessianPD(bool save_txt)
{
    bool backup = project_block_PD;
    project_block_PD = false;
    int nmodes = 10;
    int n_dof_sim = deformed.rows();
    StiffnessMatrix d2edx2(n_dof_sim, n_dof_sim);
    buildSystemMatrix(u, d2edx2);
    project_block_PD = backup;
    bool use_Spectra = true;

    // Eigen::PardisoLLT<StiffnessMatrix, Eigen::Lower> solver;
    Eigen::CholmodSupernodalLLT<StiffnessMatrix, Eigen::Lower> solver;
    solver.analyzePattern(d2edx2); 
    // std::cout << "analyzePattern" << std::endl;
    solver.factorize(d2edx2);
    // std::cout << "factorize" << std::endl;
    bool indefinite = false;
    if (solver.info() == Eigen::NumericalIssue)
    {
        std::cout << "!!!indefinite matrix!!!" << std::endl;
        indefinite = true;
        
    }
    else
    {
        // std::cout << "indefinite" << std::endl;
    }
    
    if (use_Spectra)
    {
        
        Spectra::SparseSymShiftSolve<T, Eigen::Lower> op(d2edx2);
        // T shift = indefinite ? -1e2 : -1e-4;
        T shift = -1e-4;
        Spectra::SymEigsShiftSolver<T, 
        Spectra::LARGEST_MAGN, 
        Spectra::SparseSymShiftSolve<T, Eigen::Lower> > 
            eigs(&op, nmodes, 2 * nmodes, shift);

        eigs.init();

        int nconv = eigs.compute();

        if (eigs.info() == Spectra::SUCCESSFUL)
        {
            Eigen::MatrixXd eigen_vectors = eigs.eigenvectors().real();
            Eigen::VectorXd eigen_values = eigs.eigenvalues().real();
            std::cout << eigen_values.transpose() << std::endl;
            if (save_txt)
            {
                std::ofstream out("eigen_vectors.txt");
                out << eigen_vectors.rows() << " " << eigen_vectors.cols() << std::endl;
                for (int i = 0; i < eigen_vectors.cols(); i++)
                    out << eigen_values[eigen_vectors.cols() - 1 - i] << " ";
                out << std::endl;
                for (int i = 0; i < eigen_vectors.rows(); i++)
                {
                    // for (int j = 0; j < eigen_vectors.cols(); j++)
                    for (int j = eigen_vectors.cols() - 1; j >-1 ; j--)
                        out << eigen_vectors(i, j) << " ";
                    out << std::endl;
                }       
                out << std::endl;
                out.close();
            }
        }
        else
        {
            std::cout << "Eigen decomposition failed" << std::endl;
        }
    }
}

template<int dim>
void FEMSolver<dim>::buildSystemMatrix(const VectorXT& _u, StiffnessMatrix& K)
{
    VectorXT projected = _u;
    if (!run_diff_test)
    {
        iterateDirichletDoF([&](int offset, T target)
        {
            projected[offset] = target;
        });
    }
    deformed = undeformed + projected;
    
    std::vector<Entry> entries;

    addElasticHessianEntries(entries, project_block_PD);

    K.setFromTriplets(entries.begin(), entries.end());
    
    if (!run_diff_test)
        projectDirichletDoFMatrix(K, dirichlet_data);
    
    K.makeCompressed();

}

template<int dim>
void FEMSolver<dim>::projectDirichletDoFMatrix(StiffnessMatrix& A, const std::unordered_map<int, T>& data)
{
    for (auto iter : data)
    {
        A.row(iter.first) *= 0.0;
        A.col(iter.first) *= 0.0;
        A.coeffRef(iter.first, iter.first) = 1.0;
    }

}

template <int dim>
bool FEMSolver<dim>::linearSolve(StiffnessMatrix& K, 
    VectorXT& residual, VectorXT& du)
{
    // std::cout << "Linear Solver" << std::endl;
    Timer t(true);
    Eigen::CholmodSupernodalLLT<StiffnessMatrix, Eigen::Lower> solver;
    // Eigen::PardisoLLT<StiffnessMatrix, Eigen::Lower> solver;
    T alpha = 1e-6;
    StiffnessMatrix H(K.rows(), K.cols());
    H.setIdentity(); H.diagonal().array() = 1e-10;
    K += H;
    solver.analyzePattern(K);
    // T time_analyze = t.elapsed_sec();
    // std::cout << "\t analyzePattern takes " << time_analyze << "s" << std::endl;
    
    int indefinite_count_reg_cnt = 0, invalid_search_dir_cnt = 0, invalid_residual_cnt = 0;

    for (int i = 0; i < 50; i++)
    {
        solver.factorize(K);
        // std::cout << "factorize" << std::endl;
        if (solver.info() == Eigen::NumericalIssue)
        {
            K.diagonal().array() += alpha;
            alpha *= 10;
            indefinite_count_reg_cnt++;
            continue;
        }

        du = solver.solve(residual);
        
        T dot_dx_g = du.normalized().dot(residual.normalized());

        int num_negative_eigen_values = 0;
        int num_zero_eigen_value = 0;

        bool positive_definte = num_negative_eigen_values == 0;
        bool search_dir_correct_sign = dot_dx_g > 1e-6;
        if (!search_dir_correct_sign)
        {   
            invalid_search_dir_cnt++;
        }
        
        // bool solve_success = true;
        // bool solve_success = (K * du - residual).norm() / residual.norm() < 1e-6;
        bool solve_success = du.norm() < 1e3;
        
        if (!solve_success)
            invalid_residual_cnt++;
        // std::cout << "PD: " << positive_definte << " direction " 
        //     << search_dir_correct_sign << " solve " << solve_success << std::endl;

        if (positive_definte && search_dir_correct_sign && solve_success)
        {
            t.stop();
            if (verbose)
            {
                std::cout << "\t===== Linear Solve ===== " << std::endl;
                std::cout << "\tnnz: " << K.nonZeros() << std::endl;
                std::cout << "\t takes " << t.elapsed_sec() << "s" << std::endl;
                std::cout << "\t# regularization step " << i 
                    << " indefinite " << indefinite_count_reg_cnt 
                    << " invalid search dir " << invalid_search_dir_cnt
                    << " invalid solve " << invalid_residual_cnt << std::endl;
                std::cout << "\tdot(search, -gradient) " << dot_dx_g << std::endl;
                // std::cout << (K.selfadjointView<Eigen::Lower>() * du + UV * UV.transpose()*du - residual).norm() << std::endl;
                std::cout << "\t======================== " << std::endl;
            }
            return true;
        }
        else
        {
            K.diagonal().array() += alpha;
            alpha *= 10;
        }
    }
    return false;
}

template <int dim>
T FEMSolver<dim>::lineSearchNewton(VectorXT& _u, VectorXT& residual)
{
    VectorXT du = residual;
    du.setZero();

    StiffnessMatrix K(residual.rows(), residual.rows());
    Timer ti(true);
    buildSystemMatrix(_u, K);
    // std::cout << "\tbuild system takes " <<  ti.elapsed_sec() << std::endl;
    bool success = linearSolve(K, residual, du);
    
    if (!success)
        return 1e16;
    T norm = du.norm();
    if (verbose)
        std::cout << "\t|du| " <<  du.norm() << std::endl;
    
    T alpha = computeInversionFreeStepsize(_u, du);
    if (verbose)
    {
        std::cout << "\t** step size **" << std::endl;
        std::cout << "\tafter tet inv step size: " << alpha << std::endl;
    }
    
    if (verbose)
        std::cout << "\t**       **" << std::endl;

    T E0 = computeTotalEnergy(_u);
    int cnt = 0;
    while (true)
    {
        VectorXT u_ls = _u + alpha * du;
        T E1 = computeTotalEnergy(u_ls);
        if (E1 - E0 < 0 || cnt > 10)
        {
            // if (cnt > 15)
            //     std::cout << "cnt > 15" << std::endl;
            _u = u_ls;
            break;
        }
        alpha *= 0.5;
        cnt += 1;
    }
    if (verbose)
        std::cout << "#ls " << cnt << " alpha = " << alpha << std::endl;
    return norm;
}


template <int dim>
bool FEMSolver<dim>::staticSolveStep(int step)
{
    
    if (step == 0)
    {
        iterateDirichletDoF([&](int offset, T target)
        {
            f[offset] = 0;
        });
    }

    VectorXT residual(deformed.rows());
    residual.setZero();

    T residual_norm = computeResidual(u, residual);
    
    std::cout << "[NEWTON] iter " << step << "/" << max_newton_iter << ": residual_norm " << residual_norm << " tol: " << newton_tol << std::endl;

    if (residual_norm < newton_tol)
    {
        return true;
    }
    

    T dq_norm = lineSearchNewton(u, residual);
    

    if(step == max_newton_iter || dq_norm > 1e10 || dq_norm < 1e-12)
    {
        
        return true;
    }
    
    return false;

}

template <int dim>
bool FEMSolver<dim>::staticSolve()
{
    int cnt = 0;
    T residual_norm = 1e10, du_norm = 1e10;

    iterateDirichletDoF([&](int offset, T target)
    {
        f[offset] = 0;
    });
    
    while (true)
    {
        
        VectorXT residual(deformed.rows());
        residual.setZero();

        residual_norm = computeResidual(u, residual);
        
        if (verbose)
            std::cout << "iter " << cnt << "/" << max_newton_iter 
            << ": residual_norm " << residual.norm() << " tol: " << newton_tol << std::endl;
        
        if (residual_norm < newton_tol)
            break;
        
        du_norm = lineSearchNewton(u, residual);

        if(cnt == max_newton_iter || du_norm > 1e10 || du_norm < 1e-12)
            break;
        cnt++;
    }

    iterateDirichletDoF([&](int offset, T target)
    {
        u[offset] = target;
    });
    deformed = undeformed + u;
    
    std::cout << "# of newton solve: " << cnt << " exited with |g|: " 
        << residual_norm << "|ddu|: " << du_norm  << std::endl;
    // std::cout << u.norm() << std::endl;
    
    if (cnt == max_newton_iter || du_norm > 1e10 || residual_norm > 1)
        return false;
    return true;
    
}

template class FEMSolver<2>;
template class FEMSolver<3>;