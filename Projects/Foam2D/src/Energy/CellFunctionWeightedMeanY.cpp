#include "../../include/Energy/CellFunctionWeightedMeanY.h"
#include <iostream>

void
CellFunctionWeightedMeanY::addValue(const VectorXT &site, const VectorXT &nodes, const VectorXi &next,
                                    const VectorXi &btype, double &value,
                                    const CellInfo *cellInfo) const {
    int n_nodes = nodes.rows() / nx;

    double x0, y0, q0, x1, y1, q1;
    int x0i, y0i, q0i, x1i, y1i, q1i;
    for (int i = 0; i < n_nodes; i++) {
        x0i = i * nx + 0;
        y0i = i * nx + 1;
        q0i = i * nx + 2;
        x1i = next(i) * nx + 0;
        y1i = next(i) * nx + 1;
        q1i = next(i) * nx + 2;

        x0 = nodes(x0i);
        y0 = nodes(y0i);
        q0 = nodes(q0i);
        x1 = nodes(x1i);
        y1 = nodes(y1i);
        q1 = nodes(q1i);

        bool bad = true;

        value += (x0 * y1 - x1 * y0) * (y0 + y1) / 6.0;

        // @formatter:off
        if (btype(i) == 1) {
            value += (y0 / 0.2e1 + y1 / 0.2e1 -
                      q0 * sqrt(0.4e1 - (pow(x1 - x0, 0.2e1) + pow(y1 - y0, 0.2e1)) * pow(q0, -0.2e1)) * (x0 - x1) *
                      pow(pow(x0 - x1, 0.2e1) + pow(y1 - y0, 0.2e1), -0.1e1 / 0.2e1) / 0.2e1) * q0 * q0 *
                     (0.2e1 * asin(sqrt(pow(x1 - x0, 0.2e1) + pow(y1 - y0, 0.2e1)) / q0 / 0.2e1) -
                      sin(0.2e1 * asin(sqrt(pow(x1 - x0, 0.2e1) + pow(y1 - y0, 0.2e1)) / q0 / 0.2e1))) / 0.2e1 +
                     pow(pow(x1 - x0, 0.2e1) + pow(y1 - y0, 0.2e1), 0.3e1 / 0.2e1) * (x0 - x1) *
                     pow(pow(x0 - x1, 0.2e1) + pow(y1 - y0, 0.2e1), -0.1e1 / 0.2e1) / 0.12e2;
        } else if (btype(i) == 2 && !bad) {
            value -= ((-(x0 - x1) * (x0 - x1 + y0 - y1) * (x0 - x1 - y0 + y1) * pow(cos(q1), 0.2e1) + sin(q1) * ((y0 + 0.4e1 * y1) * x0 * x0 - 0.2e1 * x1 * (y0 + 0.4e1 * y1) * x0 + (y0 + 0.4e1 * y1) * x1 * x1 + 0.3e1 * pow(y0 - y1, 0.2e1) * (y0 + 0.2e1 / 0.3e1 * y1)) * cos(q1) + (x0 - x1) * (x0 * x0 - 0.2e1 * x0 * x1 + x1 * x1 - 0.3e1 * y0 * y0 + y0 * y1 + 0.2e1 * y1 * y1)) * pow(cos(q0), 0.2e1) - 0.2e1 * sin(q0) * (((0.2e1 * y0 + y1 / 0.2e1) * x0 * x0 - 0.4e1 * x1 * (y0 + y1 / 0.4e1) * x0 + (0.2e1 * y0 + y1 / 0.2e1) * x1 * x1 + pow(y0 - y1, 0.2e1) * (y0 + 0.3e1 / 0.2e1 * y1)) * pow(cos(q1), 0.2e1) + sin(q1) * pow(y0 - y1, 0.2e1) * (x0 - x1) * cos(q1) - 0.2e1 * (y0 + y1 / 0.4e1) * pow(x0 - x1, 0.2e1)) * cos(q0) - (x0 - x1) * ((-x0 * x0 + 0.2e1 * x0 * x1 - x1 * x1 - 0.2e1 * y0 * y0 - y0 * y1 + 0.3e1 * y1 * y1) * pow(cos(q1), 0.2e1) + sin(q1) * (y0 + 0.4e1 * y1) * (x0 - x1) * cos(q1) + pow(x0 - x1, 0.2e1))) / ((0.30e2 * pow(cos(q1), 0.2e1) - 0.15e2) * pow(cos(q0), 0.2e1) + 0.30e2 * cos(q1) * cos(q0) * sin(q0) * sin(q1) - 0.15e2 * pow(cos(q1), 0.2e1));
        } else if (btype(i) == 2 && bad) {
            value += ((-(x0 - x1) * (x0 - x1 + y0 - y1) * (x0 - x1 - y0 + y1) * pow(cos(q1), 0.2e1) + sin(q1) * ((y0 + 0.4e1 * y1) * x0 * x0 - 0.2e1 * x1 * (y0 + 0.4e1 * y1) * x0 + (y0 + 0.4e1 * y1) * x1 * x1 + 0.3e1 * pow(y0 - y1, 0.2e1) * (y0 + 0.2e1 / 0.3e1 * y1)) * cos(q1) + (x0 - x1) * (x0 * x0 - 0.2e1 * x0 * x1 + x1 * x1 - 0.3e1 * y0 * y0 + y0 * y1 + 0.2e1 * y1 * y1)) * pow(cos(q0), 0.2e1) - 0.2e1 * sin(q0) * (((0.2e1 * y0 + y1 / 0.2e1) * x0 * x0 - 0.4e1 * x1 * (y0 + y1 / 0.4e1) * x0 + (0.2e1 * y0 + y1 / 0.2e1) * x1 * x1 + pow(y0 - y1, 0.2e1) * (y0 + 0.3e1 / 0.2e1 * y1)) * pow(cos(q1), 0.2e1) + sin(q1) * pow(y0 - y1, 0.2e1) * (x0 - x1) * cos(q1) - 0.2e1 * (y0 + y1 / 0.4e1) * pow(x0 - x1, 0.2e1)) * cos(q0) - (x0 - x1) * ((-x0 * x0 + 0.2e1 * x0 * x1 - x1 * x1 - 0.2e1 * y0 * y0 - y0 * y1 + 0.3e1 * y1 * y1) * pow(cos(q1), 0.2e1) + sin(q1) * (y0 + 0.4e1 * y1) * (x0 - x1) * cos(q1) + pow(x0 - x1, 0.2e1))) / ((0.30e2 * pow(cos(q1), 0.2e1) - 0.15e2) * pow(cos(q0), 0.2e1) + 0.30e2 * cos(q1) * cos(q0) * sin(q0) * sin(q1) - 0.15e2 * pow(cos(q1), 0.2e1));
        }
        // @formatter:on
    }
}

void CellFunctionWeightedMeanY::addGradient(const VectorXT &site, const VectorXT &nodes, const VectorXi &next,
                                            const VectorXi &btype,
                                            VectorXT &gradient_c,
                                            VectorXT &gradient_x, const CellInfo *cellInfo) const {
    int n_nodes = nodes.rows() / nx;

    double x0, y0, q0, x1, y1, q1;
    int x0i, y0i, q0i, x1i, y1i, q1i;
    double t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20,
            t21, t22, t23;
    for (int i = 0; i < n_nodes; i++) {
        x0i = i * nx + 0;
        y0i = i * nx + 1;
        q0i = i * nx + 2;
        x1i = next(i) * nx + 0;
        y1i = next(i) * nx + 1;
        q1i = next(i) * nx + 2;

        x0 = nodes(x0i);
        y0 = nodes(y0i);
        q0 = nodes(q0i);
        x1 = nodes(x1i);
        y1 = nodes(y1i);
        q1 = nodes(q1i);

        bool bad = true;

        t1 = y0 + y1;
        t2 = 0.1e1 / 0.6e1;
        gradient_x(x0i) += t2 * y1 * t1;
        gradient_x(y0i) += -t2 * (-x0 * y1 + (y0 + t1) * x1);
        gradient_x(x1i) += -t2 * y0 * t1;
        gradient_x(y1i) += t2 * ((y1 + t1) * x0 - x1 * y0);

        // @formatter:off
        if (btype(i) == 1) {
            t1 = x0 - x1;
            t2 = -y1 + y0;
            t3 = pow(t1, 0.2e1);
            t4 = pow(t2, 0.2e1) + t3;
            t5 = 0.1e1 / q0;
            t6 = pow(t5, 0.2e1);
            t7 = t4 * t6;
            t8 = 0.4e1 - t7;
            t9 = pow(t8, -0.1e1 / 0.2e1);
            t10 = pow(t4, -0.3e1 / 0.2e1);
            t11 = t4 * t10;
            t8 = t8 * t9;
            t12 = -t10 * t3 + t11;
            t13 = t5 * t9;
            t14 = pow(t4, -0.1e1 / 0.2e1);
            t15 = t4 * t14;
            t16 = 0.1e1 / 0.2e1;
            t5 = 0.2e1 * asin(t16 * t15 * t5);
            t17 = t5 - sin(t5);
            t18 = t8 * q0;
            t19 = -t18 * t1 * t11 + y0 + y1;
            t5 = cos(t5) - 0.1e1;
            t20 = t13 * t14;
            t4 = pow(t4, 0.2e1) * t14;
            t14 = q0 * q0;
            t21 = 0.1e1 / 0.4e1;
            t22 = t16 * t19 * t14;
            t3 = t4 * t12 / 0.12e2 - t21 * (-t15 * t3 * t11 + (t12 * t8 * q0 - t13 * t3 * t11) * t14 * t17) -
                 t22 * t20 * t1 * t5;
            t12 = t1 * t2;
            t13 = t12 * (t18 * t10 + t13 * t11);
            t18 = t12 * t15 * t11;
            t4 = t4 * t12 * t10 / 0.12e2;
            t2 = t22 * t20 * t2 * t5;
            gradient_x(x0i) += t3;
            gradient_x(y0i) += t21 * ((0.1e1 + t13) * t14 * t17 + t18) - t4 - t2;
            gradient_x(x1i) += -t3;
            gradient_x(y1i) += t21 * (-t18 + (0.1e1 - t13) * t14 * t17) + t2 + t4;
            gradient_x(q0i) +=
                    t16 * t19 * q0 * (q0 * t15 * t5 * t6 * t9 + t17) - t21 * t1 * t11 * (t7 * t9 + t8) * t14 * t17;
        } else if (btype(i) == 2 && !bad) {
            t1 = x0 - x1 + y0 - y1;
            t2 = x0 - x1 - y0 + y1;
            t4 = cos(q1);
            t5 = t4 * t4;
            t6 = t5 * t2 * t1;
            t7 = x0 - x1;
            t9 = t5 * t2 * t7;
            t10 = t1 * t7;
            t11 = t5 * t10;
            t12 = sin(q1);
            t14 = y0 + 0.4e1 * y1;
            t16 = t14 * x1;
            t17 = x0 * t14 - t16;
            t20 = x0 * x0;
            t21 = x0 * x1;
            t22 = 0.2e1 * t21;
            t23 = x1 * x1;
            double t24 = y0 * y0;
            double t25 = 0.3e1 * t24;
            double t26 = y0 * y1;
            double t27 = y1 * y1;
            double t28 = 0.2e1 * t27;
            double t30 = 0.2e1 * t4 * t17 * t12 + 0.2e1 * t7 * t7 - t11 + t20 - t22 + t23 - t25 + t26 + t28 - t6 - t9;
            double t31 = cos(q0);
            double t32 = t31 * t31;
            double t34 = sin(q0);
            double t37 = 0.2e1 * y0 + y1 / 0.2e1;
            double t41 = y0 + y1 / 0.4e1;
            double t42 = t41 * x1;
            double t46 = y0 - y1;
            double t47 = t46 * t46;
            double t48 = t47 * t12;
            double t49 = t4 * t48;
            double t51 = 0.4e1 * t7 * t41;
            double t58 = -t20 + t22 - t23 - 0.2e1 * t24 - t26 + 0.3e1 * t27;
            double t59 = t5 * t58;
            double t60 = t14 * t12;
            double t61 = t4 * t7;
            double t62 = t61 * t60;
            double t63 = t7 * t7;
            double t65 = t4 * t60;
            double t66 = 0.2e1 * x0;
            double t67 = 0.2e1 * x1;
            double t72 = 0.30e2 * t5 - 0.15e2;
            double t79 = 0.30e2 * t12 * t34 * t31 * t4 + t32 * t72 - 0.15e2 * t5;
            double t80 = 0.1e1 / t79;
            double t83 = y0 + 0.2e1 / 0.3e1 * y1;
            double t85 = 0.6e1 * t83 * t46;
            double t99 = y0 + 0.3e1 / 0.2e1 * y1;
            double t101 = 0.2e1 * t99 * t46;
            double t106 = 0.2e1 * t61 * t46 * t12;
            double t116 = t4 * t7 * t12;
            double t129 = t20 * t14 + t23 * t14 - 0.2e1 * x0 * t16 + 0.3e1 * t83 * t47;
            double t134 = -t5 * t2 * t10 + t4 * t129 * t12 + (t20 - t22 + t23 - t25 + t26 + t28) * t7;
            double t142 = t20 * t37 + t23 * t37 - 0.4e1 * x0 * t42 + t99 * t47;
            double t147 = t5 * t142 - 0.2e1 * t63 * t41 + t61 * t48;
            double t149 = t34 * t34;
            double t160 = t79 * t79;
            double t162 = 0.1e1 / t160 * (t32 * t134 - 0.2e1 * t31 * t147 * t34 - (t59 + t62 + t63) * t7);
            double t170 = t12 * t32 * t4;
            double t178 = -0.2e1 * t4 * t17 * t12 - 0.2e1 * t7 * t7 + t11 - t20 + t22 - t23 + t25 - t26 - t28 + t6 + t9;
            double t228 = t12 * t12;
            gradient_x(x0i) -= t80 * (t32 * t30 - 0.2e1 * t31 * (t5 * (0.2e1 * x0 * t37 - 0.4e1 * t42) + t49 - t51) * t34 - t59 - t62 - t63 - (-0.2e1 * t5 * t7 + t65 + t66 - t67) * t7);
            gradient_x(y0i) -= t80 * (t32 * (-t9 + t11 + t4 * (t20 - t22 + t23 + t85 + 0.3e1 * t47) * t12 + (-0.6e1 * y0 + y1) * t7) - 0.2e1 * t31 * (t5 * (0.2e1 * t20 - 0.4e1 * t21 + 0.2e1 * t23 + t101 + t47) + t106 - 0.2e1 * t63) * t34 - (t5 * (-0.4e1 * y0 - y1) + t116) * t7);
            gradient_x(q0i) -= 0.2e1 * t80 * (-t34 * t31 * t134 + t147 * t149 - t147 * t32) - (-0.30e2 * t12 * t149 * t4 - 0.2e1 * t34 * t31 * t72 + 0.30e2 * t170) * t162;
            gradient_x(x1i) -= t80 * (t32 * t178 - 0.2e1 * t31 * (t5 * (0.2e1 * x1 * t37 - 0.4e1 * x0 * t41) - t49 + t51) * t34 + t59 + t62 + t63 - (0.2e1 * t5 * t7 - t65 - t66 + t67) * t7);
            gradient_x(y1i) -= t80 * (t32 * (t9 - t11 + t4 * (0.4e1 * t20 - 0.8e1 * t21 + 0.4e1 * t23 - t85 + 0.2e1 * t47) * t12 + t14 * t7) - 0.2e1 * t31 * (t5 * (t20 / 0.2e1 - t21 + t23 / 0.2e1 - t101 + 0.3e1 / 0.2e1 * t47) - t106 - t63 / 0.2e1) * t34 - (t5 * (-y0 + 0.6e1 * y1) + 0.4e1 * t116) * t7);
            gradient_x(q1i) -= t80 * (t32 * (0.2e1 * t12 * t4 * t2 * t10 - t129 * t228 + t129 * t5) - 0.2e1 * t31 * (-0.2e1 * t12 * t4 * t142 - t7 * t47 * t228 + t7 * t47 * t5) * t34 - (-0.2e1 * t12 * t4 * t58 - t7 * t14 * t228 + t7 * t14 * t5) * t7) - (-0.30e2 * t34 * t31 * t228 + 0.30e2 * t34 * t31 * t5 + 0.30e2 * t12 * t4 - 0.60e2 * t170) * t162;
        } else if (btype(i) == 2 && bad) {
            t1 = x0 - x1 + y0 - y1;
            t2 = x0 - x1 - y0 + y1;
            t4 = cos(q1);
            t5 = t4 * t4;
            t6 = t5 * t2 * t1;
            t7 = x0 - x1;
            t9 = t5 * t2 * t7;
            t10 = t1 * t7;
            t11 = t5 * t10;
            t12 = sin(q1);
            t14 = y0 + 0.4e1 * y1;
            t16 = t14 * x1;
            t17 = x0 * t14 - t16;
            t20 = x0 * x0;
            t21 = x0 * x1;
            t22 = 0.2e1 * t21;
            t23 = x1 * x1;
            double t24 = y0 * y0;
            double t25 = 0.3e1 * t24;
            double t26 = y0 * y1;
            double t27 = y1 * y1;
            double t28 = 0.2e1 * t27;
            double t30 = 0.2e1 * t4 * t17 * t12 + 0.2e1 * t7 * t7 - t11 + t20 - t22 + t23 - t25 + t26 + t28 - t6 - t9;
            double t31 = cos(q0);
            double t32 = t31 * t31;
            double t34 = sin(q0);
            double t37 = 0.2e1 * y0 + y1 / 0.2e1;
            double t41 = y0 + y1 / 0.4e1;
            double t42 = t41 * x1;
            double t46 = y0 - y1;
            double t47 = t46 * t46;
            double t48 = t47 * t12;
            double t49 = t4 * t48;
            double t51 = 0.4e1 * t7 * t41;
            double t58 = -t20 + t22 - t23 - 0.2e1 * t24 - t26 + 0.3e1 * t27;
            double t59 = t5 * t58;
            double t60 = t14 * t12;
            double t61 = t4 * t7;
            double t62 = t61 * t60;
            double t63 = t7 * t7;
            double t65 = t4 * t60;
            double t66 = 0.2e1 * x0;
            double t67 = 0.2e1 * x1;
            double t72 = 0.30e2 * t5 - 0.15e2;
            double t79 = 0.30e2 * t12 * t34 * t31 * t4 + t32 * t72 - 0.15e2 * t5;
            double t80 = 0.1e1 / t79;
            double t83 = y0 + 0.2e1 / 0.3e1 * y1;
            double t85 = 0.6e1 * t83 * t46;
            double t99 = y0 + 0.3e1 / 0.2e1 * y1;
            double t101 = 0.2e1 * t99 * t46;
            double t106 = 0.2e1 * t61 * t46 * t12;
            double t116 = t4 * t7 * t12;
            double t129 = t20 * t14 + t23 * t14 - 0.2e1 * x0 * t16 + 0.3e1 * t83 * t47;
            double t134 = -t5 * t2 * t10 + t4 * t129 * t12 + (t20 - t22 + t23 - t25 + t26 + t28) * t7;
            double t142 = t20 * t37 + t23 * t37 - 0.4e1 * x0 * t42 + t99 * t47;
            double t147 = t5 * t142 - 0.2e1 * t63 * t41 + t61 * t48;
            double t149 = t34 * t34;
            double t160 = t79 * t79;
            double t162 = 0.1e1 / t160 * (t32 * t134 - 0.2e1 * t31 * t147 * t34 - (t59 + t62 + t63) * t7);
            double t170 = t12 * t32 * t4;
            double t178 = -0.2e1 * t4 * t17 * t12 - 0.2e1 * t7 * t7 + t11 - t20 + t22 - t23 + t25 - t26 - t28 + t6 + t9;
            double t228 = t12 * t12;
            gradient_x(x0i) += t80 * (t32 * t30 - 0.2e1 * t31 * (t5 * (0.2e1 * x0 * t37 - 0.4e1 * t42) + t49 - t51) * t34 - t59 - t62 - t63 - (-0.2e1 * t5 * t7 + t65 + t66 - t67) * t7);
            gradient_x(y0i) += t80 * (t32 * (-t9 + t11 + t4 * (t20 - t22 + t23 + t85 + 0.3e1 * t47) * t12 + (-0.6e1 * y0 + y1) * t7) - 0.2e1 * t31 * (t5 * (0.2e1 * t20 - 0.4e1 * t21 + 0.2e1 * t23 + t101 + t47) + t106 - 0.2e1 * t63) * t34 - (t5 * (-0.4e1 * y0 - y1) + t116) * t7);
            gradient_x(q0i) += 0.2e1 * t80 * (-t34 * t31 * t134 + t147 * t149 - t147 * t32) - (-0.30e2 * t12 * t149 * t4 - 0.2e1 * t34 * t31 * t72 + 0.30e2 * t170) * t162;
            gradient_x(x1i) += t80 * (t32 * t178 - 0.2e1 * t31 * (t5 * (0.2e1 * x1 * t37 - 0.4e1 * x0 * t41) - t49 + t51) * t34 + t59 + t62 + t63 - (0.2e1 * t5 * t7 - t65 - t66 + t67) * t7);
            gradient_x(y1i) += t80 * (t32 * (t9 - t11 + t4 * (0.4e1 * t20 - 0.8e1 * t21 + 0.4e1 * t23 - t85 + 0.2e1 * t47) * t12 + t14 * t7) - 0.2e1 * t31 * (t5 * (t20 / 0.2e1 - t21 + t23 / 0.2e1 - t101 + 0.3e1 / 0.2e1 * t47) - t106 - t63 / 0.2e1) * t34 - (t5 * (-y0 + 0.6e1 * y1) + 0.4e1 * t116) * t7);
            gradient_x(q1i) += t80 * (t32 * (0.2e1 * t12 * t4 * t2 * t10 - t129 * t228 + t129 * t5) - 0.2e1 * t31 * (-0.2e1 * t12 * t4 * t142 - t7 * t47 * t228 + t7 * t47 * t5) * t34 - (-0.2e1 * t12 * t4 * t58 - t7 * t14 * t228 + t7 * t14 * t5) * t7) - (-0.30e2 * t34 * t31 * t228 + 0.30e2 * t34 * t31 * t5 + 0.30e2 * t12 * t4 - 0.60e2 * t170) * t162;
        }
        // @formatter:on
    }
}

void
CellFunctionWeightedMeanY::addHessian(const VectorXT &site, const VectorXT &nodes, const VectorXi &next,
                                      const VectorXi &btype,
                                      MatrixXT &hessian,
                                      const CellInfo *cellInfo) const {
    int n_nodes = nodes.rows() / nx;

    Eigen::Ref<MatrixXT> hess_xx = hessian.bottomRightCorner(nodes.rows(), nodes.rows());

    double x0, y0, q0, x1, y1, q1;
    int x0i, y0i, q0i, x1i, y1i, q1i;
    double t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20,
            t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40,
            t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60,
            t61, t62, t63, t64, t65, t66, t67, t68, t69, t70, t71, t72, t73, t74;
    for (int i = 0; i < n_nodes; i++) {
        x0i = i * nx + 0;
        y0i = i * nx + 1;
        q0i = i * nx + 2;
        x1i = next(i) * nx + 0;
        y1i = next(i) * nx + 1;
        q1i = next(i) * nx + 2;

        x0 = nodes(x0i);
        y0 = nodes(y0i);
        q0 = nodes(q0i);
        x1 = nodes(x1i);
        y1 = nodes(y1i);
        q1 = nodes(q1i);

        bool bad = true;

        t1 = y0 / 0.6e1;
        t2 = y1 / 0.3e1 + t1;
        t3 = y1 / 0.6e1;
        t4 = -y0 / 0.3e1 - t3;
        t5 = -x1 / 0.6e1 + x0 / 0.6e1;
        hess_xx(x0i, x0i) += 0;
        hess_xx(x0i, y0i) += t3;
        hess_xx(x0i, x1i) += 0;
        hess_xx(x0i, y1i) += t2;
        hess_xx(y0i, x0i) += t3;
        hess_xx(y0i, y0i) += -x1 / 0.3e1;
        hess_xx(y0i, x1i) += t4;
        hess_xx(y0i, y1i) += t5;
        hess_xx(x1i, x0i) += 0;
        hess_xx(x1i, y0i) += t4;
        hess_xx(x1i, x1i) += 0;
        hess_xx(x1i, y1i) += -t1;
        hess_xx(y1i, x0i) += t2;
        hess_xx(y1i, y0i) += t5;
        hess_xx(y1i, x1i) += -t1;
        hess_xx(y1i, y1i) += x0 / 0.3e1;

        // @formatter:off
        if (btype(i) == 1) {
            t1 = x0 - x1;
            t2 = -y1 + y0;
            t3 = pow(t2, 0.2e1);
            t4 = pow(t1, 0.2e1);
            t5 = t1 * t4;
            t6 = t4 + t3;
            t7 = 0.1e1 / q0;
            t8 = pow(t7, 0.2e1);
            t9 = pow(t8, 0.2e1);
            t10 = t7 * t8;
            t11 = t6 * t8;
            t12 = -t11 + 0.4e1;
            t13 = pow(t12, -0.3e1 / 0.2e1);
            t14 = pow(t6, -0.5e1 / 0.2e1);
            t15 = pow(t6, 0.2e1) * t14;
            t16 = t12 * t13;
            t17 = t6 * t14;
            t18 = pow(t12, 0.2e1) * t13;
            t19 = t8 * t13;
            t20 = t19 * t4;
            t21 = q0 * t18;
            t22 = t21 * t17;
            t23 = t7 * t15;
            t24 = t23 * (t20 + t16) + t22;
            t25 = t4 * t17;
            t26 = 0.1e1 / 0.2e1;
            t27 = 0.3e1 / 0.2e1 * t21;
            t28 = t1 * t24 * t26 + t1 * ((-t25 + t15) * t7 * t16 + t22) - t27 * t5 * t14;
            t29 = pow(t6, -0.3e1 / 0.2e1);
            t30 = pow(t6, 0.2e1);
            t31 = t30 * t29;
            t32 = 0.2e1;
            t33 = t32 * asin(t26 * t31 * t7);
            t34 = sin(t33);
            t35 = t33 - t34;
            t36 = t25 - t15;
            t37 = t23 * t16;
            t38 = t21 * t36 + t37 * t4;
            t39 = t6 * t29;
            t33 = cos(t33);
            t40 = t33 - 0.1e1;
            t41 = t39 * t7;
            t42 = t41 * t1 * t16 * t40;
            t21 = t21 * t1 * t15 - y0 - y1;
            t43 = t33 - 0.1e1;
            t33 = -t33 + 0.1e1;
            t44 = t39 * t33;
            t12 = 0.1e1 / t12;
            t45 = 0.1e1 / t6;
            t45 = 0.4e1 * t45 * t8;
            t20 = t32 * t7 * (t16 * (t43 * t29 * t4 + t44) + t44 * t20) + t45 * t4 * t12 * t34;
            t30 = t6 * t30 * t29;
            t46 = (-t39 * t4 - t31) * t15;
            t47 = t14 * t30;
            t48 = t47 * t4;
            t49 = q0 * q0;
            t50 = t1 * (-t48 + t46);
            t51 = t21 * t49;
            t52 = t31 * t1;
            t53 = t52 * t36;
            t54 = 0.1e1 / 0.4e1;
            t55 = t30 * t17;
            t56 = t55 * t1;
            t57 = t38 * t49 * t42;
            t14 = t16 * t17 * t7 + t27 * t14;
            t27 = t4 * t2;
            t24 = t2 * t24 * t26 - t27 * t14;
            t41 = t41 * t2 * t16 * t40;
            t37 = t1 * (t37 + t22);
            t58 = t37 * t2;
            t59 = 0.1e1 + t58;
            t60 = t39 * t43;
            t61 = t60 * t19;
            t62 = -t32 * t7 * t2 * t1 * (t29 * t16 * t33 + t61) + t45 * t1 * t12 * t2 * t34;
            t46 = t2 * (t48 - t46);
            t48 = t38 * t41;
            t63 = t42 * t59;
            t27 = t27 * t31 * t17;
            t55 = t55 * t2 / 0.12e2;
            t64 = -t26 * (t49 * (-t24 * t35 + t48 + t63) + t27) + t54 * (-t51 * t62 + t46) - t55;
            t5 = t26 *
                 (t57 * t32 + t31 * t5 * t17 + (t14 * t5 - t26 * (t10 * t13 * t5 * t15 + 0.3e1 * t37)) * t49 * t35) +
                 t54 * (-0.3e1 * t52 * t15 - t5 * (t15 * t39 + t47) + t51 * t20 + t56);
            t37 = 0.1e1 - t58;
            t58 = t42 * t37;
            t65 = t26 * (t49 * (-t24 * t35 + t48 - t58) + t27) - t54 * (-t51 * t62 + t46) + t55;
            t11 = t11 * t16;
            t66 = t1 * t15;
            t67 = 0.4e1 * t10;
            t44 = -t32 * t8 * t1 * (t19 * t33 * t31 + t44 * t16) - t67 * t1 * t12 * t34;
            t68 = q0 * t31 * t8 * t16 * t40;
            t69 = t68 + t35;
            t70 = t66 * (t11 + t18) * q0;
            t4 = (-t18 * t36 + t16 * (t15 * (t4 + t6) - t25 * t6) * t8 + t9 * t13 * t4 * t15 * t6) * t35;
            t25 = t21 * q0;
            t36 = t25 * t42;
            t38 = t26 * q0 * (t38 * t69 + t70 * t42);
            t42 = -t54 * t49 * (t21 * t44 + t4) + t36 + t38;
            t14 = t26 * t1 * (t23 * (t19 * t3 + t16) + t22) - t1 * t3 * t14;
            t22 = -t32 * t7 * (t16 * (t29 * t33 * t3 + t60) + t61 * t3) + t45 * t3 * t12 * t34;
            t23 = t1 * (t15 * (t3 * t39 + t31) + t47 * t3);
            t3 = t52 * t17 * t3;
            t29 = t56 / 0.12e2;
            t33 = t26 * (t49 * (-t24 * t35 + t48 + t63) + t27) - t54 * (-t51 * t62 + t46) + t55;
            t39 = t26 * (t49 * (-t14 * t35 + t41 * (t59 - t37)) + t3) - t54 * (-t51 * t22 + t23) + t29;
            t45 = t19 * t6;
            t19 = t32 * t8 * t2 * (t19 * t43 * t31 + t60 * t16) - t67 * t2 * t12 * t34;
            t47 = t70 * t41;
            t1 = t1 * t2 * (t17 * (t11 + t18) - t8 * (t45 + t16) * t15) * t35;
            t2 = t25 * t41;
            t8 = t26 * q0 * (t59 * t69 + t47) - t54 * t49 * (t19 * t21 - t1) + t2;
            t11 = -t26 * (t49 * (-t24 * t35 + t48 - t58) + t27) + t54 * (-t51 * t62 + t46) - t55;
            t4 = -t54 * t49 * (-t21 * t44 - t4) - t36 - t38;
            t1 = t26 * q0 * (t37 * t69 - t47) - t54 * t49 * (-t19 * t21 + t1) - t2;
            hess_xx(x0i, x0i) += t26 * (t28 * t49 * t35 - t53) - (t51 * t20 + t50 + t56) * t54 - t57;
            hess_xx(x0i, y0i) += t64;
            hess_xx(x0i, x1i) += t5;
            hess_xx(x0i, y1i) += t65;
            hess_xx(x0i, q0i) += t42;
            hess_xx(y0i, x0i) += t64;
            hess_xx(y0i, y0i) += -t26 * (-t14 * t49 * t35 + t3) + t54 * (-t51 * t22 + t23) - t29 - t59 * t49 * t41;
            hess_xx(y0i, x1i) += t33;
            hess_xx(y0i, y1i) += t39;
            hess_xx(y0i, q0i) += t8;
            hess_xx(x1i, x0i) += t5;
            hess_xx(x1i, y0i) += t33;
            hess_xx(x1i, x1i) += t26 * (t28 * t49 * t35 - t53) - (t51 * t20 + t50 + t56) * t54 - t57;
            hess_xx(x1i, y1i) += t11;
            hess_xx(x1i, q0i) += t4;
            hess_xx(y1i, x0i) += t65;
            hess_xx(y1i, y0i) += t39;
            hess_xx(y1i, x1i) += t11;
            hess_xx(y1i, y1i) += -t26 * (-t14 * t49 * t35 + t3) + t54 * (-t51 * t22 + t23) - t29 + t37 * t49 * t41;
            hess_xx(y1i, q0i) += t1;
            hess_xx(q0i, x0i) += t42;
            hess_xx(q0i, y0i) += t8;
            hess_xx(q0i, x1i) += t4;
            hess_xx(q0i, y1i) += t1;
            hess_xx(q0i, q0i) += -t21 * (t26 * t35 + t68 * t32) - t54 * t49 * (t21 * (-t32 * t30 * t7 * t9 * t13 * t40 -
                                                                                      0.4e1 * t10 *
                                                                                      (-t6 * t7 * t12 * t34 +
                                                                                       t31 * t16 * t43)) -
                                                                               t35 * t66 * t6 * t10 * (t45 + t16)) -
                                 t70 * (t68 + t35);
        } else if (btype(i) == 2 && !bad) {
            t1 = x0 - x1 - y0 + y1;
            t2 = cos(q1);
            t3 = t2 * t2;
            t4 = t3 * t1;
            t5 = 0.2e1 * t4;
            t6 = x0 - x1 + y0 - y1;
            t7 = t3 * t6;
            t8 = 0.2e1 * t7;
            t9 = x0 - x1;
            t10 = t3 * t9;
            t11 = 0.2e1 * t10;
            t12 = sin(q1);
            t13 = 0.2e1 * y0;
            t14 = 0.8e1 * y1;
            t15 = t13 + t14;
            t18 = 0.6e1 * x0;
            t19 = 0.6e1 * x1;
            t21 = cos(q0);
            t22 = t21 * t21;
            t23 = t22 * (t2 * t15 * t12 - t11 + t18 - t19 - t5 - t8);
            t24 = sin(q0);
            t25 = 0.4e1 * y0;
            t26 = t25 + y1;
            t31 = 0.2e1 * t21 * (t3 * t26 - t25 - y1) * t24;
            t32 = -0.2e1 * t3 * t9;
            t34 = 0.4e1 * y1;
            t35 = y0 + t34;
            t36 = t35 * t12;
            t37 = t2 * t36;
            t38 = 0.2e1 * t37;
            t39 = 0.4e1 * x0;
            t40 = 0.4e1 * x1;
            t41 = -t3 + 0.1e1;
            t42 = 0.2e1 * t41 * t9;
            t44 = 0.30e2 * t3;
            t45 = t44 - 0.15e2;
            t46 = t22 * t45;
            t49 = t12 * t24 * t21 * t2;
            t52 = t46 + 0.30e2 * t49 - 0.15e2 * t3;
            t53 = 0.1e1 / t52;
            t56 = 0.2e1 * t2 * t9 * t12;
            t57 = 0.6e1 * y0;
            t61 = y0 - y1;
            t62 = t61 * t12;
            t64 = 0.2e1 * t2 * t62;
            t69 = -t3 * t26;
            t71 = t2 * t9 * t12;
            t72 = 0.2e1 * t71;
            t74 = t53 * (t22 * (-t4 + t7 + t56 - t57 + y1) - 0.2e1 * t21 * (0.4e1 * t3 * t9 - t39 + t40 + t64) * t24 - t69 - t72);
            double t75 = t1 * t6;
            double t76 = t3 * t75;
            double t77 = t1 * t9;
            double t78 = t3 * t77;
            double t79 = t6 * t9;
            double t80 = t3 * t79;
            double t82 = t35 * x1;
            double t83 = x0 * t35 - t82;
            double t86 = x0 * x0;
            double t87 = x0 * x1;
            double t88 = 0.2e1 * t87;
            double t89 = x1 * x1;
            double t90 = y0 * y0;
            double t91 = 0.3e1 * t90;
            double t92 = y0 * y1;
            double t93 = y1 * y1;
            double t94 = 0.2e1 * t93;
            double t96 = 0.2e1 * t2 * t83 * t12 + 0.2e1 * t9 * t9 - t76 - t78 - t80 + t86 - t88 + t89 - t91 + t92 + t94;
            double t100 = t13 + y1 / 0.2e1;
            double t104 = y0 + y1 / 0.4e1;
            double t105 = t104 * x1;
            double t107 = 0.2e1 * x0 * t100 - 0.4e1 * t105;
            double t109 = t61 * t61;
            double t110 = t109 * t12;
            double t111 = t2 * t110;
            double t113 = 0.4e1 * t9 * t104;
            double t114 = t3 * t107 + t111 - t113;
            double t116 = t24 * t24;
            double t126 = -t86 + t88 - t89 - 0.2e1 * t90 - t92 + 0.3e1 * t93;
            double t127 = t3 * t126;
            double t128 = t2 * t9;
            double t129 = t128 * t36;
            double t130 = t9 * t9;
            double t131 = 0.2e1 * x0;
            double t132 = 0.2e1 * x1;
            double t136 = t52 * t52;
            double t137 = 0.1e1 / t136;
            double t138 = t137 * (t22 * t96 - 0.2e1 * t21 * t114 * t24 - t127 - t129 - t130 - (t32 + t37 + t131 - t132) * t9);
            double t146 = t12 * t22 * t2;
            double t148 = -0.30e2 * t12 * t116 * t2 - 0.2e1 * t24 * t21 * t45 + 0.30e2 * t146;
            double t150 = 0.2e1 * t53 * (-t24 * t21 * t96 + t114 * t116 - t114 * t22) - t148 * t138;
            double t159 = 0.2e1 * t3 * t9;
            double t162 = t53 * (t22 * (-t2 * t15 * t12 + t11 - t18 + t19 + t5 + t8) - 0.2e1 * t21 * (t69 + t25 + y1) * t24 - t159 + t38 + t39 - t40 + t32 + 0.2e1 * t41 * t9);
            double t172 = -y0 + 0.6e1 * y1;
            double t173 = t3 * t172;
            double t174 = 0.8e1 * t71;
            double t176 = t53 * (t22 * (0.8e1 * t2 * t9 * t12 + t34 + t4 - t7 + y0) - 0.2e1 * t21 * (t10 - t64 - x0 + x1) * t24 - t173 - t174);
            double t177 = t12 * t2;
            double t179 = 0.2e1 * t177 * t75;
            double t181 = 0.2e1 * t177 * t77;
            double t183 = 0.2e1 * t177 * t79;
            double t185 = t12 * t12;
            double t192 = t109 * t3;
            double t193 = t109 * t185;
            double t200 = 0.2e1 * t12 * t2 * t126;
            double t201 = t35 * t3;
            double t202 = t9 * t201;
            double t203 = t35 * t185;
            double t204 = t9 * t203;
            double t206 = -0.2e1 * t2 * t9 * t12;
            double t220 = -0.30e2 * t24 * t21 * t185 + 0.30e2 * t24 * t21 * t3 - 0.60e2 * t146 + 0.30e2 * t177;
            double t222 = t53 * (t22 * (-0.2e1 * t83 * t185 + 0.2e1 * t83 * t3 + t179 + t181 + t183) - 0.2e1 * t21 * (-0.2e1 * t12 * t2 * t107 + t192 - t193) * t24 + t200 - t202 + t204 - (-0.2e1 * t206 + t201 - t203) * t9) - t220 * t138;
            double t229 = t57 - y1;
            double t235 = 0.4e1 * t10;
            double t239 = y0 + 0.2e1 / 0.3e1 * y1;
            double t241 = 0.6e1 * t239 * t61;
            double t243 = t86 - t88 + t89 + t241 + 0.3e1 * t109;
            double t247 = t2 * t243 * t12 - t229 * t9 - t78 + t80;
            double t254 = y0 + 0.3e1 / 0.2e1 * y1;
            double t256 = 0.2e1 * t254 * t61;
            double t257 = 0.2e1 * t86 - 0.4e1 * t87 + 0.2e1 * t89 + t256 + t109;
            double t260 = 0.2e1 * t128 * t62;
            double t262 = t3 * t257 - 0.2e1 * t130 + t260;
            double t274 = t137 * (t22 * t247 - 0.2e1 * t21 * t262 * t24 - (t69 + t71) * t9);
            double t276 = 0.2e1 * t53 * (-t24 * t21 * t247 + t262 * t116 - t262 * t22) - t148 * t274;
            double t285 = t53 * (t22 * (t4 - t7 + t206 + t57 - y1) - 0.2e1 * t21 * (-0.4e1 * t3 * t9 + t39 - t40 - t64) * t24 + t69 + t72);
            double t299 = t53 * (t22 * (-t11 + t2 * (-0.8e1 * y0 - 0.2e1 * y1) * t12 + x0 - x1) - 0.2e1 * t21 * (-t35 * t3 - t72) * t24 + t10);
            double t307 = t9 * t61 * t3;
            double t309 = t9 * t61 * t185;
            double t317 = t9 * t185;
            double t323 = t53 * (t22 * (-t243 * t185 + t243 * t3 + t181 - t183) - 0.4e1 * t21 * (-t12 * t2 * t257 + t307 - t309) * t24 - (0.2e1 * t12 * t2 * t26 + t10 - t317) * t9) - t220 * t274;
            double t324 = t4 * t79;
            double t331 = 0.3e1 * t239 * t109 + t86 * t35 + t89 * t35 - 0.2e1 * x0 * t82;
            double t333 = t2 * t331 * t12;
            double t336 = -t324 + t333 + (t86 - t88 + t89 - t91 + t92 + t94) * t9;
            double t339 = t22 * t336;
            double t346 = t86 * t100 + t89 * t100 - 0.4e1 * x0 * t105 + t254 * t109;
            double t347 = t3 * t346;
            double t348 = t128 * t110;
            double t351 = -0.2e1 * t130 * t104 + t347 + t348;
            double t353 = t21 * t351 * t24;
            double t362 = 0.2e1 * t137 * (-t24 * t21 * t336 + t351 * t116 - t351 * t22);
            double t368 = t339 - 0.2e1 * t353 - (t127 + t129 + t130) * t9;
            double t371 = 0.1e1 / t52 / t136 * t368;
            double t372 = t148 * t148;
            double t375 = t137 * t368;
            double t379 = 0.120e3 * t49;
            double t386 = -0.2e1 * t2 * t83 * t12 - 0.2e1 * t9 * t9 + t76 + t78 + t80 - t86 + t88 - t89 + t91 - t92 - t94;
            double t393 = 0.2e1 * x1 * t100 - 0.4e1 * x0 * t104;
            double t395 = t3 * t393 - t111 + t113;
            double t407 = t137 * (t22 * t386 - 0.2e1 * t21 * t395 * t24 + t127 + t129 + t130 - (t159 - t37 - t131 + t132) * t9);
            double t409 = 0.2e1 * t53 * (-t24 * t21 * t386 + t395 * t116 - t395 * t22) - t148 * t407;
            double t414 = 0.4e1 * t86 - 0.8e1 * t87 + 0.4e1 * t89 - t241 + 0.2e1 * t109;
            double t418 = t2 * t414 * t12 + t35 * t9 + t78 - t80;
            double t424 = t86 / 0.2e1 - t87 + t89 / 0.2e1 - t256 + 0.3e1 / 0.2e1 * t109;
            double t427 = t3 * t424 - t260 - t130 / 0.2e1;
            double t440 = t137 * (t22 * t418 - 0.2e1 * t21 * t427 * t24 - (t173 + 0.4e1 * t71) * t9);
            double t442 = 0.2e1 * t53 * (-t24 * t21 * t418 + t427 * t116 - t427 * t22) - t148 * t440;
            double t449 = 0.2e1 * t12 * t2 * t1 * t79 - t331 * t185 + t331 * t3;
            double t457 = -0.2e1 * t12 * t2 * t346 + t9 * t192 - t9 * t193;
            double t470 = t137 * (t22 * t449 - 0.2e1 * t21 * t457 * t24 - (-t200 + t202 - t204) * t9);
            double t479 = t22 * t185;
            double t481 = t22 * t3;
            double t485 = 0.2e1 * t53 * (-t24 * t21 * t449 + t457 * t116 - t457 * t22) - t220 * t362 - t148 * t470 + 0.2e1 * t220 * t148 * t371 - (0.30e2 * t116 * t185 - 0.30e2 * t116 * t3 + t379 - 0.30e2 * t479 + 0.30e2 * t481) * t375;
            double t499 = t53 * (t22 * (-0.8e1 * t2 * t9 * t12 - t34 - t4 + t7 - y0) - 0.2e1 * t21 * (-t3 * t9 + t64 + x0 - x1) * t24 + t173 + t174);
            double t517 = t53 * (t22 * (0.2e1 * t83 * t185 - 0.2e1 * t83 * t3 - t179 - t181 - t183) - 0.2e1 * t21 * (-0.2e1 * t12 * t2 * t393 - t192 + t193) * t24 - t200 + t202 - t204 - (-0.2e1 * t56 - t201 + t203) * t9) - t220 * t407;
            double t553 = t53 * (t22 * (-t414 * t185 + t414 * t3 - t181 + t183) - 0.4e1 * t21 * (-t12 * t2 * t424 - t307 + t309) * t24 - (-0.2e1 * t12 * t2 * t172 + t235 - 0.4e1 * t317) * t9) - t220 * t440;
            double t579 = t220 * t220;
            hess_xx(x0i, x0i) -= t53 * (t23 - t31 - 0.2e1 * t32 - t38 - t39 + t40 - t42);
            hess_xx(x0i, y0i) -= t74;
            hess_xx(x0i, q0i) -= t150;
            hess_xx(x0i, x1i) -= t162;
            hess_xx(x0i, y1i) -= t176;
            hess_xx(x0i, q1i) -= t222;
            hess_xx(y0i, x0i) -= t74;
            hess_xx(y0i, y0i) -= t53 * (t22 * (t11 + t2 * (0.18e2 * y0 - t14) * t12 - t18 + t19) - 0.2e1 * t21 * (t3 * t229 + t72) * t24 + t235);
            hess_xx(y0i, q0i) -= t276;
            hess_xx(y0i, x1i) -= t285;
            hess_xx(y0i, y1i) -= t299;
            hess_xx(y0i, q1i) -= t323;
            hess_xx(q0i, x0i) -= t150;
            hess_xx(q0i, y0i) -= t276;
            hess_xx(q0i, q0i) -= t53 * (0.2e1 * t116 * t336 - 0.2e1 * t339 + 0.8e1 * t353) - 0.2e1 * t148 * t362 + 0.2e1 * t372 * t371 - (0.2e1 * t116 * t45 - t379 - 0.2e1 * t46) * t375;
            hess_xx(q0i, x1i) -= t409;
            hess_xx(q0i, y1i) -= t442;
            hess_xx(q0i, q1i) -= t485;
            hess_xx(x1i, x0i) -= t162;
            hess_xx(x1i, y0i) -= t285;
            hess_xx(x1i, q0i) -= t409;
            hess_xx(x1i, x1i) -= t53 * (t23 - t31 + 0.2e1 * t159 - t38 - t39 + t40 - t42);
            hess_xx(x1i, y1i) -= t499;
            hess_xx(x1i, q1i) -= t517;
            hess_xx(y1i, x0i) -= t176;
            hess_xx(y1i, y0i) -= t299;
            hess_xx(y1i, q0i) -= t442;
            hess_xx(y1i, x1i) -= t499;
            hess_xx(y1i, y1i) -= t53 * (t22 * (t11 + t2 * (-t13 + 0.12e2 * y1) * t12 + t39 - t40) - 0.2e1 * t21 * (t3 * (-t25 + 0.9e1 * y1) + t72) * t24 - 0.6e1 * t10);
            hess_xx(y1i, q1i) -= t553;
            hess_xx(q1i, x0i) -= t222;
            hess_xx(q1i, y0i) -= t323;
            hess_xx(q1i, q0i) -= t485;
            hess_xx(q1i, x1i) -= t517;
            hess_xx(q1i, y1i) -= t553;
            hess_xx(q1i, q1i) -= t53 * (t22 * (-0.2e1 * t185 * t1 * t79 + 0.2e1 * t324 - 0.4e1 * t333) - 0.2e1 * t21 * (0.2e1 * t185 * t346 - 0.2e1 * t347 - 0.4e1 * t348) * t24 - (0.2e1 * t185 * t126 - 0.2e1 * t127 - 0.4e1 * t129) * t9) - 0.2e1 * t220 * t470 + 0.2e1 * t579 * t371 - (0.60e2 * t479 - 0.60e2 * t481 - t379 - 0.30e2 * t185 + t44) * t375;
        } else if (btype(i) == 2 && bad) {
            t1 = x0 - x1 - y0 + y1;
            t2 = cos(q1);
            t3 = t2 * t2;
            t4 = t3 * t1;
            t5 = 0.2e1 * t4;
            t6 = x0 - x1 + y0 - y1;
            t7 = t3 * t6;
            t8 = 0.2e1 * t7;
            t9 = x0 - x1;
            t10 = t3 * t9;
            t11 = 0.2e1 * t10;
            t12 = sin(q1);
            t13 = 0.2e1 * y0;
            t14 = 0.8e1 * y1;
            t15 = t13 + t14;
            t18 = 0.6e1 * x0;
            t19 = 0.6e1 * x1;
            t21 = cos(q0);
            t22 = t21 * t21;
            t23 = t22 * (t2 * t15 * t12 - t11 + t18 - t19 - t5 - t8);
            t24 = sin(q0);
            t25 = 0.4e1 * y0;
            t26 = t25 + y1;
            t31 = 0.2e1 * t21 * (t3 * t26 - t25 - y1) * t24;
            t32 = -0.2e1 * t3 * t9;
            t34 = 0.4e1 * y1;
            t35 = y0 + t34;
            t36 = t35 * t12;
            t37 = t2 * t36;
            t38 = 0.2e1 * t37;
            t39 = 0.4e1 * x0;
            t40 = 0.4e1 * x1;
            t41 = -t3 + 0.1e1;
            t42 = 0.2e1 * t41 * t9;
            t44 = 0.30e2 * t3;
            t45 = t44 - 0.15e2;
            t46 = t22 * t45;
            t49 = t12 * t24 * t21 * t2;
            t52 = t46 + 0.30e2 * t49 - 0.15e2 * t3;
            t53 = 0.1e1 / t52;
            t56 = 0.2e1 * t2 * t9 * t12;
            t57 = 0.6e1 * y0;
            t61 = y0 - y1;
            t62 = t61 * t12;
            t64 = 0.2e1 * t2 * t62;
            t69 = -t3 * t26;
            t71 = t2 * t9 * t12;
            t72 = 0.2e1 * t71;
            t74 = t53 * (t22 * (-t4 + t7 + t56 - t57 + y1) - 0.2e1 * t21 * (0.4e1 * t3 * t9 - t39 + t40 + t64) * t24 - t69 - t72);
            double t75 = t1 * t6;
            double t76 = t3 * t75;
            double t77 = t1 * t9;
            double t78 = t3 * t77;
            double t79 = t6 * t9;
            double t80 = t3 * t79;
            double t82 = t35 * x1;
            double t83 = x0 * t35 - t82;
            double t86 = x0 * x0;
            double t87 = x0 * x1;
            double t88 = 0.2e1 * t87;
            double t89 = x1 * x1;
            double t90 = y0 * y0;
            double t91 = 0.3e1 * t90;
            double t92 = y0 * y1;
            double t93 = y1 * y1;
            double t94 = 0.2e1 * t93;
            double t96 = 0.2e1 * t2 * t83 * t12 + 0.2e1 * t9 * t9 - t76 - t78 - t80 + t86 - t88 + t89 - t91 + t92 + t94;
            double t100 = t13 + y1 / 0.2e1;
            double t104 = y0 + y1 / 0.4e1;
            double t105 = t104 * x1;
            double t107 = 0.2e1 * x0 * t100 - 0.4e1 * t105;
            double t109 = t61 * t61;
            double t110 = t109 * t12;
            double t111 = t2 * t110;
            double t113 = 0.4e1 * t9 * t104;
            double t114 = t3 * t107 + t111 - t113;
            double t116 = t24 * t24;
            double t126 = -t86 + t88 - t89 - 0.2e1 * t90 - t92 + 0.3e1 * t93;
            double t127 = t3 * t126;
            double t128 = t2 * t9;
            double t129 = t128 * t36;
            double t130 = t9 * t9;
            double t131 = 0.2e1 * x0;
            double t132 = 0.2e1 * x1;
            double t136 = t52 * t52;
            double t137 = 0.1e1 / t136;
            double t138 = t137 * (t22 * t96 - 0.2e1 * t21 * t114 * t24 - t127 - t129 - t130 - (t32 + t37 + t131 - t132) * t9);
            double t146 = t12 * t22 * t2;
            double t148 = -0.30e2 * t12 * t116 * t2 - 0.2e1 * t24 * t21 * t45 + 0.30e2 * t146;
            double t150 = 0.2e1 * t53 * (-t24 * t21 * t96 + t114 * t116 - t114 * t22) - t148 * t138;
            double t159 = 0.2e1 * t3 * t9;
            double t162 = t53 * (t22 * (-t2 * t15 * t12 + t11 - t18 + t19 + t5 + t8) - 0.2e1 * t21 * (t69 + t25 + y1) * t24 - t159 + t38 + t39 - t40 + t32 + 0.2e1 * t41 * t9);
            double t172 = -y0 + 0.6e1 * y1;
            double t173 = t3 * t172;
            double t174 = 0.8e1 * t71;
            double t176 = t53 * (t22 * (0.8e1 * t2 * t9 * t12 + t34 + t4 - t7 + y0) - 0.2e1 * t21 * (t10 - t64 - x0 + x1) * t24 - t173 - t174);
            double t177 = t12 * t2;
            double t179 = 0.2e1 * t177 * t75;
            double t181 = 0.2e1 * t177 * t77;
            double t183 = 0.2e1 * t177 * t79;
            double t185 = t12 * t12;
            double t192 = t109 * t3;
            double t193 = t109 * t185;
            double t200 = 0.2e1 * t12 * t2 * t126;
            double t201 = t35 * t3;
            double t202 = t9 * t201;
            double t203 = t35 * t185;
            double t204 = t9 * t203;
            double t206 = -0.2e1 * t2 * t9 * t12;
            double t220 = -0.30e2 * t24 * t21 * t185 + 0.30e2 * t24 * t21 * t3 - 0.60e2 * t146 + 0.30e2 * t177;
            double t222 = t53 * (t22 * (-0.2e1 * t83 * t185 + 0.2e1 * t83 * t3 + t179 + t181 + t183) - 0.2e1 * t21 * (-0.2e1 * t12 * t2 * t107 + t192 - t193) * t24 + t200 - t202 + t204 - (-0.2e1 * t206 + t201 - t203) * t9) - t220 * t138;
            double t229 = t57 - y1;
            double t235 = 0.4e1 * t10;
            double t239 = y0 + 0.2e1 / 0.3e1 * y1;
            double t241 = 0.6e1 * t239 * t61;
            double t243 = t86 - t88 + t89 + t241 + 0.3e1 * t109;
            double t247 = t2 * t243 * t12 - t229 * t9 - t78 + t80;
            double t254 = y0 + 0.3e1 / 0.2e1 * y1;
            double t256 = 0.2e1 * t254 * t61;
            double t257 = 0.2e1 * t86 - 0.4e1 * t87 + 0.2e1 * t89 + t256 + t109;
            double t260 = 0.2e1 * t128 * t62;
            double t262 = t3 * t257 - 0.2e1 * t130 + t260;
            double t274 = t137 * (t22 * t247 - 0.2e1 * t21 * t262 * t24 - (t69 + t71) * t9);
            double t276 = 0.2e1 * t53 * (-t24 * t21 * t247 + t262 * t116 - t262 * t22) - t148 * t274;
            double t285 = t53 * (t22 * (t4 - t7 + t206 + t57 - y1) - 0.2e1 * t21 * (-0.4e1 * t3 * t9 + t39 - t40 - t64) * t24 + t69 + t72);
            double t299 = t53 * (t22 * (-t11 + t2 * (-0.8e1 * y0 - 0.2e1 * y1) * t12 + x0 - x1) - 0.2e1 * t21 * (-t35 * t3 - t72) * t24 + t10);
            double t307 = t9 * t61 * t3;
            double t309 = t9 * t61 * t185;
            double t317 = t9 * t185;
            double t323 = t53 * (t22 * (-t243 * t185 + t243 * t3 + t181 - t183) - 0.4e1 * t21 * (-t12 * t2 * t257 + t307 - t309) * t24 - (0.2e1 * t12 * t2 * t26 + t10 - t317) * t9) - t220 * t274;
            double t324 = t4 * t79;
            double t331 = 0.3e1 * t239 * t109 + t86 * t35 + t89 * t35 - 0.2e1 * x0 * t82;
            double t333 = t2 * t331 * t12;
            double t336 = -t324 + t333 + (t86 - t88 + t89 - t91 + t92 + t94) * t9;
            double t339 = t22 * t336;
            double t346 = t86 * t100 + t89 * t100 - 0.4e1 * x0 * t105 + t254 * t109;
            double t347 = t3 * t346;
            double t348 = t128 * t110;
            double t351 = -0.2e1 * t130 * t104 + t347 + t348;
            double t353 = t21 * t351 * t24;
            double t362 = 0.2e1 * t137 * (-t24 * t21 * t336 + t351 * t116 - t351 * t22);
            double t368 = t339 - 0.2e1 * t353 - (t127 + t129 + t130) * t9;
            double t371 = 0.1e1 / t52 / t136 * t368;
            double t372 = t148 * t148;
            double t375 = t137 * t368;
            double t379 = 0.120e3 * t49;
            double t386 = -0.2e1 * t2 * t83 * t12 - 0.2e1 * t9 * t9 + t76 + t78 + t80 - t86 + t88 - t89 + t91 - t92 - t94;
            double t393 = 0.2e1 * x1 * t100 - 0.4e1 * x0 * t104;
            double t395 = t3 * t393 - t111 + t113;
            double t407 = t137 * (t22 * t386 - 0.2e1 * t21 * t395 * t24 + t127 + t129 + t130 - (t159 - t37 - t131 + t132) * t9);
            double t409 = 0.2e1 * t53 * (-t24 * t21 * t386 + t395 * t116 - t395 * t22) - t148 * t407;
            double t414 = 0.4e1 * t86 - 0.8e1 * t87 + 0.4e1 * t89 - t241 + 0.2e1 * t109;
            double t418 = t2 * t414 * t12 + t35 * t9 + t78 - t80;
            double t424 = t86 / 0.2e1 - t87 + t89 / 0.2e1 - t256 + 0.3e1 / 0.2e1 * t109;
            double t427 = t3 * t424 - t260 - t130 / 0.2e1;
            double t440 = t137 * (t22 * t418 - 0.2e1 * t21 * t427 * t24 - (t173 + 0.4e1 * t71) * t9);
            double t442 = 0.2e1 * t53 * (-t24 * t21 * t418 + t427 * t116 - t427 * t22) - t148 * t440;
            double t449 = 0.2e1 * t12 * t2 * t1 * t79 - t331 * t185 + t331 * t3;
            double t457 = -0.2e1 * t12 * t2 * t346 + t9 * t192 - t9 * t193;
            double t470 = t137 * (t22 * t449 - 0.2e1 * t21 * t457 * t24 - (-t200 + t202 - t204) * t9);
            double t479 = t22 * t185;
            double t481 = t22 * t3;
            double t485 = 0.2e1 * t53 * (-t24 * t21 * t449 + t457 * t116 - t457 * t22) - t220 * t362 - t148 * t470 + 0.2e1 * t220 * t148 * t371 - (0.30e2 * t116 * t185 - 0.30e2 * t116 * t3 + t379 - 0.30e2 * t479 + 0.30e2 * t481) * t375;
            double t499 = t53 * (t22 * (-0.8e1 * t2 * t9 * t12 - t34 - t4 + t7 - y0) - 0.2e1 * t21 * (-t3 * t9 + t64 + x0 - x1) * t24 + t173 + t174);
            double t517 = t53 * (t22 * (0.2e1 * t83 * t185 - 0.2e1 * t83 * t3 - t179 - t181 - t183) - 0.2e1 * t21 * (-0.2e1 * t12 * t2 * t393 - t192 + t193) * t24 - t200 + t202 - t204 - (-0.2e1 * t56 - t201 + t203) * t9) - t220 * t407;
            double t553 = t53 * (t22 * (-t414 * t185 + t414 * t3 - t181 + t183) - 0.4e1 * t21 * (-t12 * t2 * t424 - t307 + t309) * t24 - (-0.2e1 * t12 * t2 * t172 + t235 - 0.4e1 * t317) * t9) - t220 * t440;
            double t579 = t220 * t220;
            hess_xx(x0i, x0i) += t53 * (t23 - t31 - 0.2e1 * t32 - t38 - t39 + t40 - t42);
            hess_xx(x0i, y0i) += t74;
            hess_xx(x0i, q0i) += t150;
            hess_xx(x0i, x1i) += t162;
            hess_xx(x0i, y1i) += t176;
            hess_xx(x0i, q1i) += t222;
            hess_xx(y0i, x0i) += t74;
            hess_xx(y0i, y0i) += t53 * (t22 * (t11 + t2 * (0.18e2 * y0 - t14) * t12 - t18 + t19) - 0.2e1 * t21 * (t3 * t229 + t72) * t24 + t235);
            hess_xx(y0i, q0i) += t276;
            hess_xx(y0i, x1i) += t285;
            hess_xx(y0i, y1i) += t299;
            hess_xx(y0i, q1i) += t323;
            hess_xx(q0i, x0i) += t150;
            hess_xx(q0i, y0i) += t276;
            hess_xx(q0i, q0i) += t53 * (0.2e1 * t116 * t336 - 0.2e1 * t339 + 0.8e1 * t353) - 0.2e1 * t148 * t362 + 0.2e1 * t372 * t371 - (0.2e1 * t116 * t45 - t379 - 0.2e1 * t46) * t375;
            hess_xx(q0i, x1i) += t409;
            hess_xx(q0i, y1i) += t442;
            hess_xx(q0i, q1i) += t485;
            hess_xx(x1i, x0i) += t162;
            hess_xx(x1i, y0i) += t285;
            hess_xx(x1i, q0i) += t409;
            hess_xx(x1i, x1i) += t53 * (t23 - t31 + 0.2e1 * t159 - t38 - t39 + t40 - t42);
            hess_xx(x1i, y1i) += t499;
            hess_xx(x1i, q1i) += t517;
            hess_xx(y1i, x0i) += t176;
            hess_xx(y1i, y0i) += t299;
            hess_xx(y1i, q0i) += t442;
            hess_xx(y1i, x1i) += t499;
            hess_xx(y1i, y1i) += t53 * (t22 * (t11 + t2 * (-t13 + 0.12e2 * y1) * t12 + t39 - t40) - 0.2e1 * t21 * (t3 * (-t25 + 0.9e1 * y1) + t72) * t24 - 0.6e1 * t10);
            hess_xx(y1i, q1i) += t553;
            hess_xx(q1i, x0i) += t222;
            hess_xx(q1i, y0i) += t323;
            hess_xx(q1i, q0i) += t485;
            hess_xx(q1i, x1i) += t517;
            hess_xx(q1i, y1i) += t553;
            hess_xx(q1i, q1i) += t53 * (t22 * (-0.2e1 * t185 * t1 * t79 + 0.2e1 * t324 - 0.4e1 * t333) - 0.2e1 * t21 * (0.2e1 * t185 * t346 - 0.2e1 * t347 - 0.4e1 * t348) * t24 - (0.2e1 * t185 * t126 - 0.2e1 * t127 - 0.4e1 * t129) * t9) - 0.2e1 * t220 * t470 + 0.2e1 * t579 * t371 - (0.60e2 * t479 - 0.60e2 * t481 - t379 - 0.30e2 * t185 + t44) * t375;
        }
        // @formatter:on
    }
}
