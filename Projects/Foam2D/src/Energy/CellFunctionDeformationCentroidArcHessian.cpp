#include "../../include/Energy/CellFunctionDeformationCentroid.h"
#include <iostream>

void
CellFunctionDeformationCentroid::addHessianArc(int i, const VectorXT &nodes, const VectorXi &next,
                                               VectorXT &gradient_centroid, Eigen::Ref<MatrixXT> &hess_xx,
                                               MatrixXT &hess_Cx, MatrixXT &hess_CC,
                                               const CellInfo *cellInfo, double xc,
                                               double yc) const {
    double unknown[7][7];

    double x0, y0, x1, y1, r;
    int x0i, y0i, x1i, y1i, ri;

    x0i = i * nx + 0;
    y0i = i * nx + 1;
    x1i = next(i) * nx + 0;
    y1i = next(i) * nx + 1;
    ri = i * nx + 2;

    x0 = nodes(x0i);
    y0 = nodes(y0i);
    x1 = nodes(x1i);
    y1 = nodes(y1i);
    r = nodes(ri);

    VectorXT x(5);
    x << x0, y0, x1, y1, r;

    VectorXT p;
    MatrixXT dpdx;
    std::vector<MatrixXT> d2pdx2;
    getArcParams(2, x, p, dpdx, d2pdx2);
    VectorXT gradient_p = VectorXT::Zero(5);

    // r = p(0)
    double xrc = p(1), yrc = p(2), theta = p(3), phi = p(4);
    double a = sqrt(cellInfo->target_area / M_PI);

    // @formatter:off
    {
        double t1 = r * r;
        double t2 = yc - yrc;
        double t3 = t2 * t1;
        double t4 = xc - xrc;
        double t5 = phi / 0.2e1;
        double t6 = -theta + t5;
        double t7 = cos(t6);
        double t8 = t7 * t7;
        double t9 = t8 * t4;
        double t12 = xc + yc - xrc - yrc;
        double t13 = t12 * r;
        double t14 = xc - yc - xrc + yrc;
        double t15 = sin(t6);
        double t19 = a * a;
        double t20 = xc * xc;
        double t21 = xc * xrc;
        double t22 = 0.2e1 * t21;
        double t23 = xrc * xrc;
        double t24 = yc * yc;
        double t25 = yc * yrc;
        double t26 = 0.2e1 * t25;
        double t27 = yrc * yrc;
        double t28 = t19 - t1 - t20 + t22 - t23 - t24 + t26 - t27;
        double t29 = t28 * t2;
        double t30 = t15 * t14 * t13 / 0.2e1 + t29;
        double t31 = r * t30;
        double t34 = t4 * r;
        double t38 = theta + t5;
        double t39 = cos(t38);
        double t40 = t39 * t39;
        double t41 = t40 * t4;
        double t44 = sin(t38);
        double t48 = -t14 * t44 * t13 / 0.2e1 + t29;
        double t49 = r * t48;
        double t55 = t1 * t1;
        double t63 = -0.2e1 * t19 + 0.4e1 * t20 - 0.8e1 * t21 + 0.4e1 * t23 + 0.4e1 * t24 - 0.8e1 * t25 + 0.4e1 * t27;
        double t64 = t1 * t63;
        double t65 = t19 - t20 + t22 - t23 - t24 + t26 - t27;
        double t66 = t65 * t65;
        double t69 = r * t2;
        double t72 = t14 * t12;
        double t75 = 0.2e1 * t69;
        double t82 = t28 * t4;
        double t85 = t4 * t1;
        double t108 = 0.8e1 * t9 * t69 + 0.4e1 * t7 * r * (t15 * t72 / 0.2e1 - t75) + 0.4e1 * t7 * t30 + 0.4e1 * t15 * t82 - 0.8e1 * t15 * t85 - 0.8e1 * t41 * t69 - 0.4e1 * t39 * r * (-t44 * t72 / 0.2e1 - t75) - 0.4e1 * t39 * t48 + 0.4e1 * t44 * t82 - 0.8e1 * t44 * t85 + phi * (0.4e1 * r * t1 + 0.2e1 * r * t63);
        double t112 = 0.4e1 * t8 * t3;
        double t113 = t14 * r;
        double t115 = t15 * t113 / 0.2e1;
        double t117 = t15 * t13 / 0.2e1;
        double t118 = 0.2e1 * t4 * t2;
        double t123 = t28 * r;
        double t125 = 0.4e1 * t15 * t123;
        double t130 = 0.4e1 * t40 * t3;
        double t132 = t44 * t113 / 0.2e1;
        double t134 = t44 * t13 / 0.2e1;
        double t140 = 0.4e1 * t44 * t123;
        double t152 = 0.4e1 * t8 * t85;
        double t153 = 0.2e1 * t2 * t2;
        double t154 = -t115 + t117 - t19 + t1 + t20 - t22 + t23 + t24 - t26 + t27 + t153;
        double t162 = 0.4e1 * t40 * t85;
        double t163 = t132 - t134 - t19 + t1 + t20 - t22 + t23 + t24 - t26 + t27 + t153;
        double t179 = t15 * t7 * t4 * t3;
        double t181 = t12 * t1;
        double t183 = t8 * t14 * t181;
        double t185 = t15 * t31;
        double t188 = t7 * t28 * t34;
        double t192 = t44 * t39 * t4 * t3;
        double t195 = t40 * t14 * t181;
        double t197 = t49 * t44;
        double t200 = t39 * t28 * t34;
        double t210 = -0.4e1 * t179 + t183 - 0.2e1 * t185 + 0.2e1 * t188 + 0.4e1 * t192 + t195 + 0.2e1 * t197 + 0.2e1 * t200 + t55 + t64 + t66;
        double t212 = -0.2e1 * t4 * t2;
        double t234 = -0.2e1 * t2 * t2;
        double t235 = t115 - t117 + t19 - t1 - t20 + t22 - t23 - t24 + t26 - t27 + t234;
        double t242 = -t132 + t134 + t19 - t1 - t20 + t22 - t23 - t24 + t26 - t27 + t234;
        gradient_p[0] = 0.4e1 * t9 * t3 + 0.4e1 * t7 * t31 + 0.4e1 * t15 * t28 * t34 - 0.4e1 * t41 * t3 - 0.4e1 * t39 * t49 + 0.4e1 * t44 * t28 * t34 + phi * (t55 + t64 + t66) + t108 * r;
        gradient_p[1] = (-t112 + 0.4e1 * t7 * r * (-t115 - t117 + t118) - t125 + 0.8e1 * t15 * t4 * t34 + t130 - 0.4e1 * t39 * r * (t132 + t134 + t118) - t140 + 0.8e1 * t44 * t4 * t34 + phi * (-0.8e1 * t4 * t1 + 0.4e1 * t4 * t65)) * r;
        gradient_p[2] = (-t152 + 0.4e1 * t7 * r * t154 + 0.8e1 * t15 * t2 * t34 + t162 - 0.4e1 * t39 * r * t163 + 0.8e1 * t44 * t2 * t34 + phi * (-0.8e1 * t2 * t1 + 0.4e1 * t2 * t65)) * r;
        gradient_p[3] = (0.8e1 * t179 - 0.2e1 * t183 + 0.4e1 * t185 - 0.4e1 * t188 + 0.8e1 * t192 + 0.2e1 * t195 + 0.4e1 * t197 + 0.4e1 * t200) * r;
        gradient_p[4] = t210 * r;
        gradient_centroid[0] += (t112 + 0.4e1 * t7 * r * (t115 + t117 + t212) + t125 - 0.8e1 * t15 * t4 * t34 - t130 - 0.4e1 * t39 * r * (-t132 - t134 + t212) + t140 - 0.8e1 * t44 * t4 * t34 + phi * (0.8e1 * t4 * t1 - 0.4e1 * t4 * t65)) * r;
        gradient_centroid[1] += (t152 + 0.4e1 * t7 * r * t235 - 0.8e1 * t15 * t2 * t34 - t162 - 0.4e1 * t39 * r * t242 - 0.8e1 * t44 * t2 * t34 + phi * (0.8e1 * t2 * t1 - 0.4e1 * t2 * t65)) * r;
    }

    double t1 = yc - yrc;
    double t2 = r * t1;
    double t3 = xc - xrc;
    double t4 = phi / 0.2e1;
    double t5 = -theta + t4;
    double t6 = cos(t5);
    double t7 = t6 * t6;
    double t8 = t7 * t3;
    double t11 = xc + yc - xrc - yrc;
    double t12 = xc - yc - xrc + yrc;
    double t13 = t12 * t11;
    double t14 = sin(t5);
    double t17 = 0.2e1 * t2;
    double t18 = t14 * t13 / 0.2e1 - t17;
    double t19 = r * t18;
    double t22 = t11 * r;
    double t23 = t14 * t12;
    double t26 = a * a;
    double t27 = r * r;
    double t28 = xc * xc;
    double t29 = xc * xrc;
    double t30 = 0.2e1 * t29;
    double t31 = xrc * xrc;
    double t32 = yc * yc;
    double t33 = yc * yrc;
    double t34 = 0.2e1 * t33;
    double t35 = yrc * yrc;
    double t36 = t26 - t27 - t28 + t30 - t31 - t32 + t34 - t35;
    double t37 = t36 * t1;
    double t38 = t23 * t22 / 0.2e1 + t37;
    double t41 = t36 * t3;
    double t44 = t3 * t27;
    double t47 = theta + t4;
    double t48 = cos(t47);
    double t49 = t48 * t48;
    double t50 = t49 * t3;
    double t53 = sin(t47);
    double t56 = -t53 * t13 / 0.2e1 - t17;
    double t57 = r * t56;
    double t60 = t53 * t12;
    double t63 = -t60 * t22 / 0.2e1 + t37;
    double t71 = 0.4e1 * r * t27;
    double t73 = 0.4e1 * t28;
    double t74 = 0.8e1 * t29;
    double t75 = 0.4e1 * t31;
    double t76 = 0.4e1 * t32;
    double t77 = 0.8e1 * t33;
    double t78 = 0.4e1 * t35;
    double t79 = -0.2e1 * t26 + t73 - t74 + t75 + t76 - t77 + t78;
    double t81 = 0.2e1 * r * t79;
    double t85 = t3 * t1;
    double t88 = -0.2e1 * r * t1;
    double t93 = r * t3;
    double t94 = t14 * t93;
    double t102 = t53 * t93;
    double t104 = 0.4e1 * t26;
    double t116 = 0.16e2 * t8 * t2 + 0.8e1 * t6 * t19 + 0.8e1 * t6 * t38 + 0.8e1 * t14 * t41 - 0.16e2 * t14 * t44 - 0.16e2 * t50 * t2 - 0.8e1 * t48 * t57 - 0.8e1 * t48 * t63 + 0.8e1 * t53 * t41 - 0.16e2 * t53 * t44 + 0.2e1 * phi * (t71 + t81) + (0.8e1 * t7 * t85 + 0.4e1 * t6 * t88 + 0.8e1 * t6 * t18 - 0.24e2 * t94 - 0.8e1 * t49 * t85 - 0.4e1 * t48 * t88 - 0.8e1 * t48 * t56 - 0.24e2 * t102 + phi * (-t104 + 0.12e2 * t27 + 0.8e1 * t28 - 0.16e2 * t29 + 0.8e1 * t31 + 0.8e1 * t32 - 0.16e2 * t33 + 0.8e1 * t35)) * r;
    double t117 = t1 * t27;
    double t119 = 0.4e1 * t7 * t117;
    double t120 = t12 * r;
    double t122 = t14 * t120 / 0.2e1;
    double t124 = t14 * t22 / 0.2e1;
    double t125 = 0.2e1 * t3 * t1;
    double t126 = -t122 - t124 + t125;
    double t127 = r * t126;
    double t130 = t36 * r;
    double t132 = 0.4e1 * t14 * t130;
    double t137 = 0.4e1 * t49 * t117;
    double t139 = t53 * t120 / 0.2e1;
    double t141 = t53 * t22 / 0.2e1;
    double t142 = t139 + t141 + t125;
    double t143 = r * t142;
    double t147 = 0.4e1 * t53 * t130;
    double t151 = -0.8e1 * t3 * t27;
    double t152 = t26 - t28 + t30 - t31 - t32 + t34 - t35;
    double t154 = 0.4e1 * t3 * t152;
    double t158 = 0.8e1 * t7 * t2;
    double t159 = t14 * t11;
    double t160 = -t23 - t159;
    double t166 = t14 * t36;
    double t167 = 0.4e1 * t166;
    double t168 = 0.2e1 * t3 * t3;
    double t172 = 0.8e1 * t14 * t27;
    double t174 = 0.8e1 * t49 * t2;
    double t175 = t53 * t11;
    double t176 = t60 + t175;
    double t182 = t53 * t36;
    double t183 = 0.4e1 * t182;
    double t187 = 0.8e1 * t53 * t27;
    double t191 = -0.16e2 * phi * r * t3 + 0.2e1 * r * t160 * t6 - 0.2e1 * r * t176 * t48 + 0.4e1 * t126 * t6 + 0.4e1 * t14 * t168 - 0.4e1 * t142 * t48 + 0.4e1 * t168 * t53 - t158 - t167 + t172 + t174 - t183 + t187;
    double t193 = -t119 + 0.4e1 * t6 * t127 - t132 + 0.8e1 * t14 * t3 * t93 + t137 - 0.4e1 * t48 * t143 - t147 + 0.8e1 * t53 * t3 * t93 + phi * (t151 + t154) + t191 * r;
    double t195 = 0.4e1 * t7 * t44;
    double t196 = 0.2e1 * t1 * t1;
    double t197 = -t122 + t124 - t26 + t27 + t28 - t30 + t31 + t32 - t34 + t35 + t196;
    double t198 = r * t197;
    double t205 = 0.4e1 * t49 * t44;
    double t206 = t139 - t141 - t26 + t27 + t28 - t30 + t31 + t32 - t34 + t35 + t196;
    double t207 = r * t206;
    double t213 = -0.8e1 * t1 * t27;
    double t215 = 0.4e1 * t1 * t152;
    double t219 = 0.8e1 * t7 * t93;
    double t222 = 0.2e1 * r;
    double t223 = -t23 / 0.2e1 + t159 / 0.2e1 + t222;
    double t232 = 0.8e1 * t49 * t93;
    double t235 = t60 / 0.2e1 - t175 / 0.2e1 + t222;
    double t248 = -t195 + 0.4e1 * t6 * t198 + 0.8e1 * t14 * t1 * t93 + t205 - 0.4e1 * t48 * t207 + 0.8e1 * t53 * t1 * t93 + phi * (t213 + t215) + (-0.16e2 * phi * r * t1 + 0.4e1 * r * t223 * t6 - 0.4e1 * r * t235 * t48 + 0.4e1 * t125 * t14 + 0.4e1 * t125 * t53 + 0.4e1 * t197 * t6 - 0.4e1 * t206 * t48 - t219 + t232) * r;
    double t250 = t14 * t6 * t3;
    double t251 = t250 * t117;
    double t253 = t11 * t27;
    double t255 = t7 * t12 * t253;
    double t257 = r * t38;
    double t258 = t14 * t257;
    double t261 = t6 * t36 * t93;
    double t264 = t53 * t48 * t3;
    double t265 = t264 * t117;
    double t268 = t49 * t12 * t253;
    double t270 = r * t63;
    double t271 = t53 * t270;
    double t274 = t48 * t36 * t93;
    double t276 = t250 * t2;
    double t279 = r * t7 * t13;
    double t281 = t14 * t19;
    double t283 = t14 * t38;
    double t285 = t6 * t41;
    double t287 = t6 * t44;
    double t289 = t264 * t2;
    double t292 = r * t49 * t13;
    double t294 = t53 * t57;
    double t296 = t53 * t63;
    double t298 = t48 * t41;
    double t300 = t48 * t44;
    double t302 = 0.16e2 * t276 - 0.4e1 * t279 + 0.4e1 * t281 + 0.4e1 * t283 - 0.4e1 * t285 + 0.8e1 * t287 + 0.16e2 * t289 + 0.4e1 * t292 + 0.4e1 * t294 + 0.4e1 * t296 + 0.4e1 * t298 - 0.8e1 * t300;
    double t304 = r * t302 + 0.8e1 * t251 - 0.2e1 * t255 + 0.4e1 * t258 - 0.4e1 * t261 + 0.8e1 * t265 + 0.2e1 * t268 + 0.4e1 * t271 + 0.4e1 * t274;
    double t311 = t27 * t27;
    double t313 = t152 * t152;
    double t326 = -0.8e1 * t276 + 0.2e1 * t279 - 0.2e1 * t281 - 0.2e1 * t283 + 0.2e1 * t285 - 0.4e1 * t287 + 0.8e1 * t289 + 0.2e1 * t292 + 0.2e1 * t294 + 0.2e1 * t296 + 0.2e1 * t298 - 0.4e1 * t300 + t71 + t81;
    double t328 = r * t326 + t27 * t79 - 0.4e1 * t251 + t255 - 0.2e1 * t258 + 0.2e1 * t261 + 0.4e1 * t265 + t268 + 0.2e1 * t271 + 0.2e1 * t274 + t311 + t313;
    double t329 = -0.2e1 * t3 * t1;
    double t330 = t122 + t124 + t329;
    double t331 = r * t330;
    double t337 = -t139 - t141 + t329;
    double t338 = r * t337;
    double t344 = 0.8e1 * t3 * t27;
    double t346 = -0.4e1 * t3 * t152;
    double t354 = -0.2e1 * t3 * t3;
    double t367 = 0.16e2 * phi * r * t3 - 0.2e1 * r * t160 * t6 + 0.2e1 * r * t176 * t48 + 0.4e1 * t14 * t354 + 0.4e1 * t330 * t6 - 0.4e1 * t337 * t48 + 0.4e1 * t354 * t53 + t158 + t167 - t172 - t174 + t183 - t187;
    double t369 = t119 + 0.4e1 * t6 * t331 + t132 - 0.8e1 * t14 * t3 * t93 - t137 - 0.4e1 * t48 * t338 + t147 - 0.8e1 * t53 * t3 * t93 + phi * (t344 + t346) + t367 * r;
    double t370 = -0.2e1 * t1 * t1;
    double t371 = t122 - t124 + t26 - t27 - t28 + t30 - t31 - t32 + t34 - t35 + t370;
    double t372 = r * t371;
    double t378 = -t139 + t141 + t26 - t27 - t28 + t30 - t31 - t32 + t34 - t35 + t370;
    double t379 = r * t378;
    double t385 = 0.8e1 * t1 * t27;
    double t387 = -0.4e1 * t1 * t152;
    double t409 = t195 + 0.4e1 * t6 * t372 - 0.8e1 * t14 * t1 * t93 - t205 - 0.4e1 * t48 * t379 - 0.8e1 * t53 * t1 * t93 + phi * (t385 + t387) + (0.16e2 * phi * r * t1 - 0.4e1 * r * t223 * t6 + 0.4e1 * r * t235 * t48 + 0.4e1 * t14 * t329 + 0.4e1 * t329 * t53 + 0.4e1 * t371 * t6 - 0.4e1 * t378 * t48 + t219 - t232) * r;
    double t410 = t14 * r;
    double t411 = 0.2e1 * yc;
    double t412 = 0.2e1 * yrc;
    double t413 = t410 - t411 + t412;
    double t416 = 0.4e1 * t6 * r * t413;
    double t417 = 0.2e1 * r * t3;
    double t418 = t14 * t417;
    double t420 = 0.8e1 * t94;
    double t421 = t53 * r;
    double t422 = -t421 - t411 + t412;
    double t425 = 0.4e1 * t48 * r * t422;
    double t426 = t53 * t417;
    double t428 = 0.8e1 * t102;
    double t429 = 0.8e1 * t27;
    double t433 = phi * (0.8e1 * t3 * t3 - t104 + t429 + t73 - t74 + t75 + t76 - t77 + t78);
    double t437 = 0.4e1 * t7 * t27;
    double t438 = -0.2e1 * r * t3;
    double t440 = 0.4e1 * t6 * t438;
    double t441 = 0.2e1 * r * t1;
    double t443 = 0.4e1 * t14 * t441;
    double t445 = 0.4e1 * t49 * t27;
    double t447 = 0.4e1 * t48 * t438;
    double t449 = 0.4e1 * t53 * t441;
    double t452 = 0.8e1 * phi * t3 * t1;
    double t454 = (t437 + t440 - t443 - t445 - t447 - t449 + t452) * r;
    double t455 = t14 * t6;
    double t456 = t455 * t117;
    double t457 = 0.8e1 * t456;
    double t458 = t6 * t120;
    double t459 = t6 * t22;
    double t460 = t458 + t459;
    double t464 = t14 * t127;
    double t465 = 0.4e1 * t464;
    double t466 = t6 * t130;
    double t467 = 0.4e1 * t466;
    double t469 = 0.2e1 * t6 * t3 * t93;
    double t470 = 0.4e1 * t469;
    double t471 = t53 * t48;
    double t472 = t471 * t117;
    double t473 = 0.8e1 * t472;
    double t474 = t48 * t120;
    double t475 = t48 * t22;
    double t476 = t474 + t475;
    double t480 = t53 * t143;
    double t481 = 0.4e1 * t480;
    double t482 = t48 * t130;
    double t483 = 0.4e1 * t482;
    double t485 = 0.2e1 * t48 * t3 * t93;
    double t486 = 0.4e1 * t485;
    double t489 = 0.4e1 * t456;
    double t493 = 0.2e1 * t464;
    double t494 = 0.2e1 * t466;
    double t495 = 0.2e1 * t469;
    double t496 = 0.4e1 * t472;
    double t500 = 0.2e1 * t480;
    double t501 = 0.2e1 * t482;
    double t502 = 0.2e1 * t485;
    double t503 = -r * t460 * t6 - r * t476 * t48 + t151 + t154 + t489 - t493 - t494 + t495 - t496 + t500 - t501 + t502;
    double t508 = t14 * t438;
    double t514 = t53 * t438;
    double t522 = (-0.4e1 * t6 * r * t413 - 0.4e1 * t508 + 0.4e1 * t418 + t420 + 0.4e1 * t48 * r * t422 - 0.4e1 * t514 + 0.4e1 * t426 + t428 + phi * (-0.8e1 * t3 * t3 + t104 - t429 - t73 + t74 - t75 - t76 + t77 - t78)) * r;
    double t524 = 0.4e1 * t6 * t417;
    double t526 = 0.4e1 * t14 * t88;
    double t528 = 0.4e1 * t48 * t417;
    double t530 = 0.4e1 * t53 * t88;
    double t533 = -0.8e1 * phi * t3 * t1;
    double t535 = (-t437 + t524 - t526 + t445 - t528 - t530 + t533) * r;
    double t536 = 0.6e1 * yc;
    double t537 = 0.6e1 * yrc;
    double t538 = -t410 - t536 + t537;
    double t542 = t421 - t536 + t537;
    double t551 = (0.4e1 * t6 * r * t538 - t420 - 0.4e1 * t48 * r * t542 - t428 + phi * (0.8e1 * t1 * t1 - t104 + t429 + t73 - t74 + t75 + t76 - t77 + t78)) * r;
    double t552 = t455 * t44;
    double t553 = 0.8e1 * t552;
    double t554 = t458 - t459;
    double t558 = t14 * t198;
    double t559 = 0.4e1 * t558;
    double t561 = 0.2e1 * t6 * t1 * t93;
    double t562 = 0.4e1 * t561;
    double t563 = t471 * t44;
    double t564 = 0.8e1 * t563;
    double t565 = t474 - t475;
    double t569 = t53 * t207;
    double t570 = 0.4e1 * t569;
    double t572 = 0.2e1 * t48 * t1 * t93;
    double t573 = 0.4e1 * t572;
    double t576 = 0.4e1 * t552;
    double t580 = 0.2e1 * t558;
    double t581 = 0.2e1 * t561;
    double t582 = 0.4e1 * t563;
    double t586 = 0.2e1 * t569;
    double t587 = 0.2e1 * t572;
    double t591 = (-t437 + t524 + t443 + t445 - t528 + t449 + t533) * r;
    double t603 = (-0.4e1 * t6 * r * t538 + t420 + 0.4e1 * t48 * r * t542 + t428 + phi * (-0.8e1 * t1 * t1 + t104 - t429 - t73 + t74 - t75 - t76 + t77 - t78)) * r;
    double t604 = t12 * t27;
    double t605 = t7 * t604;
    double t606 = 0.2e1 * t605;
    double t607 = t7 * t253;
    double t608 = 0.2e1 * t607;
    double t609 = t49 * t604;
    double t610 = 0.2e1 * t609;
    double t611 = t49 * t253;
    double t612 = 0.2e1 * t611;
    double t613 = -t457 + t606 + t608 + t465 + t467 - t470 - t473 - t610 - t612 + t481 - t483 + t486;
    double t617 = t14 * t14;
    double t619 = t617 * t3 * t117;
    double t621 = t8 * t117;
    double t625 = t14 * t6 * t12 * t253;
    double t627 = t6 * t257;
    double t629 = t166 * t93;
    double t631 = t53 * t53;
    double t633 = t631 * t3 * t117;
    double t635 = t50 * t117;
    double t639 = t53 * t48 * t12 * t253;
    double t641 = t48 * t270;
    double t643 = t182 * t93;
    double t658 = (-0.4e1 * t619 + 0.4e1 * t621 + 0.3e1 * t625 + 0.2e1 * t627 + 0.2e1 * t629 - 0.4e1 * t633 + 0.4e1 * t635 - 0.3e1 * t639 + 0.2e1 * t641 - 0.2e1 * t643) * r;
    double t659 = t14 * t331;
    double t660 = 0.4e1 * t659;
    double t662 = -0.2e1 * t6 * t3 * t93;
    double t663 = 0.4e1 * t662;
    double t664 = t53 * t338;
    double t665 = 0.4e1 * t664;
    double t667 = -0.2e1 * t48 * t3 * t93;
    double t668 = 0.4e1 * t667;
    double t669 = t457 - t606 - t608 + t660 - t467 - t663 + t473 + t610 + t612 + t665 + t483 + t668;
    double t671 = t14 * t372;
    double t672 = 0.4e1 * t671;
    double t674 = -0.2e1 * t6 * t1 * t93;
    double t675 = 0.4e1 * t674;
    double t676 = t53 * t379;
    double t677 = 0.4e1 * t676;
    double t679 = -0.2e1 * t48 * t1 * t93;
    double t680 = 0.4e1 * t679;
    double t683 = t489 - t605 - t607 - t493 - t494 + t495 - t496 - t609 - t611 + t500 - t501 + t502 + t151 + t154;
    double t685 = t576 - t605 + t607 - t580 + t581 - t582 - t609 + t611 + t586 + t587 + t213 + t215;
    double t695 = 0.2e1 * t659;
    double t696 = 0.2e1 * t662;
    double t697 = 0.2e1 * t664;
    double t698 = 0.2e1 * t667;
    double t699 = -t489 + t605 + t607 - t695 + t494 + t696 + t496 + t609 + t611 + t697 + t501 + t698 + t344 + t346;
    double t701 = 0.2e1 * t671;
    double t702 = 0.2e1 * t674;
    double t703 = 0.2e1 * t676;
    double t704 = 0.2e1 * t679;
    double t705 = -t576 + t605 - t607 - t701 + t702 + t582 + t609 - t611 + t703 + t704 + t385 + t387;
    double t721 = r * t460 * t6 + r * t476 * t48 + t344 + t346 - t489 + t494 + t496 + t501 - t695 + t696 + t697 + t698;
    double t728 = (t437 + t440 + t526 - t445 - t447 + t530 + t452) * r;
    unknown[0][0] = t116;
    unknown[0][1] = t193;
    unknown[0][2] = t248;
    unknown[0][3] = t304;
    unknown[0][4] = t328;
    unknown[0][5] = t369;
    unknown[0][6] = t409;
    unknown[1][0] = t193;
    unknown[1][1] = (t416 - 0.8e1 * t418 - t420 - t425 - 0.8e1 * t426 - t428 + t433) * r;
    unknown[1][2] = t454;
    unknown[1][3] = (0.2e1 * r * t460 * t6 - 0.2e1 * r * t476 * t48 - t457 + t465 + t467 - t470 - t473 + t481 - t483 + t486) * r;
    unknown[1][4] = t503 * r;
    unknown[1][5] = t522;
    unknown[1][6] = t535;
    unknown[2][0] = t248;
    unknown[2][1] = t454;
    unknown[2][2] = t551;
    unknown[2][3] = (-0.2e1 * r * t48 * t565 + 0.2e1 * r * t554 * t6 - t553 + t559 - t562 - t564 + t570 + t573) * r;
    unknown[2][4] = (-r * t48 * t565 - r * t554 * t6 + t213 + t215 + t576 - t580 + t581 - t582 + t586 + t587) * r;
    unknown[2][5] = t591;
    unknown[2][6] = t603;
    unknown[3][0] = t304;
    unknown[3][1] = t613 * r;
    unknown[3][2] = (-t553 + t606 - t608 + t559 - t562 - t564 - t610 + t612 + t570 + t573) * r;
    unknown[3][3] = (0.8e1 * t619 - 0.8e1 * t621 - 0.6e1 * t625 - 0.4e1 * t627 - 0.4e1 * t629 - 0.8e1 * t633 + 0.8e1 * t635 - 0.6e1 * t639 + 0.4e1 * t641 - 0.4e1 * t643) * r;
    unknown[3][4] = t658;
    unknown[3][5] = t669 * r;
    unknown[3][6] = (t553 - t606 + t608 + t672 - t675 + t564 + t610 - t612 + t677 + t680) * r;
    unknown[4][0] = t328;
    unknown[4][1] = t683 * r;
    unknown[4][2] = t685 * r;
    unknown[4][3] = t658;
    unknown[4][4] = (0.2e1 * t619 - 0.2e1 * t621 - 0.3e1 / 0.2e1 * t625 - t627 - t629 - 0.2e1 * t633 + 0.2e1 * t635 - 0.3e1 / 0.2e1 * t639 + t641 - t643) * r;
    unknown[4][5] = t699 * r;
    unknown[4][6] = t705 * r;
    unknown[5][0] = t369;
    unknown[5][1] = t522;
    unknown[5][2] = t591;
    unknown[5][3] = (-0.2e1 * r * t460 * t6 + 0.2e1 * r * t476 * t48 + t457 - t467 + t473 + t483 + t660 - t663 + t665 + t668) * r;
    unknown[5][4] = t721 * r;
    unknown[5][5] = (t416 + 0.8e1 * t508 - t420 - t425 + 0.8e1 * t514 - t428 + t433) * r;
    unknown[5][6] = t728;
    unknown[6][0] = t409;
    unknown[6][1] = t535;
    unknown[6][2] = t603;
    unknown[6][3] = (0.2e1 * r * t48 * t565 - 0.2e1 * r * t554 * t6 + t553 + t564 + t672 - t675 + t677 + t680) * r;
    unknown[6][4] = (r * t48 * t565 + r * t554 * t6 + t385 + t387 - t576 + t582 - t701 + t702 + t703 + t704) * r;
    unknown[6][5] = t728;
    unknown[6][6] = t551;
    // @formatter:on

    MatrixXT hessian_maple = Eigen::Map<Eigen::MatrixXd>(&unknown[0][0], 7, 7);
    hess_CC += hessian_maple.bottomRightCorner(2, 2);
    MatrixXT hess_Cx_undistributed = hessian_maple.bottomLeftCorner(2, 5) * dpdx;
    MatrixXT hess_xx_undistributed = dpdx.transpose() * hessian_maple.topLeftCorner(5, 5) * dpdx;
    for (int j = 0; j < 5; j++) {
        hess_xx_undistributed += d2pdx2[j] * gradient_p(j);
    }

    VectorXi idx(5);
    idx << x0i, y0i, x1i, y1i, ri;
    for (int j = 0; j < 5; j++) {
        hess_Cx(0, idx(j)) += hess_Cx_undistributed(0, j);
        hess_Cx(1, idx(j)) += hess_Cx_undistributed(1, j);
        for (int k = 0; k < 5; k++) {
            hess_xx(idx(j), idx(k)) += hess_xx_undistributed(j, k);
        }
    }
}
