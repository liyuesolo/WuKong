#include "../../include/Boundary/BiArc.h"

void BiArc::getBiArcValues(const VectorXT &inputs, VectorXT &output) {
    double x0 = inputs(0);
    double y0 = inputs(1);
    double theta0 = inputs(2);
    double x1 = inputs(3);
    double y1 = inputs(4);
    double theta1 = inputs(5);

    VectorXT unknown(4);

    // @formatter:off
    double t2 = cos(theta0);
    double t3 = cos(theta1);
    double t5 = x0 - x1 + y0 - y1;
    double t6 = x0 - x1 - y0 + y1;
    double t7 = t6 * t5;
    double t8 = t2 * t2;
    double t10 = y0 - y1;
    double t12 = sin(theta0);
    double t13 = sin(theta1);
    double t14 = t12 + t13;
    double t15 = x0 - x1;
    double t16 = t15 * t14;
    double t21 = t3 * t3;
    double t23 = t14 * t10;
    double t24 = t15 * t3;
    double t27 = t15 * t15;
    double t31 = x0 * x0;
    double t33 = x1 * x0;
    double t35 = x1 * x1;
    double t37 = t10 * t10;
    double t40 = sqrt(t8 * t7 + 0.2e1 * t2 * (-t3 * t10 + t16) * t10 + t21 * t7 + 0.2e1 * t24 * t23 - 0.2e1 * t12 * t27 * t13 + 0.2e1 * t31 - 0.4e1 * t33 + 0.2e1 * t35 + 0.4e1 * t37);
    double t43 = x0 + x1;
    double t49 = t13 * t12;
    double t50 = t49 - 0.1e1;
    double t56 = 0.1e1 / (t3 * t2 + t49 - 0.1e1) / 0.4e1;
    double t58 = t13 - t12;
    double t61 = y0 + y1;
    double t63 = t15 * t58;
    double t72 = t2 * t15;
    double t73 = t10 * t12;
    double t76 = t10 * t13;
    double t78 = t15 * t50;
    double t81 = t58 * t10;
    double t88 = t3 * t21;
    double t90 = 0.2e1 * t33;
    double t91 = -t31 + t90 - t35 - t37;
    double t94 = t15 * t13;
    double t99 = t12 * t6 * t5 * t13;
    double t105 = t12 * t91 * t13 + t31 + t35 + 0.3e1 * t37 - t90;
    double t107 = t15 * t81;
    double t113 = -0.2e1 * t50 * t91;
    double t126 = t15 * t12;
    double t131 = t2 * t8;
    double t136 = (t49 - 0.1e1 / 0.2e1) * t10;
    double t143 = (t49 - 0.5e1 / 0.2e1) * t10;
    double t155 = t50 * t10;
    double t158 = 0.4e1 * t63;
    unknown[0] = t56 * (t40 * (-t2 + t3) - t8 * t15 + t2 * (0.2e1 * t3 * t43 - t23) + t15 * t21 + t3 * t23 + 0.2e1 * t43 * t50);
    unknown[1] = t56 * (t40 * t58 + t8 * t10 + t2 * (0.2e1 * t3 * t61 + t63) - t21 * t10 + t3 * t63 + 0.2e1 * t50 * t61);
    unknown[2] = 0.1e1 / (t40 * (0.2e1 * t21 * t2 * t12 + t3 * (-0.2e1 * t13 * t8 - t12 + t13) + t58 * t2) + t88 * (0.2e1 * t8 * t10 + 0.2e1 * t2 * t126 - y0 + y1) + t21 * (0.2e1 * t131 * t10 + 0.2e1 * t2 * t136 - 0.2e1 * t8 * t16 + t16) + 0.2e1 * t3 * t2 * (t2 * t143 + t8 * t94 - t63) - t131 * t10 - 0.3e1 * t8 * t15 * (t13 - t12 / 0.3e1) - 0.4e1 * t2 * t155 + t158) * (t40 * (t21 * (t72 - t73) + t3 * (t2 * t76 + t78) - t81) + t88 * (-0.2e1 * t15 * t73 + t7 * t2) + t21 * (0.2e1 * t94 * t10 * t2 + t8 * t91 + t37 + t99) + t3 * (t2 * t105 - t107) + t8 * t27 - t72 * t81 + t113);
    unknown[3] = 0.1e1 / (t40 * (0.2e1 * t13 * t3 * t8 + t2 * (-0.2e1 * t12 * t21 + t12 - t13) - t58 * t3) + t131 * (0.2e1 * t21 * t10 + 0.2e1 * t3 * t94 - y0 + y1) + t8 * (0.2e1 * t88 * t10 + 0.2e1 * t3 * t136 - 0.2e1 * t21 * t16 + t16) + 0.2e1 * t2 * t3 * (t21 * t126 + t3 * t143 + t63) - t88 * t10 + t21 * t15 * (t13 - 0.3e1 * t12) - 0.4e1 * t3 * t155 - t158) * (t40 * (t8 * (-t15 * t3 + t76) + t2 * (-t3 * t73 - t78) - t81) + t131 * (0.2e1 * t15 * t76 - t7 * t3) + t8 * (-t21 * t91 - 0.2e1 * t24 * t73 - t37 - t99) + t2 * (-t3 * t105 - t107) - t21 * t27 - t24 * t81 - t113);
    // @formatter:on

    output = unknown;
}

void BiArc::getBiArcGradient(const VectorXT &inputs, MatrixXT &output) {
    double x0 = inputs(0);
    double y0 = inputs(1);
    double theta0 = inputs(2);
    double x1 = inputs(3);
    double y1 = inputs(4);
    double theta1 = inputs(5);

    double unknown[4][6];

    // @formatter:off
    double t2 = cos(theta0);
    double t3 = cos(theta1);
    double t4 = -t2 + t3;
    double t5 = x0 - x1 + y0 - y1;
    double t6 = x0 - x1 - y0 + y1;
    double t7 = t6 * t5;
    double t8 = t2 * t2;
    double t10 = y0 - y1;
    double t11 = -t3 * t10;
    double t12 = sin(theta0);
    double t13 = sin(theta1);
    double t14 = t12 + t13;
    double t15 = x0 - x1;
    double t16 = t15 * t14;
    double t17 = t11 + t16;
    double t18 = t17 * t10;
    double t21 = t3 * t3;
    double t23 = t14 * t10;
    double t24 = t15 * t3;
    double t27 = t15 * t15;
    double t28 = t27 * t13;
    double t31 = x0 * x0;
    double t33 = x1 * x0;
    double t35 = x1 * x1;
    double t37 = t10 * t10;
    double t40 = sqrt(-0.2e1 * t12 * t28 + 0.2e1 * t2 * t18 + t21 * t7 + 0.2e1 * t24 * t23 + t8 * t7 + 0.2e1 * t31 - 0.4e1 * t33 + 0.2e1 * t35 + 0.4e1 * t37);
    double t41 = 0.1e1 / t40;
    double t42 = t41 * t4;
    double t43 = t8 * t6;
    double t44 = t8 * t5;
    double t47 = t21 * t6;
    double t48 = t21 * t5;
    double t49 = t3 * t23;
    double t50 = 0.2e1 * t49;
    double t51 = t15 * t13;
    double t53 = 0.4e1 * t12 * t51;
    double t54 = 0.4e1 * x0;
    double t55 = 0.4e1 * x1;
    double t56 = 0.2e1 * t2 * t23 + t43 + t44 + t47 + t48 + t50 - t53 + t54 - t55;
    double t59 = t3 * t2;
    double t60 = 0.2e1 * t59;
    double t61 = t13 * t12;
    double t62 = 0.2e1 * t61;
    double t64 = t59 + t61 - 0.1e1;
    double t65 = 0.1e1 / t64 / 0.4e1;
    double t69 = t3 * t10;
    double t70 = t2 * t69;
    double t76 = 0.2e1 * t3 * t16 + 0.2e1 * t17 * t2 + t43 - t44 + t47 - t48 - 0.2e1 * t70 + 0.8e1 * y0 - 0.8e1 * y1;
    double t80 = t14 * t3;
    double t84 = t2 * t12;
    double t87 = t8 * t15 * t10;
    double t89 = t10 * t2;
    double t90 = t24 * t89;
    double t92 = -t12 * t18 - t2 * t28 - t84 * t7 + t87 + t90;
    double t98 = t8 * t10;
    double t99 = x0 + x1;
    double t101 = 0.2e1 * t3 * t99 - t23;
    double t103 = t2 * t13;
    double t111 = t15 * t21;
    double t112 = t61 - 0.1e1;
    double t117 = pow(t64, -0.2e1) / 0.16e2;
    double t118 = t117 * (t2 * t101 + 0.2e1 * t99 * t112 - t8 * t15 + t40 * t4 + t111 + t49);
    double t119 = t3 * t12;
    double t120 = -t119 + t103;
    double t126 = -0.2e1 * t2 * t14 * t10 - t43 - t44 - t47 - t48 - t50 + t53 - t54 + t55;
    double t141 = t3 * t13;
    double t143 = t21 * t10;
    double t144 = t15 * t143;
    double t146 = t3 * t27;
    double t148 = t2 * (t10 * t13 + t24) * t10 - t141 * t7 + t144 - t51 * t23 - t12 * t146;
    double t155 = 0.2e1 * t3 * t51;
    double t163 = t13 - t12;
    double t164 = t41 * t163;
    double t167 = t163 * t2;
    double t168 = t163 * t3;
    double t180 = t8 * t15;
    double t181 = y0 + y1;
    double t183 = t15 * t163;
    double t184 = 0.2e1 * t3 * t181 + t183;
    double t186 = t2 * t15;
    double t195 = -t21 * t10;
    double t196 = t3 * t183;
    double t200 = t117 * (0.2e1 * t112 * t181 + t40 * t163 + t2 * t184 + t195 + t196 + t98);
    double t228 = t21 * t2;
    double t229 = t3 * t112;
    double t232 = t10 * t12;
    double t233 = t186 - t232;
    double t235 = t10 * t13;
    double t236 = t2 * t235;
    double t237 = t15 * t112;
    double t238 = t236 + t237;
    double t240 = t163 * t10;
    double t241 = t21 * t233 + t3 * t238 - t240;
    double t242 = t41 * t241;
    double t245 = t2 * t6;
    double t246 = t2 * t5;
    double t248 = t245 + t246 - 0.2e1 * t232;
    double t249 = t3 * t21;
    double t252 = 0.2e1 * t236;
    double t254 = t12 * t6 * t13;
    double t255 = t5 * t13;
    double t256 = t12 * t255;
    double t261 = 0.2e1 * x0;
    double t262 = 0.2e1 * x1;
    double t263 = -0.2e1 * t12 * t15 * t13 + t261 - t262;
    double t267 = 0.2e1 * t180;
    double t268 = t2 * t240;
    double t270 = 0.4e1 * t15 * t112;
    double t274 = t13 * t8;
    double t276 = -0.2e1 * t274 + t13 - t12;
    double t278 = 0.2e1 * t21 * t84 + t3 * t276 + t167;
    double t280 = 0.2e1 * t8 * t10;
    double t281 = t15 * t12;
    double t284 = 0.2e1 * t2 * t281 + t280 - y0 + y1;
    double t286 = t2 * t8;
    double t290 = t61 - 0.1e1 / 0.2e1;
    double t291 = t290 * t10;
    double t294 = 0.2e1 * t286 * t10 - 0.2e1 * t8 * t16 + 0.2e1 * t2 * t291 + t16;
    double t297 = t61 - 0.5e1 / 0.2e1;
    double t298 = t297 * t10;
    double t300 = t2 * t298 + t8 * t51 - t183;
    double t301 = t300 * t2;
    double t306 = t13 - t12 / 0.3e1;
    double t307 = t15 * t306;
    double t310 = t112 * t10;
    double t313 = 0.4e1 * t183;
    double t314 = -t286 * t10 - 0.4e1 * t2 * t310 + t21 * t294 + t249 * t284 + t40 * t278 + 0.2e1 * t3 * t301 - 0.3e1 * t8 * t307 + t313;
    double t315 = 0.1e1 / t314;
    double t321 = -0.2e1 * t15 * t232 + t7 * t2;
    double t323 = 0.2e1 * t33;
    double t324 = -t31 + t323 - t35 - t37;
    double t328 = t12 * t6;
    double t329 = t328 * t255;
    double t330 = t8 * t324 + 0.2e1 * t51 * t89 + t329 + t37;
    double t332 = -t324 * t13;
    double t335 = -t12 * t332 + t31 - t323 + t35 + 0.3e1 * t37;
    double t337 = t15 * t240;
    double t338 = t2 * t335 - t337;
    double t343 = -0.2e1 * t112 * t324;
    double t345 = t314 * t314;
    double t347 = 0.1e1 / t345 * (-t186 * t240 + t21 * t330 + t40 * t241 + t249 * t321 + t8 * t27 + t3 * t338 + t343);
    double t348 = t41 * t278;
    double t352 = 0.2e1 * t249 * t84;
    double t355 = -0.2e1 * t8 * t14 + t12 + t13;
    double t357 = t274 - t13 + t12;
    double t362 = 0.3e1 * t8 * t306;
    double t363 = 0.4e1 * t13;
    double t364 = 0.4e1 * t12;
    double t368 = t12 * t21;
    double t370 = t3 * t103 + t12 - t13 - t368;
    double t375 = t245 - t246 - 0.2e1 * t281;
    double t378 = t13 * t186;
    double t379 = 0.2e1 * t378;
    double t380 = 0.2e1 * y0;
    double t381 = 0.2e1 * y1;
    double t386 = 0.6e1 * y0;
    double t387 = 0.6e1 * y1;
    double t388 = -0.2e1 * t12 * t10 * t13 + t386 - t387;
    double t392 = t2 * t183;
    double t394 = 0.4e1 * t112 * t10;
    double t400 = 0.2e1 * t8 - 0.1e1;
    double t403 = t2 * t290 + t286;
    double t407 = 0.2e1 * t3 * t297 * t8;
    double t408 = t2 * t112;
    double t409 = 0.4e1 * t408;
    double t415 = t12 * t235;
    double t423 = t15 * t89;
    double t431 = 0.2e1 * t51 * t232;
    double t432 = t245 * t255;
    double t444 = 0.2e1 * t2 * t332;
    double t448 = 0.2e1 * t21 * t8;
    double t449 = t12 * t12;
    double t468 = t15 * t286;
    double t472 = t13 * t98;
    double t496 = 0.4e1 * t186;
    double t497 = t40 * (t448 - 0.2e1 * t21 * t449 + t3 * (0.4e1 * t12 * t103 - t2) - t163 * t12 - t8) + t92 * t348 + 0.2e1 * t249 * (-0.2e1 * t12 * t10 * t2 - t449 * t15 + t180) + t21 * (-0.3e1 * t12 * t280 - 0.2e1 * t12 * t291 + 0.4e1 * t84 * t16 + t186 - 0.2e1 * t468 + 0.2e1 * t472) - 0.2e1 * t3 * t300 * t12 + 0.2e1 * t3 * (-t12 * t298 - 0.2e1 * t84 * t51 + t186 + t472) * t2 + 0.3e1 * t12 * t8 * t10 + t468 + 0.6e1 * t84 * t307 - 0.4e1 * t472 + 0.4e1 * t12 * t310 - t496;
    double t511 = 0.2e1 * t12 * t15 * t13 - t261 + t262;
    double t516 = -0.4e1 * t15 * t112;
    double t536 = 0.2e1 * t12 * t10 * t13 - t386 + t387;
    double t541 = -0.4e1 * t112 * t10;
    double t554 = t15 * t119;
    double t565 = 0.2e1 * t90;
    double t566 = t3 * t5;
    double t567 = t328 * t566;
    double t573 = -t324 * t3;
    double t575 = t15 * t69;
    double t580 = 0.2e1 * t12 * t573;
    double t584 = 0.4e1 * t141 * t84;
    double t585 = t3 * t8;
    double t597 = t8 * t24;
    double t599 = t84 * t69;
    double t614 = 0.4e1 * t24;
    double t622 = -t15 * t3 + t235;
    double t624 = t3 * t232;
    double t625 = -t624 - t237;
    double t627 = t2 * t625 + t8 * t622 - t240;
    double t628 = t41 * t627;
    double t631 = t6 * t3;
    double t633 = -t631 - t566 + 0.2e1 * t235;
    double t636 = 0.2e1 * t624;
    double t642 = 0.2e1 * t111;
    double t643 = t3 * t240;
    double t648 = -0.2e1 * t368 - t13 + t12;
    double t650 = 0.2e1 * t13 * t585 + t2 * t648 - t168;
    double t652 = 0.2e1 * t21 * t10;
    double t653 = t652 + t155 + y1 - y0;
    double t660 = 0.2e1 * t249 * t10 - 0.2e1 * t21 * t16 + 0.2e1 * t3 * t291 + t16;
    double t664 = t21 * t281 + t3 * t298 + t183;
    double t665 = t3 * t664;
    double t670 = t13 - 0.3e1 * t12;
    double t671 = t15 * t670;
    double t675 = -t249 * t10 + 0.2e1 * t2 * t665 + t21 * t671 + t286 * t653 - 0.4e1 * t3 * t310 + t40 * t650 + t8 * t660 - t313;
    double t676 = 0.1e1 / t675;
    double t682 = 0.2e1 * t15 * t235 - t7 * t3;
    double t684 = -t21 * t324;
    double t687 = -0.2e1 * t24 * t232 - t329 - t37 + t684;
    double t690 = -t3 * t335 - t337;
    double t695 = t675 * t675;
    double t697 = 0.1e1 / t695 * (t2 * t690 - t21 * t27 - t24 * t240 + t286 * t682 + t40 * t627 + t8 * t687 - t343);
    double t698 = t41 * t650;
    double t702 = 0.2e1 * t286 * t141;
    double t705 = -0.2e1 * t21 * t14 + t12 + t13;
    double t707 = t368 + t13 - t12;
    double t711 = t21 * t670;
    double t716 = -t2 * t119 + t12 - t13 + t274;
    double t721 = -t631 + t566 + 0.2e1 * t51;
    double t723 = 0.2e1 * t554;
    double t734 = 0.2e1 * t21 - 0.1e1;
    double t737 = t3 * t290 + t249;
    double t741 = 0.2e1 * t2 * t21 * t297;
    double t742 = 0.4e1 * t229;
    double t781 = t21 * t186;
    double t783 = t141 * t89;
    double t868 = t13 * t13;
    double t887 = t15 * t249;
    double t891 = t12 * t143;
    double t914 = t40 * (-0.2e1 * t868 * t8 + t448 + t2 * (0.4e1 * t13 * t119 - t3) + t163 * t13 - t21) + t148 * t698 + 0.2e1 * t286 * (-0.2e1 * t13 * t3 * t10 - t868 * t15 + t111) + t8 * (-0.2e1 * t13 * t291 - 0.3e1 * t13 * t652 + 0.4e1 * t141 * t16 + t24 - 0.2e1 * t887 + 0.2e1 * t891) + 0.2e1 * t2 * t3 * (-t13 * t298 - 0.2e1 * t141 * t281 + t24 + t891) - 0.2e1 * t2 * t13 * t664 - 0.3e1 * t13 * t195 + t887 - 0.2e1 * t141 * t671 - 0.4e1 * t891 + 0.4e1 * t13 * t310 - t614;
    unknown[0][0] = t65 * (t56 * t42 / 0.2e1 - t8 + t60 + t21 + t62 - 0.2e1);
    unknown[0][1] = t65 * (t76 * t42 / 0.2e1 - t2 * t14 + t80);
    unknown[0][2] = t65 * (0.2e1 * t12 * t2 * t15 - t12 * t101 + 0.2e1 * t99 * t103 + t40 * t12 + t92 * t42 + t70 - t98) - 0.4e1 * t120 * t118;
    unknown[0][3] = t65 * (t126 * t42 / 0.2e1 + t8 + t60 - t21 + t62 - 0.2e1);
    unknown[0][4] = t65 * (-t76 * t42 / 0.2e1 + t2 * t14 - t80);
    unknown[0][5] = t65 * (-t40 * t13 + t148 * t42 + t2 * (-0.2e1 * t13 * t99 - t69) - t155 + t143 - t13 * t23 + 0.2e1 * t99 * t119) + 0.4e1 * t120 * t118;
    unknown[1][0] = t65 * (t56 * t164 / 0.2e1 + t167 + t168);
    unknown[1][1] = t65 * (t76 * t164 / 0.2e1 + t8 + t60 - t21 + t62 - 0.2e1);
    unknown[1][2] = t65 * (0.2e1 * t13 * t2 * t181 - t12 * t184 - 0.2e1 * t12 * t89 + t92 * t164 - t3 * t186 - t40 * t2 - t180) - 0.4e1 * t120 * t200;
    unknown[1][3] = t65 * (t126 * t164 / 0.2e1 - t163 * t2 - t168);
    unknown[1][4] = t65 * (-t76 * t164 / 0.2e1 - t8 + t60 + t21 + t62 - 0.2e1);
    unknown[1][5] = t65 * (t40 * t3 + t148 * t164 + t2 * (-0.2e1 * t13 * t181 + t24) - 0.2e1 * t13 * t11 + t111 - t13 * t183 + 0.2e1 * t12 * t3 * t181) + 0.4e1 * t120 * t200;
    unknown[2][0] = t315 * (t40 * (t228 + t229) + t56 * t242 / 0.2e1 + t249 * t248 + t21 * (-0.2e1 * t8 * t15 + t252 + t254 + t256) + t3 * (t2 * t263 - t240) + t267 - t268 + t270) - (t56 * t348 / 0.2e1 + t352 + t21 * t355 + 0.2e1 * t3 * t357 * t2 - t362 + t363 - t364) * t347;
    unknown[2][1] = t315 * (t40 * t370 + t76 * t242 / 0.2e1 + t249 * t375 + t21 * (-0.2e1 * t8 * t10 + t254 - t256 + t379 + t380 - t381) + t3 * (t2 * t388 - t183) - t392 + t394) - (t76 * t348 / 0.2e1 + t249 * t400 + 0.2e1 * t21 * t403 + t407 - t286 - t409) * t347;
    unknown[2][2] = t315 * (t40 * (t21 * (-t281 - t89) + t3 * (-t415 + t378) + t89) + t92 * t242 + t249 * (-t12 * t7 - 0.2e1 * t423) + t21 * (-0.2e1 * t12 * t2 * t324 - t431 + t432) + t3 * (-t12 * t335 - t8 * t332 + t423) - 0.2e1 * t12 * t2 * t27 + t87 + t281 * t240 + t444) - t497 * t347;
    unknown[2][3] = t315 * (t40 * (-t3 * t112 - t228) + t126 * t242 / 0.2e1 - t249 * t248 + t21 * (0.2e1 * t8 * t15 - t252 - t254 - t256) + t3 * (t2 * t511 + t240) - t267 + t268 + t516) - (t126 * t348 / 0.2e1 - t352 - t21 * t355 - 0.2e1 * t3 * t357 * t2 + t362 + t364 - t363) * t347;
    unknown[2][4] = t315 * (-t40 * t370 - t76 * t242 / 0.2e1 - t249 * t375 + t21 * (t280 - t379 - t254 + t256 + t381 - t380) + t3 * (t2 * t536 + t183) + t392 + t541) - (-t76 * t348 / 0.2e1 - t249 * t400 - 0.2e1 * t21 * t403 - t407 + t286 + t409) * t347;
    unknown[2][5] = t315 * (t40 * (-0.2e1 * t13 * t3 * t233 + t3 * (t70 + t554) - t13 * t238 - t69) + t148 * t242 - 0.3e1 * t13 * t21 * t321 + t21 * (t565 + t567) - 0.2e1 * t13 * t3 * t330 + t3 * (-t84 * t573 - t575) - t13 * t338 - t90 + t580) - (t40 * (-t584 + t3 * (-0.2e1 * t585 + t3) - t13 * t276 + t59) + t148 * t348 - 0.3e1 * t13 * t21 * t284 + t21 * (-0.2e1 * t597 + 0.2e1 * t599 + t24) - 0.2e1 * t13 * t3 * t294 + 0.2e1 * t3 * (t597 + t599 - t24) * t2 - 0.2e1 * t13 * t301 - 0.3e1 * t597 - 0.4e1 * t599 + t614) * t347;
    unknown[3][0] = t676 * (t40 * (-t2 * t112 - t585) + t56 * t628 / 0.2e1 + t286 * t633 + t8 * (0.2e1 * t15 * t21 - t254 - t256 - t636) + t2 * (-t3 * t263 - t240) - t642 - t643 - t270) - (t56 * t698 / 0.2e1 + t702 + t8 * t705 + 0.2e1 * t2 * t3 * t707 + t711 - t363 + t364) * t697;
    unknown[3][1] = t676 * (t40 * t716 + t76 * t628 / 0.2e1 + t286 * t721 + t8 * (t652 - t723 - t254 + t256 - t380 + t381) + t2 * (-t3 * t388 - t183) - t196 - t394) - (t76 * t698 / 0.2e1 + t286 * t734 + 0.2e1 * t8 * t737 + t741 - t249 - t742) * t697;
    unknown[3][2] = t676 * (t40 * (-0.2e1 * t12 * t2 * t622 + t2 * (-t70 - t378) - t12 * t625 + t89) + t92 * t628 - 0.3e1 * t12 * t8 * t682 + t8 * (-t565 - t432) - 0.2e1 * t12 * t2 * t687 + t2 * (t59 * t332 + t423) - t12 * t690 + t90 - t444) - (t40 * (-t584 + t2 * (-0.2e1 * t228 + t2) - t12 * t648 + t59) + t92 * t698 - 0.3e1 * t12 * t8 * t653 + t8 * (-0.2e1 * t781 + 0.2e1 * t783 + t186) - 0.2e1 * t12 * t2 * t660 + 0.2e1 * t2 * t3 * (t781 + t783 - t186) - 0.2e1 * t12 * t665 - 0.3e1 * t781 - 0.4e1 * t783 + t496) * t697;
    unknown[3][3] = t676 * (t40 * (t585 + t408) + t126 * t628 / 0.2e1 - t286 * t633 + t8 * (-0.2e1 * t15 * t21 + t254 + t256 + t636) + t2 * (-t3 * t511 + t240) + t642 + t643 - t516) - (t126 * t698 / 0.2e1 - t702 - t8 * t705 - 0.2e1 * t2 * t3 * t707 - t711 - t364 + t363) * t697;
    unknown[3][4] = t676 * (-t40 * t716 - t76 * t628 / 0.2e1 - t286 * t721 + t8 * (-0.2e1 * t21 * t10 + t254 - t256 + t380 - t381 + t723) + t2 * (-t3 * t536 + t183) + t196 - t541) - (-t76 * t698 / 0.2e1 - t286 * t734 - 0.2e1 * t8 * t737 - t741 + t249 + t742) * t697;
    unknown[3][5] = t676 * (t40 * (t8 * (t15 * t13 + t69) + t2 * (t415 - t554) - t69) + t148 * t628 + t286 * (t13 * t7 + 0.2e1 * t575) + t8 * (-0.2e1 * t13 * t573 + t431 - t567) + t2 * (t12 * t684 + t13 * t335 - t575) + 0.2e1 * t13 * t146 - t144 + t51 * t240 - t580) - t914 * t697;
    // @formatter:on

    output = Eigen::Map<Eigen::MatrixXd>(&unknown[0][0], 6, 4).transpose();
}

void BiArc::getBiArcHessian(const VectorXT &inputs, std::vector<MatrixXT> &output) {
    double x0 = inputs(0);
    double y0 = inputs(1);
    double theta0 = inputs(2);
    double x1 = inputs(3);
    double y1 = inputs(4);
    double theta1 = inputs(5);

    output.resize(4);
    double unknown[6][6];

    // @formatter:off
    {
        double t2 = x1 - x0;
        double t3 = cos(theta0);
        double t4 = cos(theta1);
        double t5 = t3 + t4;
        double t6 = t5 * t2;
        double t7 = y1 - y0;
        double t8 = sin(theta0);
        double t9 = sin(theta1);
        double t10 = t8 + t9;
        double t11 = t10 * t7;
        double t12 = t6 + t11;
        double t13 = t12 * t12;
        double t14 = t4 * t3;
        double t15 = t9 * t8;
        double t16 = 0.1e1 - t14 - t15;
        double t17 = t2 * t2;
        double t18 = t7 * t7;
        double t19 = t17 + t18;
        double t21 = 0.2e1 * t19 * t16 + t13;
        double t22 = sqrt(t21);
        double t24 = 0.1e1 / t22 / t21;
        double t28 = -0.2e1 * t5 * t12 - 0.4e1 * t2 * t16;
        double t29 = t28 * t28;
        double t32 = 0.1e1 / t22;
        double t33 = t5 * t5;
        double t35 = 0.4e1 * t14;
        double t36 = 0.4e1 * t15;
        double t39 = (0.2e1 * t33 + 0.4e1 - t35 - t36) * t32 / 0.2e1;
        double t41 = 0.1e1 / t16 / 0.2e1;
        double t43 = t3 - t4;
        double t46 = t28 * t24;
        double t50 = -0.2e1 * t10 * t12 - 0.4e1 * t7 * t16;
        double t53 = -t10 * t32;
        double t58 = t43 * t41 * (-t50 * t46 / 0.4e1 - t5 * t53) / 0.2e1;
        double t59 = t8 * t2;
        double t60 = t3 * t7;
        double t61 = -t59 + t60;
        double t66 = -t9 * t3 + t8 * t4;
        double t68 = 0.2e1 * t61 * t12 + 0.2e1 * t19 * t66;
        double t74 = 0.2e1 * t8 * t12;
        double t75 = -0.4e1 * t2 * t66;
        double t84 = t3 + t4 + t28 * t32 / 0.2e1;
        double t85 = 0.4e1 * t16 * t16;
        double t86 = 0.1e1 / t85;
        double t87 = t86 * t84;
        double t88 = 0.2e1 * t66 * t43;
        double t90 = t41 * t84;
        double t92 = t43 * t41 * (-t8 - t68 * t46 / 0.4e1 + (-0.2e1 * t5 * t61 + t74 + t75) * t32 / 0.2e1) - t88 * t87 - t8 * t90;
        double t96 = 0.2e1 * t5 * t12 + 0.4e1 * t2 * t16;
        double t107 = t43 * t41 * (-t96 * t46 / 0.4e1 + (-0.2e1 * t5 * t5 + t35 + t36 - 0.4e1) * t32 / 0.2e1) / 0.2e1;
        double t111 = 0.2e1 * t10 * t12 + 0.4e1 * t7 * t16;
        double t114 = t10 * t32;
        double t119 = t43 * t41 * (-t111 * t46 / 0.4e1 - t5 * t114) / 0.2e1;
        double t120 = t9 * t2;
        double t121 = t4 * t7;
        double t122 = -t120 + t121;
        double t126 = 0.2e1 * t122 * t12 - 0.2e1 * t19 * t66;
        double t132 = 0.2e1 * t9 * t12;
        double t133 = 0.4e1 * t2 * t66;
        double t140 = -0.2e1 * t66 * t43;
        double t143 = t43 * t41 * (-t9 - t126 * t46 / 0.4e1 + (-0.2e1 * t5 * t122 + t132 + t133) * t32 / 0.2e1) - t140 * t87 + t9 * t90;
        double t144 = t50 * t50;
        double t147 = t10 * t10;
        double t151 = (0.2e1 * t147 + 0.4e1 - t35 - t36) * t32 / 0.2e1;
        double t156 = t50 * t24;
        double t162 = 0.2e1 * t3 * t12;
        double t163 = -0.4e1 * t7 * t66;
        double t172 = t8 + t9 + t50 * t32 / 0.2e1;
        double t173 = t86 * t172;
        double t175 = t41 * t172;
        double t177 = t43 * t41 * (t3 - t68 * t156 / 0.4e1 + (-0.2e1 * t10 * t61 - t162 + t163) * t32 / 0.2e1) - t88 * t173 - t8 * t175;
        double t184 = t43 * t41 * (-t96 * t156 / 0.4e1 + t5 * t53) / 0.2e1;
        double t195 = t43 * t41 * (-t111 * t156 / 0.4e1 + (-0.2e1 * t10 * t10 + t35 + t36 - 0.4e1) * t32 / 0.2e1) / 0.2e1;
        double t201 = 0.2e1 * t4 * t12;
        double t202 = 0.4e1 * t7 * t66;
        double t211 = t43 * t41 * (t4 - t126 * t156 / 0.4e1 + (-0.2e1 * t10 * t122 - t201 + t202) * t32 / 0.2e1) - t140 * t173 + t9 * t175;
        double t212 = t3 * t2;
        double t213 = t8 * t7;
        double t214 = t68 * t68;
        double t217 = t61 * t61;
        double t222 = t14 + t15;
        double t223 = 0.2e1 * t19 * t222;
        double t233 = t59 - t60 + t68 * t32 / 0.2e1;
        double t234 = t86 * t233;
        double t236 = t41 * t233;
        double t238 = -t6 - t11 + t22;
        double t242 = 0.1e1 / t16 / t85 * t238 / 0.2e1;
        double t245 = 0.4e1 * t66 * t66 * t43 * t242;
        double t246 = t86 * t238;
        double t251 = t222 * t43 * t246;
        double t252 = t41 * t238;
        double t256 = t68 * t24;
        double t269 = -t3 - t4 + t96 * t32 / 0.2e1;
        double t270 = t86 * t269;
        double t272 = t41 * t269;
        double t274 = t43 * t41 * (t8 - t96 * t256 / 0.4e1 + (0.2e1 * t5 * t61 + t133 - t74) * t32 / 0.2e1) - t88 * t270 - t8 * t272;
        double t287 = -t8 - t9 + t111 * t32 / 0.2e1;
        double t288 = t86 * t287;
        double t290 = t41 * t287;
        double t292 = t43 * t41 * (-t3 - t111 * t256 / 0.4e1 + (0.2e1 * t10 * t61 + t162 + t202) * t32 / 0.2e1) - t88 * t288 - t8 * t290;
        double t311 = t120 - t121 + t126 * t32 / 0.2e1;
        double t312 = t86 * t311;
        double t323 = t41 * t311;
        double t329 = t43 * t41 * (-t126 * t256 / 0.4e1 + (0.2e1 * t61 * t122 - 0.2e1 * t19 * t222) * t32 / 0.2e1) / 0.2e1 - t140 * t234 / 0.2e1 + t9 * t236 / 0.2e1 - t88 * t312 / 0.2e1 - 0.2e1 * t66 * t88 * t242 - t66 * t9 * t246 + t222 * t43 * t246 - t8 * t323 / 0.2e1 - t66 * t8 * t246;
        double t330 = t96 * t96;
        double t337 = t96 * t24;
        double t344 = t43 * t41 * (-t111 * t337 / 0.4e1 + t5 * t114) / 0.2e1;
        double t357 = t43 * t41 * (t9 - t126 * t337 / 0.4e1 + (0.2e1 * t5 * t122 - t132 + t75) * t32 / 0.2e1) - t140 * t270 + t9 * t272;
        double t358 = t111 * t111;
        double t378 = t43 * t41 * (-t4 - t126 * t111 * t24 / 0.4e1 + (0.2e1 * t10 * t122 + t163 + t201) * t32 / 0.2e1) - t140 * t288 + t9 * t290;
        double t379 = t4 * t2;
        double t380 = t9 * t7;
        double t381 = t126 * t126;
        double t384 = t122 * t122;
        unknown[0][0] = t43 * t41 * (-t29 * t24 / 0.4e1 + t39) / 0.2e1;
        unknown[0][1] = t58;
        unknown[0][2] = t92 / 0.2e1;
        unknown[0][3] = t107;
        unknown[0][4] = t119;
        unknown[0][5] = t143 / 0.2e1;
        unknown[1][0] = t58;
        unknown[1][1] = t43 * t41 * (-t144 * t24 / 0.4e1 + t151) / 0.2e1;
        unknown[1][2] = t177 / 0.2e1;
        unknown[1][3] = t184;
        unknown[1][4] = t195;
        unknown[1][5] = t211 / 0.2e1;
        unknown[2][0] = t92 / 0.2e1;
        unknown[2][1] = t177 / 0.2e1;
        unknown[2][2] = t43 * t41 * (t212 + t213 - t214 * t24 / 0.4e1 + (0.2e1 * t217 + 0.2e1 * (-t212 - t213) * t12 + t223) * t32 / 0.2e1) / 0.2e1 - t88 * t234 - t8 * t236 + t245 + 0.2e1 * t66 * t8 * t246 - t251 - t3 * t252 / 0.2e1;
        unknown[2][3] = t274 / 0.2e1;
        unknown[2][4] = t292 / 0.2e1;
        unknown[2][5] = t329;
        unknown[3][0] = t107;
        unknown[3][1] = t184;
        unknown[3][2] = t274 / 0.2e1;
        unknown[3][3] = t43 * t41 * (-t330 * t24 / 0.4e1 + t39) / 0.2e1;
        unknown[3][4] = t344;
        unknown[3][5] = t357 / 0.2e1;
        unknown[4][0] = t119;
        unknown[4][1] = t195;
        unknown[4][2] = t292 / 0.2e1;
        unknown[4][3] = t344;
        unknown[4][4] = t43 * t41 * (-t358 * t24 / 0.4e1 + t151) / 0.2e1;
        unknown[4][5] = t378 / 0.2e1;
        unknown[5][0] = t143 / 0.2e1;
        unknown[5][1] = t211 / 0.2e1;
        unknown[5][2] = t329;
        unknown[5][3] = t357 / 0.2e1;
        unknown[5][4] = t378 / 0.2e1;
        unknown[5][5] = t43 * t41 * (t379 + t380 - t381 * t24 / 0.4e1 + (0.2e1 * t384 + 0.2e1 * (-t379 - t380) * t12 + t223) * t32 / 0.2e1) / 0.2e1 - t140 * t312 + t9 * t323 + t245 + 0.2e1 * t66 * t9 * t246 - t251 + t4 * t252 / 0.2e1;

        output[0] = Eigen::Map<Eigen::MatrixXd>(&unknown[0][0], 6, 6);
    }

    {
        double t2 = x1 - x0;
        double t3 = cos(theta0);
        double t4 = cos(theta1);
        double t5 = t3 + t4;
        double t6 = t5 * t2;
        double t7 = y1 - y0;
        double t8 = sin(theta0);
        double t9 = sin(theta1);
        double t10 = t8 + t9;
        double t11 = t10 * t7;
        double t12 = t6 + t11;
        double t13 = t12 * t12;
        double t14 = t4 * t3;
        double t15 = t9 * t8;
        double t16 = 0.1e1 - t14 - t15;
        double t17 = t2 * t2;
        double t18 = t7 * t7;
        double t19 = t17 + t18;
        double t21 = 0.2e1 * t19 * t16 + t13;
        double t22 = sqrt(t21);
        double t24 = 0.1e1 / t22 / t21;
        double t28 = -0.2e1 * t5 * t12 - 0.4e1 * t2 * t16;
        double t29 = t28 * t28;
        double t32 = 0.1e1 / t22;
        double t33 = t5 * t5;
        double t35 = 0.4e1 * t14;
        double t36 = 0.4e1 * t15;
        double t39 = (0.2e1 * t33 + 0.4e1 - t35 - t36) * t32 / 0.2e1;
        double t41 = 0.1e1 / t16 / 0.2e1;
        double t43 = t8 - t9;
        double t46 = t28 * t24;
        double t50 = -0.2e1 * t10 * t12 - 0.4e1 * t7 * t16;
        double t53 = -t10 * t32;
        double t58 = t43 * t41 * (-t50 * t46 / 0.4e1 - t5 * t53) / 0.2e1;
        double t59 = t8 * t2;
        double t60 = t3 * t7;
        double t61 = -t59 + t60;
        double t66 = -t9 * t3 + t8 * t4;
        double t68 = 0.2e1 * t61 * t12 + 0.2e1 * t19 * t66;
        double t74 = 0.2e1 * t8 * t12;
        double t75 = -0.4e1 * t2 * t66;
        double t84 = t3 + t4 + t28 * t32 / 0.2e1;
        double t85 = 0.4e1 * t16 * t16;
        double t86 = 0.1e1 / t85;
        double t87 = t86 * t84;
        double t88 = 0.2e1 * t66 * t43;
        double t90 = t41 * t84;
        double t92 = t43 * t41 * (-t8 - t68 * t46 / 0.4e1 + (-0.2e1 * t5 * t61 + t74 + t75) * t32 / 0.2e1) - t88 * t87 + t3 * t90;
        double t96 = 0.2e1 * t5 * t12 + 0.4e1 * t2 * t16;
        double t107 = t43 * t41 * (-t96 * t46 / 0.4e1 + (-0.2e1 * t5 * t5 + t35 + t36 - 0.4e1) * t32 / 0.2e1) / 0.2e1;
        double t111 = 0.2e1 * t10 * t12 + 0.4e1 * t7 * t16;
        double t114 = t10 * t32;
        double t119 = t43 * t41 * (-t111 * t46 / 0.4e1 - t5 * t114) / 0.2e1;
        double t120 = t9 * t2;
        double t121 = t4 * t7;
        double t122 = -t120 + t121;
        double t126 = 0.2e1 * t122 * t12 - 0.2e1 * t19 * t66;
        double t132 = 0.2e1 * t9 * t12;
        double t133 = 0.4e1 * t2 * t66;
        double t140 = -0.2e1 * t66 * t43;
        double t143 = t43 * t41 * (-t9 - t126 * t46 / 0.4e1 + (-0.2e1 * t5 * t122 + t132 + t133) * t32 / 0.2e1) - t140 * t87 - t4 * t90;
        double t144 = t50 * t50;
        double t147 = t10 * t10;
        double t151 = (0.2e1 * t147 + 0.4e1 - t35 - t36) * t32 / 0.2e1;
        double t156 = t50 * t24;
        double t162 = 0.2e1 * t3 * t12;
        double t163 = -0.4e1 * t7 * t66;
        double t172 = t8 + t9 + t50 * t32 / 0.2e1;
        double t173 = t86 * t172;
        double t175 = t41 * t172;
        double t177 = t43 * t41 * (t3 - t68 * t156 / 0.4e1 + (-0.2e1 * t10 * t61 - t162 + t163) * t32 / 0.2e1) - t88 * t173 + t3 * t175;
        double t184 = t43 * t41 * (-t96 * t156 / 0.4e1 + t5 * t53) / 0.2e1;
        double t195 = t43 * t41 * (-t111 * t156 / 0.4e1 + (-0.2e1 * t10 * t10 + t35 + t36 - 0.4e1) * t32 / 0.2e1) / 0.2e1;
        double t201 = 0.2e1 * t4 * t12;
        double t202 = 0.4e1 * t7 * t66;
        double t211 = t43 * t41 * (t4 - t126 * t156 / 0.4e1 + (-0.2e1 * t10 * t122 - t201 + t202) * t32 / 0.2e1) - t140 * t173 - t4 * t175;
        double t212 = t3 * t2;
        double t213 = t8 * t7;
        double t214 = t68 * t68;
        double t217 = t61 * t61;
        double t222 = t14 + t15;
        double t223 = 0.2e1 * t19 * t222;
        double t233 = t59 - t60 + t68 * t32 / 0.2e1;
        double t234 = t86 * t233;
        double t236 = t41 * t233;
        double t238 = -t6 - t11 + t22;
        double t242 = 0.1e1 / t16 / t85 * t238 / 0.2e1;
        double t245 = 0.4e1 * t66 * t66 * t43 * t242;
        double t246 = t86 * t238;
        double t251 = t222 * t43 * t246;
        double t252 = t41 * t238;
        double t256 = t68 * t24;
        double t269 = -t3 - t4 + t96 * t32 / 0.2e1;
        double t270 = t86 * t269;
        double t272 = t41 * t269;
        double t274 = t43 * t41 * (t8 - t96 * t256 / 0.4e1 + (0.2e1 * t5 * t61 + t133 - t74) * t32 / 0.2e1) - t88 * t270 + t3 * t272;
        double t287 = -t8 - t9 + t111 * t32 / 0.2e1;
        double t288 = t86 * t287;
        double t290 = t41 * t287;
        double t292 = t43 * t41 * (-t3 - t111 * t256 / 0.4e1 + (0.2e1 * t10 * t61 + t162 + t202) * t32 / 0.2e1) - t88 * t288 + t3 * t290;
        double t311 = t120 - t121 + t126 * t32 / 0.2e1;
        double t312 = t86 * t311;
        double t323 = t41 * t311;
        double t329 = t43 * t41 * (-t126 * t256 / 0.4e1 + (0.2e1 * t61 * t122 - 0.2e1 * t19 * t222) * t32 / 0.2e1) / 0.2e1 - t140 * t234 / 0.2e1 - t4 * t236 / 0.2e1 - t88 * t312 / 0.2e1 - 0.2e1 * t66 * t88 * t242 + t66 * t4 * t246 + t222 * t43 * t246 + t3 * t323 / 0.2e1 + t66 * t3 * t246;
        double t330 = t96 * t96;
        double t337 = t96 * t24;
        double t344 = t43 * t41 * (-t111 * t337 / 0.4e1 + t5 * t114) / 0.2e1;
        double t357 = t43 * t41 * (t9 - t126 * t337 / 0.4e1 + (0.2e1 * t5 * t122 - t132 + t75) * t32 / 0.2e1) - t140 * t270 - t4 * t272;
        double t358 = t111 * t111;
        double t378 = t43 * t41 * (-t4 - t126 * t111 * t24 / 0.4e1 + (0.2e1 * t10 * t122 + t163 + t201) * t32 / 0.2e1) - t140 * t288 - t4 * t290;
        double t379 = t4 * t2;
        double t380 = t9 * t7;
        double t381 = t126 * t126;
        double t384 = t122 * t122;
        unknown[0][0] = t43 * t41 * (-t29 * t24 / 0.4e1 + t39) / 0.2e1;
        unknown[0][1] = t58;
        unknown[0][2] = t92 / 0.2e1;
        unknown[0][3] = t107;
        unknown[0][4] = t119;
        unknown[0][5] = t143 / 0.2e1;
        unknown[1][0] = t58;
        unknown[1][1] = t43 * t41 * (-t144 * t24 / 0.4e1 + t151) / 0.2e1;
        unknown[1][2] = t177 / 0.2e1;
        unknown[1][3] = t184;
        unknown[1][4] = t195;
        unknown[1][5] = t211 / 0.2e1;
        unknown[2][0] = t92 / 0.2e1;
        unknown[2][1] = t177 / 0.2e1;
        unknown[2][2] = t43 * t41 * (t212 + t213 - t214 * t24 / 0.4e1 + (0.2e1 * t217 + 0.2e1 * (-t212 - t213) * t12 + t223) * t32 / 0.2e1) / 0.2e1 - t88 * t234 + t3 * t236 + t245 - 0.2e1 * t66 * t3 * t246 - t251 - t8 * t252 / 0.2e1;
        unknown[2][3] = t274 / 0.2e1;
        unknown[2][4] = t292 / 0.2e1;
        unknown[2][5] = t329;
        unknown[3][0] = t107;
        unknown[3][1] = t184;
        unknown[3][2] = t274 / 0.2e1;
        unknown[3][3] = t43 * t41 * (-t330 * t24 / 0.4e1 + t39) / 0.2e1;
        unknown[3][4] = t344;
        unknown[3][5] = t357 / 0.2e1;
        unknown[4][0] = t119;
        unknown[4][1] = t195;
        unknown[4][2] = t292 / 0.2e1;
        unknown[4][3] = t344;
        unknown[4][4] = t43 * t41 * (-t358 * t24 / 0.4e1 + t151) / 0.2e1;
        unknown[4][5] = t378 / 0.2e1;
        unknown[5][0] = t143 / 0.2e1;
        unknown[5][1] = t211 / 0.2e1;
        unknown[5][2] = t329;
        unknown[5][3] = t357 / 0.2e1;
        unknown[5][4] = t378 / 0.2e1;
        unknown[5][5] = t43 * t41 * (t379 + t380 - t381 * t24 / 0.4e1 + (0.2e1 * t384 + 0.2e1 * (-t379 - t380) * t12 + t223) * t32 / 0.2e1) / 0.2e1 - t140 * t312 - t4 * t323 + t245 - 0.2e1 * t66 * t4 * t246 - t251 + t9 * t252 / 0.2e1;

        output[1] = Eigen::Map<Eigen::MatrixXd>(&unknown[0][0], 6, 6);
    }

    {
        double t2 = cos(theta0);
        double t3 = cos(theta1);
        double t4 = x1 - x0;
        double t5 = t2 + t3;
        double t6 = t5 * t4;
        double t7 = y1 - y0;
        double t8 = sin(theta0);
        double t9 = sin(theta1);
        double t10 = t8 + t9;
        double t11 = t10 * t7;
        double t12 = t6 + t11;
        double t13 = t12 * t12;
        double t14 = t3 * t2;
        double t15 = t9 * t8;
        double t16 = 0.1e1 - t14 - t15;
        double t17 = t4 * t4;
        double t18 = t7 * t7;
        double t19 = t17 + t18;
        double t21 = 0.2e1 * t19 * t16 + t13;
        double t22 = sqrt(t21);
        double t23 = 0.1e1 / t22;
        double t27 = -0.2e1 * t5 * t12 - 0.4e1 * t4 * t16;
        double t30 = t2 + t3 + t27 * t23 / 0.2e1;
        double t31 = 0.1e1 / t16 / 0.2e1;
        double t32 = t31 * t30;
        double t33 = t2 - t3;
        double t35 = t33 * t32 - 0.1e1;
        double t38 = -t6 - t11 + t22;
        double t39 = t31 * t38;
        double t41 = t33 * t39 - x0 + x1;
        double t43 = 0.1e1 / t22 / t21;
        double t44 = t27 * t27;
        double t47 = t5 * t5;
        double t49 = 0.4e1 * t14;
        double t50 = 0.4e1 * t15;
        double t53 = (0.2e1 * t47 + 0.4e1 - t49 - t50) * t23 / 0.2e1;
        double t54 = -t44 * t43 / 0.4e1 + t53;
        double t56 = t33 * t31;
        double t58 = t30 * t30;
        double t59 = 0.4e1 * t16 * t16;
        double t60 = 0.1e1 / t59;
        double t62 = t8 - t9;
        double t63 = t62 * t62;
        double t67 = t62 * t39 - y0 + y1;
        double t69 = t62 * t31;
        double t72 = t41 * t8 / 0.2e1;
        double t73 = t67 * t2 / 0.2e1;
        double t74 = -t72 + t73;
        double t75 = 0.1e1 / t74 / 0.2e1;
        double t79 = t30 * t67 / 0.2e1;
        double t82 = 0.4e1 * t74 * t74;
        double t83 = 0.1e1 / t82;
        double t84 = t83 * (t35 * t41 / 0.2e1 + t69 * t79);
        double t87 = t30 * t2;
        double t89 = -t35 * t8 + t69 * t87;
        double t94 = t41 * t41 / 0.4e1 + t67 * t67 / 0.4e1;
        double t98 = 0.1e1 / t74 / t82 * t94 / 0.2e1;
        double t99 = t89 * t89;
        double t102 = t83 * t94;
        double t113 = -0.2e1 * t10 * t12 - 0.4e1 * t7 * t16;
        double t116 = t8 + t9 + t113 * t23 / 0.2e1;
        double t117 = t31 * t116;
        double t118 = t35 * t33 / 0.2e1;
        double t120 = t27 * t43;
        double t123 = -t10 * t23;
        double t125 = -t113 * t120 / 0.4e1 - t5 * t123;
        double t129 = t62 * t117 - 0.1e1;
        double t136 = t116 * t8;
        double t140 = t129 * t2 - t56 * t136;
        double t142 = t41 * t116 / 0.2e1;
        double t147 = t83 * (t56 * t142 + t129 * t67 / 0.2e1);
        double t158 = t75 * (t118 * t117 + t56 * t125 * t41 / 0.2e1 + t69 * t30 * t129 / 0.2e1 + t69 * t125 * t67 / 0.2e1) - t140 * t84 - t89 * t147 + 0.2e1 * t140 * t89 * t98 - (t69 * t125 * t2 - t56 * t125 * t8) * t102;
        double t159 = t8 * t4;
        double t160 = t2 * t7;
        double t161 = -t159 + t160;
        double t166 = -t9 * t2 + t8 * t3;
        double t168 = 0.2e1 * t161 * t12 + 0.2e1 * t19 * t166;
        double t171 = t159 - t160 + t168 * t23 / 0.2e1;
        double t172 = t31 * t171;
        double t174 = t60 * t38;
        double t175 = 0.2e1 * t166 * t33;
        double t177 = t8 * t39;
        double t178 = t33 * t172 - t175 * t174 - t177;
        double t186 = 0.2e1 * t8 * t12;
        double t187 = -0.4e1 * t4 * t166;
        double t191 = -t8 - t168 * t120 / 0.4e1 + (-0.2e1 * t5 * t161 + t186 + t187) * t23 / 0.2e1;
        double t194 = t60 * t30;
        double t197 = t33 * t31 * t191 - t175 * t194 - t8 * t32;
        double t201 = 0.2e1 * t166 * t62;
        double t203 = t2 * t39;
        double t204 = t62 * t172 - t201 * t174 + t203;
        double t209 = t62 * t60;
        double t210 = 0.2e1 * t166 * t209;
        double t220 = -t41 * t2 / 0.2e1 - t178 * t8 / 0.2e1 - t67 * t8 / 0.2e1 + t204 * t2 / 0.2e1;
        double t225 = 0.2e1 * t83 * (t178 * t41 / 0.4e1 + t204 * t67 / 0.4e1);
        double t239 = t2 * t2;
        double t244 = t75 * (t35 * t178 / 0.2e1 + t197 * t41 / 0.2e1 + t69 * t30 * t204 / 0.2e1 + t69 * t191 * t67 / 0.2e1 - t210 * t79 + t2 * t31 * t79) - 0.2e1 * t220 * t84 - t89 * t225 + 0.4e1 * t220 * t89 * t98 - (t69 * t191 * t2 + t31 * t30 * t239 - t69 * t30 * t8 - t197 * t8 - t35 * t2 - t210 * t87) * t102;
        double t248 = 0.2e1 * t5 * t12 + 0.4e1 * t4 * t16;
        double t251 = -t2 - t3 + t248 * t23 / 0.2e1;
        double t252 = t31 * t251;
        double t254 = t33 * t252 + 0.1e1;
        double t264 = -t248 * t120 / 0.4e1 + (-0.2e1 * t5 * t5 + t49 + t50 - 0.4e1) * t23 / 0.2e1;
        double t267 = t60 * t251;
        double t277 = t251 * t2;
        double t279 = -t254 * t8 + t69 * t277;
        double t283 = t251 * t67 / 0.2e1;
        double t286 = t83 * (t254 * t41 / 0.2e1 + t69 * t283);
        double t297 = t75 * (t35 * t254 / 0.2e1 + t56 * t41 * t264 / 0.2e1 + t30 * t63 * t267 / 0.2e1 + t69 * t264 * t67 / 0.2e1) - t279 * t84 - t89 * t286 + 0.2e1 * t279 * t89 * t98 - (t69 * t264 * t2 - t56 * t264 * t8) * t102;
        double t301 = 0.2e1 * t10 * t12 + 0.4e1 * t7 * t16;
        double t304 = -t8 - t9 + t301 * t23 / 0.2e1;
        double t305 = t31 * t304;
        double t309 = t10 * t23;
        double t311 = -t301 * t120 / 0.4e1 - t5 * t309;
        double t315 = t62 * t305 + 0.1e1;
        double t322 = t304 * t8;
        double t326 = t315 * t2 - t56 * t322;
        double t328 = t304 * t41 / 0.2e1;
        double t333 = t83 * (t56 * t328 + t315 * t67 / 0.2e1);
        double t344 = t75 * (t118 * t305 + t56 * t41 * t311 / 0.2e1 + t69 * t30 * t315 / 0.2e1 + t69 * t311 * t67 / 0.2e1) - t326 * t84 - t89 * t333 + 0.2e1 * t326 * t89 * t98 - (t69 * t311 * t2 - t56 * t311 * t8) * t102;
        double t345 = t9 * t4;
        double t346 = t3 * t7;
        double t347 = -t345 + t346;
        double t351 = 0.2e1 * t347 * t12 - 0.2e1 * t19 * t166;
        double t354 = t345 - t346 + t351 * t23 / 0.2e1;
        double t355 = t31 * t354;
        double t357 = -0.2e1 * t166 * t33;
        double t359 = t9 * t39;
        double t360 = -t357 * t174 + t33 * t355 + t359;
        double t368 = 0.2e1 * t9 * t12;
        double t369 = 0.4e1 * t4 * t166;
        double t373 = -t9 - t351 * t120 / 0.4e1 + (-0.2e1 * t5 * t347 + t368 + t369) * t23 / 0.2e1;
        double t378 = t33 * t31 * t373 - t357 * t194 + t9 * t32;
        double t382 = -0.2e1 * t166 * t62;
        double t384 = t3 * t39;
        double t385 = -t382 * t174 + t62 * t355 - t384;
        double t390 = -0.2e1 * t166 * t209;
        double t392 = t3 * t31;
        double t398 = -t360 * t8 / 0.2e1 + t385 * t2 / 0.2e1;
        double t403 = 0.2e1 * t83 * (t360 * t41 / 0.4e1 + t385 * t67 / 0.4e1);
        double t416 = t75 * (t35 * t360 / 0.2e1 + t378 * t41 / 0.2e1 + t69 * t30 * t385 / 0.2e1 + t69 * t373 * t67 / 0.2e1 - t390 * t79 - t392 * t79) - 0.2e1 * t398 * t84 - t89 * t403 + 0.4e1 * t398 * t89 * t98 - (t69 * t373 * t2 - t378 * t8 - t390 * t87 - t392 * t87) * t102;
        double t417 = t116 * t116;
        double t419 = t33 * t33;
        double t422 = t113 * t113;
        double t425 = t10 * t10;
        double t429 = (0.2e1 * t425 + 0.4e1 - t49 - t50) * t23 / 0.2e1;
        double t430 = -t422 * t43 / 0.4e1 + t429;
        double t441 = t140 * t140;
        double t453 = t113 * t43;
        double t459 = 0.2e1 * t2 * t12;
        double t460 = -0.4e1 * t7 * t166;
        double t464 = t2 - t168 * t453 / 0.4e1 + (-0.2e1 * t10 * t161 - t459 + t460) * t23 / 0.2e1;
        double t467 = t33 * t60;
        double t468 = 0.2e1 * t166 * t467;
        double t476 = t60 * t116;
        double t479 = t62 * t31 * t464 + t2 * t117 - t201 * t476;
        double t494 = t8 * t8;
        double t503 = t75 * (t56 * t116 * t178 / 0.2e1 + t56 * t464 * t41 / 0.2e1 - t468 * t142 - t8 * t31 * t142 + t129 * t204 / 0.2e1 + t479 * t67 / 0.2e1) - 0.2e1 * t220 * t147 - t140 * t225 + 0.4e1 * t220 * t140 * t98 - (-t56 * t116 * t2 + t31 * t116 * t494 - t56 * t464 * t8 - t129 * t8 + t468 * t136 + t479 * t2) * t102;
        double t509 = -t248 * t453 / 0.4e1 + t5 * t123;
        double t529 = t75 * (t56 * t116 * t254 / 0.2e1 + t56 * t509 * t41 / 0.2e1 + t129 * t62 * t252 / 0.2e1 + t69 * t509 * t67 / 0.2e1) - t279 * t147 - t140 * t286 + 0.2e1 * t279 * t140 * t98 - (t69 * t509 * t2 - t56 * t509 * t8) * t102;
        double t530 = t60 * t304;
        double t541 = -t301 * t453 / 0.4e1 + (-0.2e1 * t10 * t10 + t49 + t50 - 0.4e1) * t23 / 0.2e1;
        double t561 = t75 * (t116 * t419 * t530 / 0.2e1 + t56 * t541 * t41 / 0.2e1 + t129 * t315 / 0.2e1 + t69 * t541 * t67 / 0.2e1) - t326 * t147 - t140 * t333 + 0.2e1 * t326 * t140 * t98 - (t69 * t541 * t2 - t56 * t541 * t8) * t102;
        double t569 = 0.2e1 * t3 * t12;
        double t570 = 0.4e1 * t7 * t166;
        double t574 = t3 - t351 * t453 / 0.4e1 + (-0.2e1 * t10 * t347 - t569 + t570) * t23 / 0.2e1;
        double t577 = -0.2e1 * t166 * t467;
        double t579 = t9 * t31;
        double t587 = t62 * t31 * t574 - t3 * t117 - t382 * t476;
        double t605 = t75 * (t56 * t116 * t360 / 0.2e1 + t56 * t574 * t41 / 0.2e1 - t577 * t142 + t579 * t142 + t129 * t385 / 0.2e1 + t587 * t67 / 0.2e1) - 0.2e1 * t398 * t147 - t140 * t403 + 0.4e1 * t398 * t140 * t98 - (-t56 * t574 * t8 + t577 * t136 - t579 * t136 + t587 * t2) * t102;
        double t607 = t4 * t2;
        double t608 = t8 * t7;
        double t609 = t168 * t168;
        double t612 = t161 * t161;
        double t617 = t14 + t15;
        double t618 = 0.2e1 * t19 * t617;
        double t623 = t31 * (t607 + t608 - t609 * t43 / 0.4e1 + (0.2e1 * t612 + 0.2e1 * (-t607 - t608) * t12 + t618) * t23 / 0.2e1);
        double t626 = t60 * t171;
        double t632 = 0.1e1 / t16 / t59 * t38 / 0.2e1;
        double t633 = 0.4e1 * t166 * t166;
        double t635 = t633 * t33 * t632;
        double t640 = t617 * t33 * t174;
        double t642 = t33 * t623 / 0.2e1 - t175 * t626 - t8 * t172 + t635 + 0.2e1 * t166 * t8 * t174 - t640 - t203 / 0.2e1;
        double t650 = t633 * t62 * t632;
        double t655 = t617 * t62 * t174;
        double t657 = t62 * t623 / 0.2e1 - t201 * t626 + t2 * t172 + t650 - 0.2e1 * t166 * t2 * t174 - t655 - t177 / 0.2e1;
        double t681 = t43 * t168;
        double t690 = t31 * (t8 - t248 * t681 / 0.4e1 + (0.2e1 * t5 * t161 - t186 + t369) * t23 / 0.2e1);
        double t694 = -t175 * t267 - t8 * t252 + t33 * t690;
        double t702 = t2 * t252 - t201 * t267 + t62 * t690;
        double t722 = t75 * (t178 * t254 / 0.2e1 + t694 * t41 / 0.2e1 + t204 * t62 * t252 / 0.2e1 + t702 * t67 / 0.2e1) - t279 * t225 - 0.2e1 * t220 * t286 + 0.4e1 * t279 * t220 * t98 - (-t69 * t251 * t8 - t254 * t2 + t702 * t2 - t694 * t8) * t102;
        double t733 = t31 * (-t2 - t301 * t681 / 0.4e1 + (0.2e1 * t10 * t161 + t459 + t570) * t23 / 0.2e1);
        double t737 = -t175 * t530 - t8 * t305 + t33 * t733;
        double t745 = t2 * t305 - t201 * t530 + t62 * t733;
        double t765 = t75 * (t178 * t33 * t305 / 0.2e1 + t737 * t41 / 0.2e1 + t204 * t315 / 0.2e1 + t745 * t67 / 0.2e1) - t326 * t225 - 0.2e1 * t220 * t333 + 0.4e1 * t326 * t220 * t98 - (-t56 * t304 * t2 + t745 * t2 - t315 * t8 - t737 * t8) * t102;
        double t776 = t31 * (-t351 * t681 / 0.4e1 + (0.2e1 * t161 * t347 - 0.2e1 * t19 * t617) * t23 / 0.2e1);
        double t783 = t60 * t354;
        double t799 = t33 * t776 / 0.2e1 - t357 * t626 / 0.2e1 + t9 * t172 / 0.2e1 - t175 * t783 / 0.2e1 - 0.2e1 * t166 * t175 * t632 - t166 * t9 * t174 + t617 * t33 * t174 - t8 * t355 / 0.2e1 - t166 * t8 * t174;
        double t823 = t62 * t776 / 0.2e1 - t382 * t626 / 0.2e1 - t3 * t172 / 0.2e1 - t201 * t783 / 0.2e1 - 0.2e1 * t166 * t201 * t632 + t166 * t3 * t174 + t617 * t62 * t174 + t2 * t355 / 0.2e1 + t166 * t2 * t174;
        double t838 = 0.2e1 * t75 * (t178 * t360 / 0.4e1 + t799 * t41 / 0.2e1 + t204 * t385 / 0.4e1 + t823 * t67 / 0.2e1) - 0.2e1 * t398 * t225 - 0.2e1 * t220 * t403 + 0.8e1 * t398 * t220 * t98 - 0.2e1 * (-t360 * t2 / 0.2e1 - t799 * t8 - t385 * t8 / 0.2e1 + t823 * t2) * t102;
        double t841 = t248 * t248;
        double t844 = -t841 * t43 / 0.4e1 + t53;
        double t847 = t251 * t251;
        double t857 = t279 * t279;
        double t869 = t248 * t43;
        double t873 = -t301 * t869 / 0.4e1 + t5 * t309;
        double t893 = t75 * (t254 * t33 * t305 / 0.2e1 + t56 * t873 * t41 / 0.2e1 + t69 * t251 * t315 / 0.2e1 + t69 * t873 * t67 / 0.2e1) - t326 * t286 - t279 * t333 + 0.2e1 * t326 * t279 * t98 - (t69 * t873 * t2 - t56 * t873 * t8) * t102;
        double t903 = t9 - t351 * t869 / 0.4e1 + (0.2e1 * t5 * t347 + t187 - t368) * t23 / 0.2e1;
        double t908 = t33 * t31 * t903 + t9 * t252 - t357 * t267;
        double t932 = t75 * (t254 * t360 / 0.2e1 + t908 * t41 / 0.2e1 + t69 * t251 * t385 / 0.2e1 + t69 * t903 * t67 / 0.2e1 - t390 * t283 - t392 * t283) - 0.2e1 * t398 * t286 - t279 * t403 + 0.4e1 * t398 * t279 * t98 - (t69 * t903 * t2 - t390 * t277 - t392 * t277 - t908 * t8) * t102;
        double t933 = t304 * t304;
        double t937 = t301 * t301;
        double t940 = -t937 * t43 / 0.4e1 + t429;
        double t951 = t326 * t326;
        double t971 = -t3 - t351 * t301 * t43 / 0.4e1 + (0.2e1 * t10 * t347 + t460 + t569) * t23 / 0.2e1;
        double t982 = t62 * t31 * t971 - t3 * t305 - t382 * t530;
        double t1000 = t75 * (t56 * t304 * t360 / 0.2e1 + t56 * t971 * t41 / 0.2e1 - t577 * t328 + t579 * t328 + t315 * t385 / 0.2e1 + t982 * t67 / 0.2e1) - 0.2e1 * t398 * t333 - t326 * t403 + 0.4e1 * t398 * t326 * t98 - (-t56 * t971 * t8 + t982 * t2 + t577 * t322 - t579 * t322) * t102;
        double t1002 = t4 * t3;
        double t1003 = t9 * t7;
        double t1004 = t351 * t351;
        double t1007 = t347 * t347;
        double t1016 = t31 * (t1002 + t1003 - t1004 * t43 / 0.4e1 + (0.2e1 * t1007 + 0.2e1 * (-t1002 - t1003) * t12 + t618) * t23 / 0.2e1);
        double t1024 = t33 * t1016 / 0.2e1 - t357 * t783 + t9 * t355 + t635 + 0.2e1 * t166 * t9 * t174 - t640 + t384 / 0.2e1;
        double t1034 = t62 * t1016 / 0.2e1 - t382 * t783 - t3 * t355 + t650 - 0.2e1 * t166 * t3 * t174 - t655 + t359 / 0.2e1;
        unknown[0][0] = t75 * (t35 * t35 / 0.2e1 + t56 * t54 * t41 / 0.2e1 + t63 * t60 * t58 / 0.2e1 + t69 * t54 * t67 / 0.2e1) - 0.2e1 * t89 * t84 + 0.2e1 * t99 * t98 - (t69 * t54 * t2 - t56 * t54 * t8) * t102;
        unknown[0][1] = t158;
        unknown[0][2] = t244;
        unknown[0][3] = t297;
        unknown[0][4] = t344;
        unknown[0][5] = t416;
        unknown[1][0] = t158;
        unknown[1][1] = t75 * (t419 * t60 * t417 / 0.2e1 + t56 * t430 * t41 / 0.2e1 + t129 * t129 / 0.2e1 + t69 * t430 * t67 / 0.2e1) - 0.2e1 * t140 * t147 + 0.2e1 * t441 * t98 - (t69 * t430 * t2 - t56 * t430 * t8) * t102;
        unknown[1][2] = t503;
        unknown[1][3] = t529;
        unknown[1][4] = t561;
        unknown[1][5] = t605;
        unknown[2][0] = t244;
        unknown[2][1] = t503;
        unknown[2][2] = 0.2e1 * t75 * (t178 * t178 / 0.4e1 + t642 * t41 / 0.2e1 + t204 * t204 / 0.4e1 + t657 * t67 / 0.2e1) - 0.4e1 * t220 * t225 + 0.8e1 * t220 * t220 * t98 - (-0.2e1 * t178 * t2 + 0.2e1 * t657 * t2 - 0.2e1 * t204 * t8 - 0.2e1 * t642 * t8 + 0.2e1 * t72 - 0.2e1 * t73) * t102;
        unknown[2][3] = t722;
        unknown[2][4] = t765;
        unknown[2][5] = t838;
        unknown[3][0] = t297;
        unknown[3][1] = t529;
        unknown[3][2] = t722;
        unknown[3][3] = t75 * (t254 * t254 / 0.2e1 + t56 * t844 * t41 / 0.2e1 + t63 * t60 * t847 / 0.2e1 + t69 * t844 * t67 / 0.2e1) - 0.2e1 * t279 * t286 + 0.2e1 * t857 * t98 - (t69 * t844 * t2 - t56 * t844 * t8) * t102;
        unknown[3][4] = t893;
        unknown[3][5] = t932;
        unknown[4][0] = t344;
        unknown[4][1] = t561;
        unknown[4][2] = t765;
        unknown[4][3] = t893;
        unknown[4][4] = t75 * (t419 * t60 * t933 / 0.2e1 + t56 * t940 * t41 / 0.2e1 + t315 * t315 / 0.2e1 + t69 * t940 * t67 / 0.2e1) - 0.2e1 * t326 * t333 + 0.2e1 * t951 * t98 - (t69 * t940 * t2 - t56 * t940 * t8) * t102;
        unknown[4][5] = t1000;
        unknown[5][0] = t416;
        unknown[5][1] = t605;
        unknown[5][2] = t838;
        unknown[5][3] = t932;
        unknown[5][4] = t1000;
        unknown[5][5] = 0.2e1 * t75 * (t360 * t360 / 0.4e1 + t1024 * t41 / 0.2e1 + t385 * t385 / 0.4e1 + t1034 * t67 / 0.2e1) - 0.4e1 * t398 * t403 + 0.8e1 * t398 * t398 * t98 - 0.2e1 * (-t1024 * t8 + t1034 * t2) * t102;

        output[2] = Eigen::Map<Eigen::MatrixXd>(&unknown[0][0], 6, 6);
    }

    {
        double t2 = cos(theta0);
        double t3 = cos(theta1);
        double t4 = x1 - x0;
        double t5 = t2 + t3;
        double t6 = t5 * t4;
        double t7 = y1 - y0;
        double t8 = sin(theta0);
        double t9 = sin(theta1);
        double t10 = t8 + t9;
        double t11 = t10 * t7;
        double t12 = t6 + t11;
        double t13 = t12 * t12;
        double t14 = t3 * t2;
        double t15 = t9 * t8;
        double t16 = 0.1e1 - t14 - t15;
        double t17 = t4 * t4;
        double t18 = t7 * t7;
        double t19 = t17 + t18;
        double t21 = 0.2e1 * t19 * t16 + t13;
        double t22 = sqrt(t21);
        double t23 = 0.1e1 / t22;
        double t27 = -0.2e1 * t5 * t12 - 0.4e1 * t4 * t16;
        double t30 = t2 + t3 + t27 * t23 / 0.2e1;
        double t31 = 0.1e1 / t16 / 0.2e1;
        double t32 = t31 * t30;
        double t33 = t2 - t3;
        double t35 = t33 * t32 + 0.1e1;
        double t38 = -t6 - t11 + t22;
        double t39 = t31 * t38;
        double t41 = t33 * t39 + x0 - x1;
        double t43 = 0.1e1 / t22 / t21;
        double t44 = t27 * t27;
        double t47 = t5 * t5;
        double t49 = 0.4e1 * t14;
        double t50 = 0.4e1 * t15;
        double t53 = (0.2e1 * t47 + 0.4e1 - t49 - t50) * t23 / 0.2e1;
        double t54 = -t44 * t43 / 0.4e1 + t53;
        double t56 = t33 * t31;
        double t58 = t30 * t30;
        double t59 = 0.4e1 * t16 * t16;
        double t60 = 0.1e1 / t59;
        double t62 = t8 - t9;
        double t63 = t62 * t62;
        double t67 = t62 * t39 + y0 - y1;
        double t69 = t62 * t31;
        double t72 = t41 * t9 / 0.2e1;
        double t73 = t67 * t3 / 0.2e1;
        double t74 = -t72 + t73;
        double t75 = 0.1e1 / t74 / 0.2e1;
        double t79 = t30 * t67 / 0.2e1;
        double t82 = 0.4e1 * t74 * t74;
        double t83 = 0.1e1 / t82;
        double t84 = t83 * (t35 * t41 / 0.2e1 + t69 * t79);
        double t87 = t30 * t3;
        double t89 = -t35 * t9 + t69 * t87;
        double t94 = t41 * t41 / 0.4e1 + t67 * t67 / 0.4e1;
        double t98 = 0.1e1 / t74 / t82 * t94 / 0.2e1;
        double t99 = t89 * t89;
        double t102 = t83 * t94;
        double t113 = -0.2e1 * t10 * t12 - 0.4e1 * t7 * t16;
        double t116 = t8 + t9 + t113 * t23 / 0.2e1;
        double t117 = t31 * t116;
        double t118 = t35 * t33 / 0.2e1;
        double t120 = t27 * t43;
        double t123 = -t10 * t23;
        double t125 = -t113 * t120 / 0.4e1 - t5 * t123;
        double t129 = t62 * t117 + 0.1e1;
        double t136 = t116 * t9;
        double t140 = t129 * t3 - t56 * t136;
        double t142 = t41 * t116 / 0.2e1;
        double t147 = t83 * (t56 * t142 + t129 * t67 / 0.2e1);
        double t158 = t75 * (t118 * t117 + t56 * t125 * t41 / 0.2e1 + t69 * t30 * t129 / 0.2e1 + t69 * t125 * t67 / 0.2e1) - t140 * t84 - t89 * t147 + 0.2e1 * t140 * t89 * t98 - (t69 * t125 * t3 - t56 * t125 * t9) * t102;
        double t159 = t8 * t4;
        double t160 = t2 * t7;
        double t161 = -t159 + t160;
        double t166 = -t9 * t2 + t8 * t3;
        double t168 = 0.2e1 * t161 * t12 + 0.2e1 * t19 * t166;
        double t171 = t159 - t160 + t168 * t23 / 0.2e1;
        double t172 = t31 * t171;
        double t174 = t60 * t38;
        double t175 = 0.2e1 * t166 * t33;
        double t177 = t8 * t39;
        double t178 = t33 * t172 - t175 * t174 - t177;
        double t186 = 0.2e1 * t8 * t12;
        double t187 = -0.4e1 * t4 * t166;
        double t191 = -t8 - t168 * t120 / 0.4e1 + (-0.2e1 * t5 * t161 + t186 + t187) * t23 / 0.2e1;
        double t194 = t60 * t30;
        double t197 = t33 * t31 * t191 - t175 * t194 - t8 * t32;
        double t201 = 0.2e1 * t166 * t62;
        double t203 = t2 * t39;
        double t204 = t62 * t172 - t201 * t174 + t203;
        double t209 = t62 * t60;
        double t210 = 0.2e1 * t166 * t209;
        double t212 = t2 * t31;
        double t218 = -t178 * t9 / 0.2e1 + t204 * t3 / 0.2e1;
        double t223 = 0.2e1 * t83 * (t178 * t41 / 0.4e1 + t204 * t67 / 0.4e1);
        double t236 = t75 * (t35 * t178 / 0.2e1 + t197 * t41 / 0.2e1 + t69 * t30 * t204 / 0.2e1 + t69 * t191 * t67 / 0.2e1 - t210 * t79 + t212 * t79) - 0.2e1 * t218 * t84 - t89 * t223 + 0.4e1 * t218 * t89 * t98 - (t69 * t191 * t3 - t197 * t9 - t210 * t87 + t212 * t87) * t102;
        double t240 = 0.2e1 * t5 * t12 + 0.4e1 * t4 * t16;
        double t243 = -t2 - t3 + t240 * t23 / 0.2e1;
        double t244 = t31 * t243;
        double t246 = t33 * t244 - 0.1e1;
        double t256 = -t240 * t120 / 0.4e1 + (-0.2e1 * t5 * t5 + t49 + t50 - 0.4e1) * t23 / 0.2e1;
        double t259 = t60 * t243;
        double t269 = t243 * t3;
        double t271 = -t246 * t9 + t69 * t269;
        double t275 = t243 * t67 / 0.2e1;
        double t278 = t83 * (t246 * t41 / 0.2e1 + t69 * t275);
        double t289 = t75 * (t35 * t246 / 0.2e1 + t56 * t256 * t41 / 0.2e1 + t30 * t63 * t259 / 0.2e1 + t69 * t256 * t67 / 0.2e1) - t271 * t84 - t89 * t278 + 0.2e1 * t271 * t89 * t98 - (t69 * t256 * t3 - t56 * t256 * t9) * t102;
        double t293 = 0.2e1 * t10 * t12 + 0.4e1 * t7 * t16;
        double t296 = -t8 - t9 + t293 * t23 / 0.2e1;
        double t297 = t31 * t296;
        double t301 = t10 * t23;
        double t303 = -t293 * t120 / 0.4e1 - t5 * t301;
        double t307 = t62 * t297 - 0.1e1;
        double t314 = t296 * t9;
        double t318 = t307 * t3 - t56 * t314;
        double t320 = t296 * t41 / 0.2e1;
        double t325 = t83 * (t56 * t320 + t307 * t67 / 0.2e1);
        double t336 = t75 * (t118 * t297 + t56 * t303 * t41 / 0.2e1 + t69 * t30 * t307 / 0.2e1 + t69 * t303 * t67 / 0.2e1) - t318 * t84 - t89 * t325 + 0.2e1 * t318 * t89 * t98 - (t69 * t303 * t3 - t56 * t303 * t9) * t102;
        double t337 = t9 * t4;
        double t338 = t3 * t7;
        double t339 = -t337 + t338;
        double t343 = 0.2e1 * t339 * t12 - 0.2e1 * t19 * t166;
        double t346 = t337 - t338 + t343 * t23 / 0.2e1;
        double t347 = t31 * t346;
        double t349 = -0.2e1 * t166 * t33;
        double t351 = t9 * t39;
        double t352 = -t349 * t174 + t33 * t347 + t351;
        double t360 = 0.2e1 * t9 * t12;
        double t361 = 0.4e1 * t4 * t166;
        double t365 = -t9 - t343 * t120 / 0.4e1 + (-0.2e1 * t5 * t339 + t360 + t361) * t23 / 0.2e1;
        double t370 = t33 * t31 * t365 - t349 * t194 + t9 * t32;
        double t374 = -0.2e1 * t166 * t62;
        double t376 = t3 * t39;
        double t377 = -t374 * t174 + t62 * t347 - t376;
        double t382 = -0.2e1 * t166 * t209;
        double t384 = t3 * t31;
        double t392 = -t41 * t3 / 0.2e1 - t352 * t9 / 0.2e1 - t67 * t9 / 0.2e1 + t377 * t3 / 0.2e1;
        double t397 = 0.2e1 * t83 * (t41 * t352 / 0.4e1 + t377 * t67 / 0.4e1);
        double t411 = t3 * t3;
        double t416 = t75 * (t35 * t352 / 0.2e1 + t370 * t41 / 0.2e1 + t69 * t30 * t377 / 0.2e1 + t69 * t365 * t67 / 0.2e1 - t382 * t79 - t384 * t79) - 0.2e1 * t392 * t84 - t89 * t397 + 0.4e1 * t392 * t89 * t98 - (t69 * t365 * t3 - t31 * t30 * t411 - t69 * t30 * t9 - t35 * t3 - t370 * t9 - t382 * t87) * t102;
        double t417 = t116 * t116;
        double t419 = t33 * t33;
        double t422 = t113 * t113;
        double t425 = t10 * t10;
        double t429 = (0.2e1 * t425 + 0.4e1 - t49 - t50) * t23 / 0.2e1;
        double t430 = -t422 * t43 / 0.4e1 + t429;
        double t441 = t140 * t140;
        double t453 = t113 * t43;
        double t459 = 0.2e1 * t2 * t12;
        double t460 = -0.4e1 * t7 * t166;
        double t464 = t2 - t168 * t453 / 0.4e1 + (-0.2e1 * t10 * t161 - t459 + t460) * t23 / 0.2e1;
        double t467 = t33 * t60;
        double t468 = 0.2e1 * t166 * t467;
        double t470 = t8 * t31;
        double t476 = t60 * t116;
        double t479 = t62 * t31 * t464 + t2 * t117 - t201 * t476;
        double t497 = t75 * (t56 * t116 * t178 / 0.2e1 + t56 * t464 * t41 / 0.2e1 - t468 * t142 - t470 * t142 + t129 * t204 / 0.2e1 + t479 * t67 / 0.2e1) - 0.2e1 * t218 * t147 - t140 * t223 + 0.4e1 * t218 * t140 * t98 - (-t56 * t464 * t9 + t468 * t136 + t470 * t136 + t479 * t3) * t102;
        double t503 = -t240 * t453 / 0.4e1 + t5 * t123;
        double t523 = t75 * (t56 * t116 * t246 / 0.2e1 + t56 * t503 * t41 / 0.2e1 + t129 * t62 * t244 / 0.2e1 + t69 * t503 * t67 / 0.2e1) - t271 * t147 - t140 * t278 + 0.2e1 * t271 * t140 * t98 - (t69 * t503 * t3 - t56 * t503 * t9) * t102;
        double t524 = t60 * t296;
        double t535 = -t293 * t453 / 0.4e1 + (-0.2e1 * t10 * t10 + t49 + t50 - 0.4e1) * t23 / 0.2e1;
        double t555 = t75 * (t116 * t419 * t524 / 0.2e1 + t56 * t535 * t41 / 0.2e1 + t129 * t307 / 0.2e1 + t69 * t535 * t67 / 0.2e1) - t318 * t147 - t140 * t325 + 0.2e1 * t318 * t140 * t98 - (t69 * t535 * t3 - t56 * t535 * t9) * t102;
        double t563 = 0.2e1 * t3 * t12;
        double t564 = 0.4e1 * t7 * t166;
        double t568 = t3 - t343 * t453 / 0.4e1 + (-0.2e1 * t10 * t339 - t563 + t564) * t23 / 0.2e1;
        double t571 = -0.2e1 * t166 * t467;
        double t573 = t9 * t31;
        double t581 = t62 * t31 * t568 - t3 * t117 - t374 * t476;
        double t596 = t9 * t9;
        double t605 = t75 * (t56 * t116 * t352 / 0.2e1 + t56 * t568 * t41 / 0.2e1 - t571 * t142 + t573 * t142 + t129 * t377 / 0.2e1 + t581 * t67 / 0.2e1) - 0.2e1 * t392 * t147 - t140 * t397 + 0.4e1 * t392 * t140 * t98 - (-t56 * t116 * t3 - t31 * t116 * t596 - t56 * t568 * t9 - t129 * t9 + t571 * t136 + t581 * t3) * t102;
        double t607 = t4 * t2;
        double t608 = t8 * t7;
        double t609 = t168 * t168;
        double t612 = t161 * t161;
        double t617 = t14 + t15;
        double t618 = 0.2e1 * t19 * t617;
        double t623 = t31 * (t607 + t608 - t609 * t43 / 0.4e1 + (0.2e1 * t612 + 0.2e1 * (-t607 - t608) * t12 + t618) * t23 / 0.2e1);
        double t626 = t60 * t171;
        double t632 = 0.1e1 / t16 / t59 * t38 / 0.2e1;
        double t633 = 0.4e1 * t166 * t166;
        double t635 = t633 * t33 * t632;
        double t640 = t617 * t33 * t174;
        double t642 = t33 * t623 / 0.2e1 - t175 * t626 - t8 * t172 + t635 + 0.2e1 * t166 * t8 * t174 - t640 - t203 / 0.2e1;
        double t650 = t633 * t62 * t632;
        double t655 = t617 * t62 * t174;
        double t657 = t62 * t623 / 0.2e1 - t201 * t626 + t2 * t172 + t650 - 0.2e1 * t166 * t2 * t174 - t655 - t177 / 0.2e1;
        double t673 = t43 * t168;
        double t682 = t31 * (t8 - t240 * t673 / 0.4e1 + (0.2e1 * t5 * t161 - t186 + t361) * t23 / 0.2e1);
        double t686 = -t175 * t259 - t8 * t244 + t33 * t682;
        double t694 = t2 * t244 - t201 * t259 + t62 * t682;
        double t708 = t75 * (t178 * t246 / 0.2e1 + t686 * t41 / 0.2e1 + t204 * t62 * t244 / 0.2e1 + t694 * t67 / 0.2e1) - t271 * t223 - 0.2e1 * t218 * t278 + 0.4e1 * t271 * t218 * t98 - 0.2e1 * (-t686 * t9 / 0.2e1 + t694 * t3 / 0.2e1) * t102;
        double t719 = t31 * (-t2 - t293 * t673 / 0.4e1 + (0.2e1 * t10 * t161 + t459 + t564) * t23 / 0.2e1);
        double t723 = -t175 * t524 - t8 * t297 + t33 * t719;
        double t731 = t2 * t297 - t201 * t524 + t62 * t719;
        double t745 = t75 * (t178 * t33 * t297 / 0.2e1 + t723 * t41 / 0.2e1 + t204 * t307 / 0.2e1 + t731 * t67 / 0.2e1) - t318 * t223 - 0.2e1 * t218 * t325 + 0.4e1 * t318 * t218 * t98 - 0.2e1 * (-t723 * t9 / 0.2e1 + t731 * t3 / 0.2e1) * t102;
        double t756 = t31 * (-t343 * t673 / 0.4e1 + (0.2e1 * t161 * t339 - 0.2e1 * t19 * t617) * t23 / 0.2e1);
        double t763 = t60 * t346;
        double t779 = t33 * t756 / 0.2e1 - t349 * t626 / 0.2e1 + t9 * t172 / 0.2e1 - t175 * t763 / 0.2e1 - 0.2e1 * t166 * t175 * t632 - t166 * t9 * t174 + t617 * t33 * t174 - t8 * t347 / 0.2e1 - t166 * t8 * t174;
        double t803 = t62 * t756 / 0.2e1 - t374 * t626 / 0.2e1 - t3 * t172 / 0.2e1 - t201 * t763 / 0.2e1 - 0.2e1 * t166 * t201 * t632 + t166 * t3 * t174 + t617 * t62 * t174 + t2 * t347 / 0.2e1 + t166 * t2 * t174;
        double t818 = 0.2e1 * t75 * (t178 * t352 / 0.4e1 + t779 * t41 / 0.2e1 + t204 * t377 / 0.4e1 + t803 * t67 / 0.2e1) - 0.2e1 * t392 * t223 - 0.2e1 * t218 * t397 + 0.8e1 * t392 * t218 * t98 - 0.2e1 * (-t178 * t3 / 0.2e1 - t779 * t9 - t204 * t9 / 0.2e1 + t803 * t3) * t102;
        double t821 = t240 * t240;
        double t824 = -t821 * t43 / 0.4e1 + t53;
        double t827 = t243 * t243;
        double t837 = t271 * t271;
        double t849 = t240 * t43;
        double t853 = -t293 * t849 / 0.4e1 + t5 * t301;
        double t873 = t75 * (t246 * t33 * t297 / 0.2e1 + t56 * t853 * t41 / 0.2e1 + t69 * t243 * t307 / 0.2e1 + t69 * t853 * t67 / 0.2e1) - t318 * t278 - t271 * t325 + 0.2e1 * t318 * t271 * t98 - (t69 * t853 * t3 - t56 * t853 * t9) * t102;
        double t883 = t9 - t343 * t849 / 0.4e1 + (0.2e1 * t5 * t339 + t187 - t360) * t23 / 0.2e1;
        double t888 = t33 * t31 * t883 + t9 * t244 - t349 * t259;
        double t917 = t75 * (t246 * t352 / 0.2e1 + t888 * t41 / 0.2e1 + t69 * t243 * t377 / 0.2e1 + t69 * t883 * t67 / 0.2e1 - t382 * t275 - t384 * t275) - 0.2e1 * t392 * t278 - t271 * t397 + 0.4e1 * t392 * t271 * t98 - (-t31 * t243 * t411 - t69 * t243 * t9 + t69 * t883 * t3 - t246 * t3 - t382 * t269 - t888 * t9) * t102;
        double t918 = t296 * t296;
        double t922 = t293 * t293;
        double t925 = -t922 * t43 / 0.4e1 + t429;
        double t936 = t318 * t318;
        double t956 = -t3 - t343 * t293 * t43 / 0.4e1 + (0.2e1 * t10 * t339 + t460 + t563) * t23 / 0.2e1;
        double t967 = t62 * t31 * t956 - t3 * t297 - t374 * t524;
        double t990 = t75 * (t56 * t296 * t352 / 0.2e1 + t56 * t956 * t41 / 0.2e1 - t571 * t320 + t573 * t320 + t307 * t377 / 0.2e1 + t967 * t67 / 0.2e1) - 0.2e1 * t392 * t325 - t318 * t397 + 0.4e1 * t392 * t318 * t98 - (-t56 * t296 * t3 - t31 * t296 * t596 - t56 * t956 * t9 + t967 * t3 - t307 * t9 + t571 * t314) * t102;
        double t992 = t4 * t3;
        double t993 = t9 * t7;
        double t994 = t343 * t343;
        double t997 = t339 * t339;
        double t1006 = t31 * (t992 + t993 - t994 * t43 / 0.4e1 + (0.2e1 * t997 + 0.2e1 * (-t992 - t993) * t12 + t618) * t23 / 0.2e1);
        double t1014 = t33 * t1006 / 0.2e1 - t349 * t763 + t9 * t347 + t635 + 0.2e1 * t166 * t9 * t174 - t640 + t376 / 0.2e1;
        double t1024 = t62 * t1006 / 0.2e1 - t374 * t763 - t3 * t347 + t650 - 0.2e1 * t166 * t3 * t174 - t655 + t351 / 0.2e1;
        unknown[0][0] = t75 * (t35 * t35 / 0.2e1 + t56 * t54 * t41 / 0.2e1 + t63 * t60 * t58 / 0.2e1 + t69 * t54 * t67 / 0.2e1) - 0.2e1 * t89 * t84 + 0.2e1 * t99 * t98 - (t69 * t54 * t3 - t56 * t54 * t9) * t102;
        unknown[0][1] = t158;
        unknown[0][2] = t236;
        unknown[0][3] = t289;
        unknown[0][4] = t336;
        unknown[0][5] = t416;
        unknown[1][0] = t158;
        unknown[1][1] = t75 * (t419 * t60 * t417 / 0.2e1 + t56 * t430 * t41 / 0.2e1 + t129 * t129 / 0.2e1 + t69 * t430 * t67 / 0.2e1) - 0.2e1 * t140 * t147 + 0.2e1 * t441 * t98 - (t69 * t430 * t3 - t56 * t430 * t9) * t102;
        unknown[1][2] = t497;
        unknown[1][3] = t523;
        unknown[1][4] = t555;
        unknown[1][5] = t605;
        unknown[2][0] = t236;
        unknown[2][1] = t497;
        unknown[2][2] = 0.2e1 * t75 * (t178 * t178 / 0.4e1 + t642 * t41 / 0.2e1 + t204 * t204 / 0.4e1 + t657 * t67 / 0.2e1) - 0.4e1 * t218 * t223 + 0.8e1 * t218 * t218 * t98 - 0.2e1 * (t657 * t3 - t642 * t9) * t102;
        unknown[2][3] = t708;
        unknown[2][4] = t745;
        unknown[2][5] = t818;
        unknown[3][0] = t289;
        unknown[3][1] = t523;
        unknown[3][2] = t708;
        unknown[3][3] = t75 * (t246 * t246 / 0.2e1 + t56 * t824 * t41 / 0.2e1 + t63 * t60 * t827 / 0.2e1 + t69 * t824 * t67 / 0.2e1) - 0.2e1 * t271 * t278 + 0.2e1 * t837 * t98 - (t69 * t824 * t3 - t56 * t824 * t9) * t102;
        unknown[3][4] = t873;
        unknown[3][5] = t917;
        unknown[4][0] = t336;
        unknown[4][1] = t555;
        unknown[4][2] = t745;
        unknown[4][3] = t873;
        unknown[4][4] = t75 * (t419 * t60 * t918 / 0.2e1 + t56 * t925 * t41 / 0.2e1 + t307 * t307 / 0.2e1 + t69 * t925 * t67 / 0.2e1) - 0.2e1 * t318 * t325 + 0.2e1 * t936 * t98 - (t69 * t925 * t3 - t56 * t925 * t9) * t102;
        unknown[4][5] = t990;
        unknown[5][0] = t416;
        unknown[5][1] = t605;
        unknown[5][2] = t818;
        unknown[5][3] = t917;
        unknown[5][4] = t990;
        unknown[5][5] = 0.2e1 * t75 * (t352 * t352 / 0.4e1 + t1014 * t41 / 0.2e1 + t377 * t377 / 0.4e1 + t1024 * t67 / 0.2e1) - 0.4e1 * t392 * t397 + 0.8e1 * t392 * t392 * t98 - (-0.2e1 * t1014 * t9 + 0.2e1 * t1024 * t3 - 0.2e1 * t352 * t3 - 0.2e1 * t377 * t9 + 0.2e1 * t72 - 0.2e1 * t73) * t102;

        output[3] = Eigen::Map<Eigen::MatrixXd>(&unknown[0][0], 6, 6);
    }
    // @formatter:on
}
