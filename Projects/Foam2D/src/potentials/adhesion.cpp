#include "../../include/potentials.h"
// FIXME: Restrict & const * const


namespace cs2d::pot::adhesion {
	template <>
		void potential<1>(const double* a, const double* b, const double* c, const double* d, const double d0, const double logi_k, double *y) {
			// Offsets 0: a, 2: b, 4: c, 6: d, 8: d0, 9: logi_k
			std::array<double, 17> v;  // temporary variables
			v[0] = 0.5 * (a[0] + b[0] - c[0] - d[0]);
			v[1] = 0.5 * (a[1] + b[1] - c[1] - d[1]);
			v[2] = sqrt(v[0] * v[0] + v[1] * v[1]);
			v[3] = v[2] * v[2];
			v[4] = 3. * v[3];
			v[5] = 8. * d0;
			v[6] = v[5] * v[2];
			v[7] = d0 * d0;
			v[8] = 6. * v[7];
			v[9] = 0 - logi_k;
			v[10] = 0.5 * (a[0] + c[0] - b[0] - d[0]);
			v[11] = 0.5 * (a[1] + c[1] - b[1] - d[1]);
			v[12] = sqrt(v[10] * v[10] + v[11] * v[11]);
			v[13] = exp(v[9] * v[12]);
			v[14] = 1 + v[13];
			v[15] = 2. / v[14];
			v[14] = (0 - (v[4] * v[3] - v[6] * v[3] + v[8] * v[3] - v[7] * v[7]) / 12. * 1 / v[14] * v[15]) * v[13];
			v[9] = (v[14] * v[9] * 1 / v[12]) / 2.;
			v[10] = (v[9] * v[10] + v[9] * v[10]) * 0.5;
			v[15] = (v[15] - 1) * 0.0833333333333333;
			v[13] = 0 - v[15];
			v[16] = v[13] * v[3];
			v[13] = v[15] * v[4] + v[15] * v[3] * 3. + v[13] * v[6] + v[15] * v[8];
			v[13] = ((v[16] * v[5] + v[13] * v[2] + v[13] * v[2]) * 1 / v[2]) / 2.;
			v[0] = (v[13] * v[0] + v[13] * v[0]) * 0.5;
			y[0] = v[10] + v[0];
			v[9] = (v[9] * v[11] + v[9] * v[11]) * 0.5;
			v[13] = (v[13] * v[1] + v[13] * v[1]) * 0.5;
			y[1] = v[9] + v[13];
			y[2] = 0 - v[10] + v[0];
			y[3] = 0 - v[9] + v[13];
			y[4] = v[10] - v[0];
			y[5] = v[9] - v[13];
			y[6] = 0 - v[10] - v[0];
			y[7] = 0 - v[9] - v[13];
			v[13] = 0 - v[15];
			v[13] = v[15] * v[3] * 6. + v[13] * v[7] + v[13] * v[7];
		}
	template <>
		void potential<2>(const double* a, const double* b, const double* c, const double* d, const double d0, const double logi_k, double *y) {
			// Offsets 0: a, 2: b, 4: c, 6: d, 8: d0, 9: logi_k
			std::array<double, 140> v;  // temporary variables
			v[0] = 0.5 * (a[0] + b[0] - c[0] - d[0]);
			v[1] = 0.5 * (a[1] + b[1] - c[1] - d[1]);
			v[2] = sqrt(v[0] * v[0] + v[1] * v[1]);
			v[3] = v[2] * v[2];
			v[4] = 3. * v[3];
			v[5] = 8. * d0;
			v[6] = v[5] * v[2];
			v[7] = d0 * d0;
			v[8] = 6. * v[7];
			v[9] = (v[4] * v[3] - v[6] * v[3] + v[8] * v[3] - v[7] * v[7]) / 12.;
			v[10] = 0 - logi_k;
			v[11] = 0.5 * (a[0] + c[0] - b[0] - d[0]);
			v[12] = 0.5 * (a[1] + c[1] - b[1] - d[1]);
			v[13] = sqrt(v[11] * v[11] + v[12] * v[12]);
			v[14] = exp(v[10] * v[13]);
			v[15] = 1 + v[14];
			v[16] = 1 / v[15];
			v[17] = v[9] * v[16];
			v[18] = 2. / v[15];
			v[19] = 0 - v[17] * v[18];
			v[20] = v[19] * v[14];
			v[21] = 1 / v[13];
			v[22] = v[20] * v[10] * v[21];
			v[23] = v[22] / 2.;
			v[24] = ((0.5 * v[11] + v[11] * 0.5) / 2.) / v[13];
			v[25] = v[10] * v[24];
			v[26] = v[25] * v[14];
			v[27] = (0 - v[18] * v[26]) / v[15];
			v[28] = ((0.5 * v[0] + v[0] * 0.5) / 2.) / v[2];
			v[29] = v[28] * v[2] + v[2] * v[28];
			v[30] = 3. * v[29];
			v[31] = v[5] * v[28];
			v[26] = (0 - v[17] * v[27] - ((v[30] * v[3] + v[4] * v[29] - (v[31] * v[3] + v[6] * v[29]) + v[8] * v[29]) / 12. - v[17] * v[26]) * v[16] * v[18] + v[19] * v[25]) * v[14];
			v[22] = ((v[26] * v[10] - v[22] * v[24]) * v[21]) / 2.;
			v[23] = (v[23] * 0.5 + v[23] * 0.5 + v[22] * v[11] + v[22] * v[11]) * 0.5;
			v[21] = v[18] - 1;
			v[25] = v[21] * 0.0833333333333333;
			v[19] = 0 - v[25];
			v[17] = v[19] * v[3];
			v[16] = v[25] * v[4] + v[25] * v[3] * 3. + v[19] * v[6] + v[25] * v[8];
			v[32] = 1 / v[2];
			v[33] = (v[17] * v[5] + v[16] * v[2] + v[16] * v[2]) * v[32];
			v[34] = v[33] / 2.;
			v[27] = v[27] * 0.0833333333333333;
			v[35] = 0 - v[27];
			v[36] = v[19] * v[29] + v[35] * v[3];
			v[35] = v[25] * v[30] + v[27] * v[4] + (v[25] * v[29] + v[27] * v[3]) * 3. + v[19] * v[31] + v[35] * v[6] + v[27] * v[8];
			v[35] = ((v[36] * v[5] + v[16] * v[28] + v[16] * v[28] + v[35] * v[2] + v[35] * v[2] - v[33] * v[28]) * v[32]) / 2.;
			v[34] = (v[34] * 0.5 + v[34] * 0.5 + v[35] * v[0] + v[35] * v[0]) * 0.5;
			y[0] = v[23] + v[34];
			v[33] = 1 / v[15];
			v[32] = v[9] * v[33];
			v[16] = ((0.5 * v[12] + v[12] * 0.5) / 2.) / v[13];
			v[19] = v[10] * v[16];
			v[31] = v[19] * v[14];
			v[30] = (0 - v[18] * v[31]) / v[15];
			v[37] = ((0.5 * v[1] + v[1] * 0.5) / 2.) / v[2];
			v[38] = v[37] * v[2] + v[2] * v[37];
			v[39] = 3. * v[38];
			v[40] = v[5] * v[37];
			v[41] = 0 - v[32] * v[18];
			v[31] = (0 - v[32] * v[30] - ((v[39] * v[3] + v[4] * v[38] - (v[40] * v[3] + v[6] * v[38]) + v[8] * v[38]) / 12. - v[32] * v[31]) * v[33] * v[18] + v[41] * v[19]) * v[14];
			v[41] = v[41] * v[14];
			v[19] = 1 / v[13];
			v[32] = v[41] * v[10] * v[19];
			v[19] = ((v[31] * v[10] - v[32] * v[16]) * v[19]) / 2.;
			v[33] = (v[19] * v[11] + v[19] * v[11]) * 0.5;
			v[42] = v[21] * 0.0833333333333333;
			v[43] = 0 - v[42];
			v[30] = v[30] * 0.0833333333333333;
			v[44] = 0 - v[30];
			v[45] = v[43] * v[38] + v[44] * v[3];
			v[46] = v[42] * v[4] + v[42] * v[3] * 3. + v[43] * v[6] + v[42] * v[8];
			v[44] = v[42] * v[39] + v[30] * v[4] + (v[42] * v[38] + v[30] * v[3]) * 3. + v[43] * v[40] + v[44] * v[6] + v[30] * v[8];
			v[43] = v[43] * v[3];
			v[40] = 1 / v[2];
			v[39] = (v[43] * v[5] + v[46] * v[2] + v[46] * v[2]) * v[40];
			v[40] = ((v[45] * v[5] + v[46] * v[37] + v[46] * v[37] + v[44] * v[2] + v[44] * v[2] - v[39] * v[37]) * v[40]) / 2.;
			v[44] = (v[40] * v[0] + v[40] * v[0]) * 0.5;
			y[1] = v[33] + v[44];
			v[46] = 1 / v[15];
			v[47] = v[9] * v[46];
			v[48] = 0 - v[47] * v[18];
			v[49] = v[48] * v[14];
			v[50] = 1 / v[13];
			v[51] = v[49] * v[10] * v[50];
			v[52] = v[51] / 2.;
			v[53] = ((-0.5 * v[11] + v[11] * -0.5) / 2.) / v[13];
			v[54] = v[10] * v[53];
			v[55] = v[54] * v[14];
			v[56] = (0 - v[18] * v[55]) / v[15];
			v[57] = ((0.5 * v[0] + v[0] * 0.5) / 2.) / v[2];
			v[58] = v[57] * v[2] + v[2] * v[57];
			v[59] = 3. * v[58];
			v[60] = v[5] * v[57];
			v[55] = (0 - v[47] * v[56] - ((v[59] * v[3] + v[4] * v[58] - (v[60] * v[3] + v[6] * v[58]) + v[8] * v[58]) / 12. - v[47] * v[55]) * v[46] * v[18] + v[48] * v[54]) * v[14];
			v[51] = ((v[55] * v[10] - v[51] * v[53]) * v[50]) / 2.;
			v[52] = (v[52] * -0.5 + v[52] * -0.5 + v[51] * v[11] + v[51] * v[11]) * 0.5;
			v[50] = v[21] * 0.0833333333333333;
			v[54] = 0 - v[50];
			v[48] = v[54] * v[3];
			v[47] = v[50] * v[4] + v[50] * v[3] * 3. + v[54] * v[6] + v[50] * v[8];
			v[46] = 1 / v[2];
			v[61] = (v[48] * v[5] + v[47] * v[2] + v[47] * v[2]) * v[46];
			v[62] = v[61] / 2.;
			v[56] = v[56] * 0.0833333333333333;
			v[63] = 0 - v[56];
			v[64] = v[54] * v[58] + v[63] * v[3];
			v[63] = v[50] * v[59] + v[56] * v[4] + (v[50] * v[58] + v[56] * v[3]) * 3. + v[54] * v[60] + v[63] * v[6] + v[56] * v[8];
			v[63] = ((v[64] * v[5] + v[47] * v[57] + v[47] * v[57] + v[63] * v[2] + v[63] * v[2] - v[61] * v[57]) * v[46]) / 2.;
			v[62] = (v[62] * 0.5 + v[62] * 0.5 + v[63] * v[0] + v[63] * v[0]) * 0.5;
			y[2] = v[52] + v[62];
			v[61] = 1 / v[15];
			v[46] = v[9] * v[61];
			v[47] = ((-0.5 * v[12] + v[12] * -0.5) / 2.) / v[13];
			v[54] = v[10] * v[47];
			v[60] = v[54] * v[14];
			v[59] = (0 - v[18] * v[60]) / v[15];
			v[65] = ((0.5 * v[1] + v[1] * 0.5) / 2.) / v[2];
			v[66] = v[65] * v[2] + v[2] * v[65];
			v[67] = 3. * v[66];
			v[68] = v[5] * v[65];
			v[69] = 0 - v[46] * v[18];
			v[60] = (0 - v[46] * v[59] - ((v[67] * v[3] + v[4] * v[66] - (v[68] * v[3] + v[6] * v[66]) + v[8] * v[66]) / 12. - v[46] * v[60]) * v[61] * v[18] + v[69] * v[54]) * v[14];
			v[69] = v[69] * v[14];
			v[54] = 1 / v[13];
			v[46] = v[69] * v[10] * v[54];
			v[54] = ((v[60] * v[10] - v[46] * v[47]) * v[54]) / 2.;
			v[61] = (v[54] * v[11] + v[54] * v[11]) * 0.5;
			v[70] = v[21] * 0.0833333333333333;
			v[71] = 0 - v[70];
			v[59] = v[59] * 0.0833333333333333;
			v[72] = 0 - v[59];
			v[73] = v[71] * v[66] + v[72] * v[3];
			v[74] = v[70] * v[4] + v[70] * v[3] * 3. + v[71] * v[6] + v[70] * v[8];
			v[72] = v[70] * v[67] + v[59] * v[4] + (v[70] * v[66] + v[59] * v[3]) * 3. + v[71] * v[68] + v[72] * v[6] + v[59] * v[8];
			v[71] = v[71] * v[3];
			v[68] = 1 / v[2];
			v[67] = (v[71] * v[5] + v[74] * v[2] + v[74] * v[2]) * v[68];
			v[68] = ((v[73] * v[5] + v[74] * v[65] + v[74] * v[65] + v[72] * v[2] + v[72] * v[2] - v[67] * v[65]) * v[68]) / 2.;
			v[72] = (v[68] * v[0] + v[68] * v[0]) * 0.5;
			y[3] = v[61] + v[72];
			v[74] = 1 / v[15];
			v[75] = v[9] * v[74];
			v[76] = 0 - v[75] * v[18];
			v[77] = v[76] * v[14];
			v[78] = 1 / v[13];
			v[79] = v[77] * v[10] * v[78];
			v[80] = v[79] / 2.;
			v[81] = ((0.5 * v[11] + v[11] * 0.5) / 2.) / v[13];
			v[82] = v[10] * v[81];
			v[83] = v[82] * v[14];
			v[84] = (0 - v[18] * v[83]) / v[15];
			v[85] = ((-0.5 * v[0] + v[0] * -0.5) / 2.) / v[2];
			v[86] = v[85] * v[2] + v[2] * v[85];
			v[87] = 3. * v[86];
			v[88] = v[5] * v[85];
			v[83] = (0 - v[75] * v[84] - ((v[87] * v[3] + v[4] * v[86] - (v[88] * v[3] + v[6] * v[86]) + v[8] * v[86]) / 12. - v[75] * v[83]) * v[74] * v[18] + v[76] * v[82]) * v[14];
			v[79] = ((v[83] * v[10] - v[79] * v[81]) * v[78]) / 2.;
			v[80] = (v[80] * 0.5 + v[80] * 0.5 + v[79] * v[11] + v[79] * v[11]) * 0.5;
			v[78] = v[21] * 0.0833333333333333;
			v[82] = 0 - v[78];
			v[76] = v[82] * v[3];
			v[75] = v[78] * v[4] + v[78] * v[3] * 3. + v[82] * v[6] + v[78] * v[8];
			v[74] = 1 / v[2];
			v[89] = (v[76] * v[5] + v[75] * v[2] + v[75] * v[2]) * v[74];
			v[90] = v[89] / 2.;
			v[84] = v[84] * 0.0833333333333333;
			v[91] = 0 - v[84];
			v[92] = v[82] * v[86] + v[91] * v[3];
			v[91] = v[78] * v[87] + v[84] * v[4] + (v[78] * v[86] + v[84] * v[3]) * 3. + v[82] * v[88] + v[91] * v[6] + v[84] * v[8];
			v[91] = ((v[92] * v[5] + v[75] * v[85] + v[75] * v[85] + v[91] * v[2] + v[91] * v[2] - v[89] * v[85]) * v[74]) / 2.;
			v[90] = (v[90] * -0.5 + v[90] * -0.5 + v[91] * v[0] + v[91] * v[0]) * 0.5;
			y[4] = v[80] + v[90];
			v[89] = 1 / v[15];
			v[74] = v[9] * v[89];
			v[75] = ((0.5 * v[12] + v[12] * 0.5) / 2.) / v[13];
			v[82] = v[10] * v[75];
			v[88] = v[82] * v[14];
			v[87] = (0 - v[18] * v[88]) / v[15];
			v[93] = ((-0.5 * v[1] + v[1] * -0.5) / 2.) / v[2];
			v[94] = v[93] * v[2] + v[2] * v[93];
			v[95] = 3. * v[94];
			v[96] = v[5] * v[93];
			v[97] = 0 - v[74] * v[18];
			v[88] = (0 - v[74] * v[87] - ((v[95] * v[3] + v[4] * v[94] - (v[96] * v[3] + v[6] * v[94]) + v[8] * v[94]) / 12. - v[74] * v[88]) * v[89] * v[18] + v[97] * v[82]) * v[14];
			v[97] = v[97] * v[14];
			v[82] = 1 / v[13];
			v[74] = v[97] * v[10] * v[82];
			v[82] = ((v[88] * v[10] - v[74] * v[75]) * v[82]) / 2.;
			v[89] = (v[82] * v[11] + v[82] * v[11]) * 0.5;
			v[98] = v[21] * 0.0833333333333333;
			v[99] = 0 - v[98];
			v[87] = v[87] * 0.0833333333333333;
			v[100] = 0 - v[87];
			v[101] = v[99] * v[94] + v[100] * v[3];
			v[102] = v[98] * v[4] + v[98] * v[3] * 3. + v[99] * v[6] + v[98] * v[8];
			v[100] = v[98] * v[95] + v[87] * v[4] + (v[98] * v[94] + v[87] * v[3]) * 3. + v[99] * v[96] + v[100] * v[6] + v[87] * v[8];
			v[99] = v[99] * v[3];
			v[96] = 1 / v[2];
			v[95] = (v[99] * v[5] + v[102] * v[2] + v[102] * v[2]) * v[96];
			v[96] = ((v[101] * v[5] + v[102] * v[93] + v[102] * v[93] + v[100] * v[2] + v[100] * v[2] - v[95] * v[93]) * v[96]) / 2.;
			v[100] = (v[96] * v[0] + v[96] * v[0]) * 0.5;
			y[5] = v[89] + v[100];
			v[102] = 1 / v[15];
			v[103] = v[9] * v[102];
			v[104] = 0 - v[103] * v[18];
			v[105] = v[104] * v[14];
			v[106] = 1 / v[13];
			v[107] = v[105] * v[10] * v[106];
			v[108] = v[107] / 2.;
			v[109] = ((-0.5 * v[11] + v[11] * -0.5) / 2.) / v[13];
			v[110] = v[10] * v[109];
			v[111] = v[110] * v[14];
			v[112] = (0 - v[18] * v[111]) / v[15];
			v[113] = ((-0.5 * v[0] + v[0] * -0.5) / 2.) / v[2];
			v[114] = v[113] * v[2] + v[2] * v[113];
			v[115] = 3. * v[114];
			v[116] = v[5] * v[113];
			v[111] = (0 - v[103] * v[112] - ((v[115] * v[3] + v[4] * v[114] - (v[116] * v[3] + v[6] * v[114]) + v[8] * v[114]) / 12. - v[103] * v[111]) * v[102] * v[18] + v[104] * v[110]) * v[14];
			v[107] = ((v[111] * v[10] - v[107] * v[109]) * v[106]) / 2.;
			v[108] = (v[108] * -0.5 + v[108] * -0.5 + v[107] * v[11] + v[107] * v[11]) * 0.5;
			v[106] = v[21] * 0.0833333333333333;
			v[110] = 0 - v[106];
			v[104] = v[110] * v[3];
			v[103] = v[106] * v[4] + v[106] * v[3] * 3. + v[110] * v[6] + v[106] * v[8];
			v[102] = 1 / v[2];
			v[117] = (v[104] * v[5] + v[103] * v[2] + v[103] * v[2]) * v[102];
			v[118] = v[117] / 2.;
			v[112] = v[112] * 0.0833333333333333;
			v[119] = 0 - v[112];
			v[120] = v[110] * v[114] + v[119] * v[3];
			v[119] = v[106] * v[115] + v[112] * v[4] + (v[106] * v[114] + v[112] * v[3]) * 3. + v[110] * v[116] + v[119] * v[6] + v[112] * v[8];
			v[119] = ((v[120] * v[5] + v[103] * v[113] + v[103] * v[113] + v[119] * v[2] + v[119] * v[2] - v[117] * v[113]) * v[102]) / 2.;
			v[118] = (v[118] * -0.5 + v[118] * -0.5 + v[119] * v[0] + v[119] * v[0]) * 0.5;
			y[6] = v[108] + v[118];
			v[117] = 1 / v[15];
			v[102] = v[9] * v[117];
			v[103] = ((-0.5 * v[12] + v[12] * -0.5) / 2.) / v[13];
			v[110] = v[10] * v[103];
			v[116] = v[110] * v[14];
			v[115] = (0 - v[18] * v[116]) / v[15];
			v[121] = ((-0.5 * v[1] + v[1] * -0.5) / 2.) / v[2];
			v[122] = v[121] * v[2] + v[2] * v[121];
			v[123] = 3. * v[122];
			v[124] = v[5] * v[121];
			v[125] = 0 - v[102] * v[18];
			v[116] = (0 - v[102] * v[115] - ((v[123] * v[3] + v[4] * v[122] - (v[124] * v[3] + v[6] * v[122]) + v[8] * v[122]) / 12. - v[102] * v[116]) * v[117] * v[18] + v[125] * v[110]) * v[14];
			v[125] = v[125] * v[14];
			v[110] = 1 / v[13];
			v[102] = v[125] * v[10] * v[110];
			v[110] = ((v[116] * v[10] - v[102] * v[103]) * v[110]) / 2.;
			v[117] = (v[110] * v[11] + v[110] * v[11]) * 0.5;
			v[126] = v[21] * 0.0833333333333333;
			v[127] = 0 - v[126];
			v[115] = v[115] * 0.0833333333333333;
			v[128] = 0 - v[115];
			v[129] = v[127] * v[122] + v[128] * v[3];
			v[130] = v[126] * v[4] + v[126] * v[3] * 3. + v[127] * v[6] + v[126] * v[8];
			v[128] = v[126] * v[123] + v[115] * v[4] + (v[126] * v[122] + v[115] * v[3]) * 3. + v[127] * v[124] + v[128] * v[6] + v[115] * v[8];
			v[127] = v[127] * v[3];
			v[124] = 1 / v[2];
			v[123] = (v[127] * v[5] + v[130] * v[2] + v[130] * v[2]) * v[124];
			v[124] = ((v[129] * v[5] + v[130] * v[121] + v[130] * v[121] + v[128] * v[2] + v[128] * v[2] - v[123] * v[121]) * v[124]) / 2.;
			v[128] = (v[124] * v[0] + v[124] * v[0]) * 0.5;
			y[7] = v[117] + v[128];
			v[130] = 8. * v[2];
			v[131] = d0 + d0;
			v[132] = 6. * v[131];
			v[133] = (0 - (0 - v[130] * v[3] + v[132] * v[3] - (v[131] * v[7] + v[7] * v[131])) / 12. * 1 / v[15] * v[18]) * v[14];
			v[134] = (v[133] * v[10] * 1 / v[13]) / 2.;
			v[135] = (v[134] * v[11] + v[134] * v[11]) * 0.5;
			v[21] = v[21] * 0.0833333333333333;
			v[136] = 0 - v[21];
			v[132] = v[136] * v[130] + v[21] * v[132];
			v[132] = ((v[136] * v[3] * 8. + v[132] * v[2] + v[132] * v[2]) * 1 / v[2]) / 2.;
			v[136] = (v[132] * v[0] + v[132] * v[0]) * 0.5;
			v[130] = 1 / v[15];
			v[9] = v[9] * v[130];
			v[137] = 0 - v[9] * v[18];
			v[138] = -1 * v[13];
			v[139] = v[138] * v[14];
			v[15] = (0 - v[18] * v[139]) / v[15];
			v[139] = (0 - v[9] * v[15] - (0 - v[9] * v[139]) * v[130] * v[18] + v[137] * v[138]) * v[14];
			v[137] = ((v[137] * v[14] * -1 + v[139] * v[10]) * 1 / v[13]) / 2.;
			v[11] = (v[137] * v[11] + v[137] * v[11]) * 0.5;
			v[15] = v[15] * 0.0833333333333333;
			v[14] = 0 - v[15];
			v[10] = v[14] * v[3];
			v[14] = v[15] * v[4] + v[15] * v[3] * 3. + v[14] * v[6] + v[15] * v[8];
			v[14] = ((v[10] * v[5] + v[14] * v[2] + v[14] * v[2]) * 1 / v[2]) / 2.;
			v[0] = (v[14] * v[0] + v[14] * v[0]) * 0.5;
			v[22] = (v[22] * v[12] + v[22] * v[12]) * 0.5;
			v[35] = (v[35] * v[1] + v[35] * v[1]) * 0.5;
			y[8] = v[22] + v[35];
			v[32] = v[32] / 2.;
			v[32] = (v[32] * 0.5 + v[32] * 0.5 + v[19] * v[12] + v[19] * v[12]) * 0.5;
			v[39] = v[39] / 2.;
			v[39] = (v[39] * 0.5 + v[39] * 0.5 + v[40] * v[1] + v[40] * v[1]) * 0.5;
			y[9] = v[32] + v[39];
			v[51] = (v[51] * v[12] + v[51] * v[12]) * 0.5;
			v[63] = (v[63] * v[1] + v[63] * v[1]) * 0.5;
			y[10] = v[51] + v[63];
			v[46] = v[46] / 2.;
			v[46] = (v[46] * -0.5 + v[46] * -0.5 + v[54] * v[12] + v[54] * v[12]) * 0.5;
			v[67] = v[67] / 2.;
			v[67] = (v[67] * 0.5 + v[67] * 0.5 + v[68] * v[1] + v[68] * v[1]) * 0.5;
			y[11] = v[46] + v[67];
			v[79] = (v[79] * v[12] + v[79] * v[12]) * 0.5;
			v[91] = (v[91] * v[1] + v[91] * v[1]) * 0.5;
			y[12] = v[79] + v[91];
			v[74] = v[74] / 2.;
			v[74] = (v[74] * 0.5 + v[74] * 0.5 + v[82] * v[12] + v[82] * v[12]) * 0.5;
			v[95] = v[95] / 2.;
			v[95] = (v[95] * -0.5 + v[95] * -0.5 + v[96] * v[1] + v[96] * v[1]) * 0.5;
			y[13] = v[74] + v[95];
			v[107] = (v[107] * v[12] + v[107] * v[12]) * 0.5;
			v[119] = (v[119] * v[1] + v[119] * v[1]) * 0.5;
			y[14] = v[107] + v[119];
			v[102] = v[102] / 2.;
			v[102] = (v[102] * -0.5 + v[102] * -0.5 + v[110] * v[12] + v[110] * v[12]) * 0.5;
			v[123] = v[123] / 2.;
			v[123] = (v[123] * -0.5 + v[123] * -0.5 + v[124] * v[1] + v[124] * v[1]) * 0.5;
			y[15] = v[102] + v[123];
			v[134] = (v[134] * v[12] + v[134] * v[12]) * 0.5;
			v[132] = (v[132] * v[1] + v[132] * v[1]) * 0.5;
			v[137] = (v[137] * v[12] + v[137] * v[12]) * 0.5;
			v[14] = (v[14] * v[1] + v[14] * v[1]) * 0.5;
			y[16] = 0 - v[23] + v[34];
			y[17] = 0 - v[33] + v[44];
			y[18] = 0 - v[52] + v[62];
			y[19] = 0 - v[61] + v[72];
			y[20] = 0 - v[80] + v[90];
			y[21] = 0 - v[89] + v[100];
			y[22] = 0 - v[108] + v[118];
			y[23] = 0 - v[117] + v[128];
			y[24] = 0 - v[22] + v[35];
			y[25] = 0 - v[32] + v[39];
			y[26] = 0 - v[51] + v[63];
			y[27] = 0 - v[46] + v[67];
			y[28] = 0 - v[79] + v[91];
			y[29] = 0 - v[74] + v[95];
			y[30] = 0 - v[107] + v[119];
			y[31] = 0 - v[102] + v[123];
			y[32] = v[23] - v[34];
			y[33] = v[33] - v[44];
			y[34] = v[52] - v[62];
			y[35] = v[61] - v[72];
			y[36] = v[80] - v[90];
			y[37] = v[89] - v[100];
			y[38] = v[108] - v[118];
			y[39] = v[117] - v[128];
			y[40] = v[22] - v[35];
			y[41] = v[32] - v[39];
			y[42] = v[51] - v[63];
			y[43] = v[46] - v[67];
			y[44] = v[79] - v[91];
			y[45] = v[74] - v[95];
			y[46] = v[107] - v[119];
			y[47] = v[102] - v[123];
			y[48] = 0 - v[23] - v[34];
			y[49] = 0 - v[33] - v[44];
			y[50] = 0 - v[52] - v[62];
			y[51] = 0 - v[61] - v[72];
			y[52] = 0 - v[80] - v[90];
			y[53] = 0 - v[89] - v[100];
			y[54] = 0 - v[108] - v[118];
			y[55] = 0 - v[117] - v[128];
			y[56] = 0 - v[22] - v[35];
			y[57] = 0 - v[32] - v[39];
			y[58] = 0 - v[51] - v[63];
			y[59] = 0 - v[46] - v[67];
			y[60] = 0 - v[79] - v[91];
			y[61] = 0 - v[74] - v[95];
			y[62] = 0 - v[107] - v[119];
			y[63] = 0 - v[102] - v[123];
			v[14] = 0 - v[27];
			v[14] = (v[25] * v[29] + v[27] * v[3]) * 6. + v[14] * v[7] + v[14] * v[7];
			v[14] = 0 - v[30];
			v[14] = (v[42] * v[38] + v[30] * v[3]) * 6. + v[14] * v[7] + v[14] * v[7];
			v[14] = 0 - v[56];
			v[14] = (v[50] * v[58] + v[56] * v[3]) * 6. + v[14] * v[7] + v[14] * v[7];
			v[14] = 0 - v[59];
			v[14] = (v[70] * v[66] + v[59] * v[3]) * 6. + v[14] * v[7] + v[14] * v[7];
			v[14] = 0 - v[84];
			v[14] = (v[78] * v[86] + v[84] * v[3]) * 6. + v[14] * v[7] + v[14] * v[7];
			v[14] = 0 - v[87];
			v[14] = (v[98] * v[94] + v[87] * v[3]) * 6. + v[14] * v[7] + v[14] * v[7];
			v[14] = 0 - v[112];
			v[14] = (v[106] * v[114] + v[112] * v[3]) * 6. + v[14] * v[7] + v[14] * v[7];
			v[14] = 0 - v[115];
			v[14] = (v[126] * v[122] + v[115] * v[3]) * 6. + v[14] * v[7] + v[14] * v[7];
			v[14] = 0 - v[21];
			v[21] = v[21] * v[3] * 6. + v[14] * v[7] + v[14] * v[7];
			v[14] = v[14] * v[131] + v[14] * v[131];
			v[14] = 0 - v[15];
			v[14] = v[15] * v[3] * 6. + v[14] * v[7] + v[14] * v[7];
		}
}
