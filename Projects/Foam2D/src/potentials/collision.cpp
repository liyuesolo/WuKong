#include "../../include/potentials.h"

namespace cs2d::pot::collision {
	template <>
		void vertex_line_potential<1>(const double *p, const double *a, const double *b, const double *d0, double* y) {
			// Offsets 0: p, 2: a, 4: b, 6: d0
			std::array<double, 11> v;  // temporary variables
			v[0] = p[0] - a[0];
			v[1] = b[1] - a[1];
			v[2] = p[1] - a[1];
			v[3] = b[0] - a[0];
			v[4] = sqrt(v[3] * v[3] + v[1] * v[1]);
			v[5] = (v[0] * v[1] - v[2] * v[3]) / v[4];
			v[6] = fabs(v[5]);
			v[7] = v[6] / d0[0];
			v[8] = 0 - log(v[7]);
			v[6] = v[6] - d0[0];
			v[8] = v[8] * v[6] + v[8] * v[6];
			v[6] = (0 - v[6] * v[6]) * 1 / v[7] * 1 / d0[0];
			v[9] = ((v[5] > 0?1:(v[5] < 0?-1:0))) * (v[8] + v[6]) * 1 / v[4];
			y[0] = v[9] * v[1];
			v[10] = 0 - v[9];
			y[1] = v[10] * v[3];
			v[5] = ((0 - v[9] * v[5]) * 1 / v[4]) / 2.;
			y[4] = v[10] * v[2] + v[5] * v[3] + v[5] * v[3];
			y[2] = 0 - y[0] - y[4];
			y[5] = v[9] * v[0] + v[5] * v[1] + v[5] * v[1];
			y[3] = 0 - y[1] - y[5];
		}

	template <>
		void vertex_line_potential<2>(const double *p, const double *a, const double *b, const double *d0, double* y) {
			// Offsets 0: p, 2: a, 4: b, 6: d0
			std::array<double, 72> v;  // temporary variables
			v[0] = p[0] - a[0];
			v[1] = b[1] - a[1];
			v[2] = p[1] - a[1];
			v[3] = b[0] - a[0];
			v[4] = sqrt(v[3] * v[3] + v[1] * v[1]);
			v[5] = (v[0] * v[1] - v[2] * v[3]) / v[4];
			v[6] = fabs(v[5]);
			v[7] = v[6] / d0[0];
			v[8] = log(v[7]);
			v[9] = 0 - v[8];
			v[10] = v[1] / v[4];
			v[11] = ((v[5] > 0?1:(v[5] < 0?-1:0))) * v[10];
			v[12] = v[11] / d0[0];
			v[13] = v[12] / v[7];
			v[14] = 0 - v[13];
			v[6] = v[6] - d0[0];
			v[14] = v[9] * v[11] + v[9] * v[11] + v[14] * v[6] + v[14] * v[6];
			v[15] = 0 - v[6] * v[6];
			v[16] = 1 / v[7];
			v[17] = v[15] * v[16];
			v[18] = 1 / d0[0];
			v[16] = (0 - v[17] * v[13] + (-(v[11] * v[6] + v[6] * v[11])) * v[16]) * v[18];
			v[13] = 1 / v[4];
			v[11] = ((v[5] > 0?1:(v[5] < 0?-1:0))) * (v[14] + v[16]) * v[13];
			y[0] = v[11] * v[1];
			v[19] = 0 - v[8];
			v[20] = (0 - v[3]) / v[4];
			v[21] = ((v[5] > 0?1:(v[5] < 0?-1:0))) * v[20];
			v[22] = v[21] / d0[0];
			v[23] = v[22] / v[7];
			v[24] = 0 - v[23];
			v[24] = v[19] * v[21] + v[19] * v[21] + v[24] * v[6] + v[24] * v[6];
			v[25] = 1 / v[7];
			v[26] = v[15] * v[25];
			v[27] = 1 / d0[0];
			v[25] = (0 - v[26] * v[23] + (-(v[21] * v[6] + v[6] * v[21])) * v[25]) * v[27];
			v[23] = 1 / v[4];
			v[21] = ((v[5] > 0?1:(v[5] < 0?-1:0))) * (v[24] + v[25]) * v[23];
			y[1] = v[21] * v[1];
			v[28] = 0 - v[8];
			v[29] = ((-1 * v[3] + v[3] * -1) / 2.) / v[4];
			v[30] = (-1 * v[1] - v[2] * -1 - v[5] * v[29]) / v[4];
			v[31] = ((v[5] > 0?1:(v[5] < 0?-1:0))) * v[30];
			v[32] = v[31] / d0[0];
			v[33] = v[32] / v[7];
			v[34] = 0 - v[33];
			v[34] = v[28] * v[31] + v[28] * v[31] + v[34] * v[6] + v[34] * v[6];
			v[35] = 1 / v[7];
			v[36] = v[15] * v[35];
			v[37] = 1 / d0[0];
			v[35] = (0 - v[36] * v[33] + (-(v[31] * v[6] + v[6] * v[31])) * v[35]) * v[37];
			v[37] = v[36] * v[37];
			v[36] = 1 / v[4];
			v[28] = ((v[5] > 0?1:(v[5] < 0?-1:0))) * (v[28] * v[6] + v[28] * v[6] + v[37]) * v[36];
			v[36] = (((v[5] > 0?1:(v[5] < 0?-1:0))) * (v[34] + v[35]) - v[28] * v[29]) * v[36];
			y[2] = v[36] * v[1];
			v[33] = 0 - v[8];
			v[31] = 1 / v[7];
			v[38] = v[15] * v[31];
			v[39] = 1 / d0[0];
			v[40] = v[38] * v[39];
			v[41] = 1 / v[4];
			v[42] = ((v[5] > 0?1:(v[5] < 0?-1:0))) * (v[33] * v[6] + v[33] * v[6] + v[40]) * v[41];
			v[43] = ((-1 * v[1] + v[1] * -1) / 2.) / v[4];
			v[44] = (v[0] * -1 - -1 * v[3] - v[5] * v[43]) / v[4];
			v[45] = ((v[5] > 0?1:(v[5] < 0?-1:0))) * v[44];
			v[46] = v[45] / d0[0];
			v[47] = v[46] / v[7];
			v[48] = 0 - v[47];
			v[48] = v[33] * v[45] + v[33] * v[45] + v[48] * v[6] + v[48] * v[6];
			v[47] = (0 - v[38] * v[47] + (-(v[45] * v[6] + v[6] * v[45])) * v[31]) * v[39];
			v[41] = (((v[5] > 0?1:(v[5] < 0?-1:0))) * (v[48] + v[47]) - v[42] * v[43]) * v[41];
			y[3] = v[42] * -1 + v[41] * v[1];
			v[45] = 0 - v[8];
			v[39] = ((v[3] + v[3]) / 2.) / v[4];
			v[38] = (0 - v[2] - v[5] * v[39]) / v[4];
			v[31] = ((v[5] > 0?1:(v[5] < 0?-1:0))) * v[38];
			v[33] = v[31] / d0[0];
			v[49] = v[33] / v[7];
			v[50] = 0 - v[49];
			v[50] = v[45] * v[31] + v[45] * v[31] + v[50] * v[6] + v[50] * v[6];
			v[51] = 1 / v[7];
			v[52] = v[15] * v[51];
			v[53] = 1 / d0[0];
			v[51] = (0 - v[52] * v[49] + (-(v[31] * v[6] + v[6] * v[31])) * v[51]) * v[53];
			v[53] = v[52] * v[53];
			v[52] = 1 / v[4];
			v[45] = ((v[5] > 0?1:(v[5] < 0?-1:0))) * (v[45] * v[6] + v[45] * v[6] + v[53]) * v[52];
			v[52] = (((v[5] > 0?1:(v[5] < 0?-1:0))) * (v[50] + v[51]) - v[45] * v[39]) * v[52];
			y[4] = v[52] * v[1];
			v[49] = 0 - v[8];
			v[31] = 1 / v[7];
			v[54] = v[15] * v[31];
			v[55] = 1 / d0[0];
			v[56] = v[54] * v[55];
			v[57] = 1 / v[4];
			v[58] = ((v[5] > 0?1:(v[5] < 0?-1:0))) * (v[49] * v[6] + v[49] * v[6] + v[56]) * v[57];
			v[59] = ((v[1] + v[1]) / 2.) / v[4];
			v[60] = (v[0] - v[5] * v[59]) / v[4];
			v[61] = ((v[5] > 0?1:(v[5] < 0?-1:0))) * v[60];
			v[62] = v[61] / d0[0];
			v[63] = v[62] / v[7];
			v[64] = 0 - v[63];
			v[64] = v[49] * v[61] + v[49] * v[61] + v[64] * v[6] + v[64] * v[6];
			v[63] = (0 - v[54] * v[63] + (-(v[61] * v[6] + v[6] * v[61])) * v[31]) * v[55];
			v[57] = (((v[5] > 0?1:(v[5] < 0?-1:0))) * (v[64] + v[63]) - v[58] * v[59]) * v[57];
			y[5] = v[58] + v[57] * v[1];
			v[8] = 0 - v[8];
			v[61] = (0 - v[7]) / d0[0];
			v[55] = v[61] / v[7];
			v[54] = 0 - v[55];
			v[54] = v[8] * -1 + v[8] * -1 + v[54] * v[6] + v[54] * v[6];
			v[8] = 1 / v[7];
			v[15] = v[15] * v[8];
			v[31] = 1 / d0[0];
			v[49] = v[15] * v[31];
			v[31] = (0 - v[15] * v[55] + (-(-1 * v[6] + v[6] * -1)) * v[8] - v[49]) * v[31];
			v[15] = ((v[5] > 0?1:(v[5] < 0?-1:0))) * (v[54] + v[31]) * 1 / v[4];
			v[8] = 0 - v[11];
			y[6] = v[8] * v[3];
			v[55] = 0 - v[21];
			y[7] = v[55] * v[3];
			v[65] = 0 - v[36];
			y[8] = (0 - v[28]) * -1 + v[65] * v[3];
			v[66] = 0 - v[41];
			y[9] = v[66] * v[3];
			v[67] = 0 - v[52];
			y[10] = 0 - v[45] + v[67] * v[3];
			v[68] = 0 - v[57];
			y[11] = v[68] * v[3];
			v[69] = 0 - v[15];
			v[18] = v[17] * v[18];
			v[13] = ((v[5] > 0?1:(v[5] < 0?-1:0))) * (v[9] * v[6] + v[9] * v[6] + v[18]) * v[13];
			v[10] = ((0 - v[13] * v[10] - v[11] * v[5]) * 1 / v[4]) / 2.;
			y[24] = v[8] * v[2] + v[10] * v[3] + v[10] * v[3];
			y[12] = 0 - y[0] - y[24];
			v[27] = v[26] * v[27];
			v[23] = ((v[5] > 0?1:(v[5] < 0?-1:0))) * (v[19] * v[6] + v[19] * v[6] + v[27]) * v[23];
			v[20] = ((0 - v[23] * v[20] - v[21] * v[5]) * 1 / v[4]) / 2.;
			y[25] = 0 - v[23] + v[55] * v[2] + v[20] * v[3] + v[20] * v[3];
			y[13] = 0 - y[1] - y[25];
			v[23] = 1 / v[4];
			v[55] = (0 - v[28] * v[5]) * v[23];
			v[19] = v[55] / 2.;
			v[55] = ((0 - v[28] * v[30] - v[36] * v[5] - v[55] * v[29]) * v[23]) / 2.;
			y[26] = v[65] * v[2] + v[19] * -1 + v[19] * -1 + v[55] * v[3] + v[55] * v[3];
			y[14] = 0 - y[2] - y[26];
			v[19] = 1 / v[4];
			v[65] = (0 - v[42] * v[5]) * v[19];
			v[19] = ((0 - v[42] * v[44] - v[41] * v[5] - v[65] * v[43]) * v[19]) / 2.;
			y[27] = (0 - v[42]) * -1 + v[66] * v[2] + v[19] * v[3] + v[19] * v[3];
			y[15] = 0 - y[3] - y[27];
			v[66] = 1 / v[4];
			v[42] = (0 - v[45] * v[5]) * v[66];
			v[44] = v[42] / 2.;
			v[42] = ((0 - v[45] * v[38] - v[52] * v[5] - v[42] * v[39]) * v[66]) / 2.;
			y[28] = v[67] * v[2] + v[44] + v[44] + v[42] * v[3] + v[42] * v[3];
			y[16] = 0 - y[4] - y[28];
			v[44] = 1 / v[4];
			v[67] = (0 - v[58] * v[5]) * v[44];
			v[44] = ((0 - v[58] * v[60] - v[57] * v[5] - v[67] * v[59]) * v[44]) / 2.;
			y[29] = v[68] * v[2] + v[44] * v[3] + v[44] * v[3];
			y[17] = 0 - y[5] - y[29];
			v[5] = ((0 - v[15] * v[5]) * 1 / v[4]) / 2.;
			v[71] = v[69] * v[2] + v[5] * v[3] + v[5] * v[3];
			y[30] = v[13] + v[11] * v[0] + v[10] * v[1] + v[10] * v[1];
			y[18] = 0 - y[6] - y[30];
			y[31] = v[21] * v[0] + v[20] * v[1] + v[20] * v[1];
			y[19] = 0 - y[7] - y[31];
			y[32] = v[28] * -1 + v[36] * v[0] + v[55] * v[1] + v[55] * v[1];
			y[20] = 0 - y[8] - y[32];
			v[65] = v[65] / 2.;
			y[33] = v[41] * v[0] + v[65] * -1 + v[65] * -1 + v[19] * v[1] + v[19] * v[1];
			y[21] = 0 - y[9] - y[33];
			y[34] = v[52] * v[0] + v[42] * v[1] + v[42] * v[1];
			y[22] = 0 - y[10] - y[34];
			v[67] = v[67] / 2.;
			y[35] = v[57] * v[0] + v[67] + v[67] + v[44] * v[1] + v[44] * v[1];
			y[23] = 0 - y[11] - y[35];
			v[70] = v[15] * v[0] + v[5] * v[1] + v[5] * v[1];
		}

	template <>
		void vertex_vertex_potential_a<1>(const double *p, const double *a, const double *, const double *d0, double* y) {
			// Offsets 0: p, 2: a, 4: b, 6: d0
			std::array<double, 6> v;  // temporary variables
			v[0] = a[0] - p[0];
			v[1] = a[1] - p[1];
			v[2] = sqrt(v[0] * v[0] + v[1] * v[1]);
			v[3] = v[2] / d0[0];
			v[4] = 0 - log(v[3]);
			v[5] = v[2] - d0[0];
			v[4] = v[4] * v[5] + v[4] * v[5];
			v[5] = (0 - v[5] * v[5]) * 1 / v[3] * 1 / d0[0];
			v[2] = ((v[4] + v[5]) * 1 / v[2]) / 2.;
			y[2] = v[2] * v[0] + v[2] * v[0];
			y[0] = 0 - y[2];
			y[3] = v[2] * v[1] + v[2] * v[1];
			y[1] = 0 - y[3];
			// dependent variables without operations
			y[4] = 0;
			y[5] = 0;

		}

	template <>
		void vertex_vertex_potential_a<2>(const double *p, const double *a, const double *, const double *d0, double* y) {
			// Offsets 0: p, 2: a, 4: b, 6: d0
			std::array<double, 36> v;  // temporary variables
			v[0] = a[0] - p[0];
			v[1] = a[1] - p[1];
			v[2] = sqrt(v[0] * v[0] + v[1] * v[1]);
			v[3] = v[2] / d0[0];
			v[4] = log(v[3]);
			v[5] = 0 - v[4];
			v[6] = v[2] - d0[0];
			v[7] = 0 - v[6] * v[6];
			v[8] = 1 / v[3];
			v[9] = v[7] * v[8];
			v[10] = 1 / d0[0];
			v[11] = v[9] * v[10];
			v[12] = 1 / v[2];
			v[13] = (v[5] * v[6] + v[5] * v[6] + v[11]) * v[12];
			v[14] = v[13] / 2.;
			v[15] = ((-1 * v[0] + v[0] * -1) / 2.) / v[2];
			v[16] = v[15] / d0[0];
			v[17] = v[16] / v[3];
			v[18] = 0 - v[17];
			v[18] = v[5] * v[15] + v[5] * v[15] + v[18] * v[6] + v[18] * v[6];
			v[17] = (0 - v[9] * v[17] + (-(v[15] * v[6] + v[6] * v[15])) * v[8]) * v[10];
			v[15] = ((v[18] + v[17] - v[13] * v[15]) * v[12]) / 2.;
			y[12] = v[14] * -1 + v[14] * -1 + v[15] * v[0] + v[15] * v[0];
			y[0] = 0 - y[12];
			v[14] = 0 - v[4];
			v[13] = ((-1 * v[1] + v[1] * -1) / 2.) / v[2];
			v[12] = v[13] / d0[0];
			v[10] = v[12] / v[3];
			v[9] = 0 - v[10];
			v[9] = v[14] * v[13] + v[14] * v[13] + v[9] * v[6] + v[9] * v[6];
			v[8] = 1 / v[3];
			v[5] = v[7] * v[8];
			v[19] = 1 / d0[0];
			v[8] = (0 - v[5] * v[10] + (-(v[13] * v[6] + v[6] * v[13])) * v[8]) * v[19];
			v[19] = v[5] * v[19];
			v[5] = 1 / v[2];
			v[14] = (v[14] * v[6] + v[14] * v[6] + v[19]) * v[5];
			v[5] = ((v[9] + v[8] - v[14] * v[13]) * v[5]) / 2.;
			y[13] = v[5] * v[0] + v[5] * v[0];
			y[1] = 0 - y[13];
			v[13] = 0 - v[4];
			v[10] = 1 / v[3];
			v[20] = v[7] * v[10];
			v[21] = 1 / d0[0];
			v[22] = v[20] * v[21];
			v[23] = 1 / v[2];
			v[24] = (v[13] * v[6] + v[13] * v[6] + v[22]) * v[23];
			v[25] = v[24] / 2.;
			v[26] = ((v[0] + v[0]) / 2.) / v[2];
			v[27] = v[26] / d0[0];
			v[28] = v[27] / v[3];
			v[29] = 0 - v[28];
			v[29] = v[13] * v[26] + v[13] * v[26] + v[29] * v[6] + v[29] * v[6];
			v[28] = (0 - v[20] * v[28] + (-(v[26] * v[6] + v[6] * v[26])) * v[10]) * v[21];
			v[26] = ((v[29] + v[28] - v[24] * v[26]) * v[23]) / 2.;
			y[14] = v[25] + v[25] + v[26] * v[0] + v[26] * v[0];
			y[2] = 0 - y[14];
			v[25] = 0 - v[4];
			v[24] = ((v[1] + v[1]) / 2.) / v[2];
			v[23] = v[24] / d0[0];
			v[21] = v[23] / v[3];
			v[20] = 0 - v[21];
			v[20] = v[25] * v[24] + v[25] * v[24] + v[20] * v[6] + v[20] * v[6];
			v[10] = 1 / v[3];
			v[13] = v[7] * v[10];
			v[30] = 1 / d0[0];
			v[10] = (0 - v[13] * v[21] + (-(v[24] * v[6] + v[6] * v[24])) * v[10]) * v[30];
			v[30] = v[13] * v[30];
			v[13] = 1 / v[2];
			v[25] = (v[25] * v[6] + v[25] * v[6] + v[30]) * v[13];
			v[13] = ((v[20] + v[10] - v[25] * v[24]) * v[13]) / 2.;
			y[15] = v[13] * v[0] + v[13] * v[0];
			y[3] = 0 - y[15];
			v[4] = 0 - v[4];
			v[24] = (0 - v[3]) / d0[0];
			v[21] = v[24] / v[3];
			v[31] = 0 - v[21];
			v[31] = v[4] * -1 + v[4] * -1 + v[31] * v[6] + v[31] * v[6];
			v[4] = 1 / v[3];
			v[7] = v[7] * v[4];
			v[32] = 1 / d0[0];
			v[33] = v[7] * v[32];
			v[32] = (0 - v[7] * v[21] + (-(-1 * v[6] + v[6] * -1)) * v[4] - v[33]) * v[32];
			v[2] = ((v[31] + v[32]) * 1 / v[2]) / 2.;
			v[35] = v[2] * v[0] + v[2] * v[0];
			y[18] = v[15] * v[1] + v[15] * v[1];
			y[6] = 0 - y[18];
			v[14] = v[14] / 2.;
			y[19] = v[14] * -1 + v[14] * -1 + v[5] * v[1] + v[5] * v[1];
			y[7] = 0 - y[19];
			y[20] = v[26] * v[1] + v[26] * v[1];
			y[8] = 0 - y[20];
			v[25] = v[25] / 2.;
			y[21] = v[25] + v[25] + v[13] * v[1] + v[13] * v[1];
			y[9] = 0 - y[21];
			v[34] = v[2] * v[1] + v[2] * v[1];
			// dependent variables without operations
			y[4] = 0;
			y[5] = 0;
			y[10] = 0;
			y[11] = 0;
			y[16] = 0;
			y[17] = 0;
			y[22] = 0;
			y[23] = 0;
			y[24] = 0;
			y[25] = 0;
			y[26] = 0;
			y[27] = 0;
			y[28] = 0;
			y[29] = 0;
			y[30] = 0;
			y[31] = 0;
			y[32] = 0;
			y[33] = 0;
			y[34] = 0;
			y[35] = 0;
		}

	template <>
		void vertex_vertex_potential_b<1>(const double *p, const double *, const double *b, const double *d0, double* y) {
			// Offsets 0: p, 2: a, 4: b, 6: d0
			std::array<double, 6> v;  // temporary variables
			v[0] = b[0] - p[0];
			v[1] = b[1] - p[1];
			v[2] = sqrt(v[0] * v[0] + v[1] * v[1]);
			v[3] = v[2] / d0[0];
			v[4] = 0 - log(v[3]);
			v[5] = v[2] - d0[0];
			v[4] = v[4] * v[5] + v[4] * v[5];
			v[5] = (0 - v[5] * v[5]) * 1 / v[3] * 1 / d0[0];
			v[2] = ((v[4] + v[5]) * 1 / v[2]) / 2.;
			y[4] = v[2] * v[0] + v[2] * v[0];
			y[0] = 0 - y[4];
			y[5] = v[2] * v[1] + v[2] * v[1];
			y[1] = 0 - y[5];
			// dependent variables without operations
			y[2] = 0;
			y[3] = 0;
		}

	template <>
		void vertex_vertex_potential_b<2>(const double *p, const double *, const double *b, const double *d0, double* y) {
			// Offsets 0: p, 2: a, 4: b, 6: d0
			std::array<double, 36> v;  // temporary variables
			v[0] = b[0] - p[0];
			v[1] = b[1] - p[1];
			v[2] = sqrt(v[0] * v[0] + v[1] * v[1]);
			v[3] = v[2] / d0[0];
			v[4] = log(v[3]);
			v[5] = 0 - v[4];
			v[6] = v[2] - d0[0];
			v[7] = 0 - v[6] * v[6];
			v[8] = 1 / v[3];
			v[9] = v[7] * v[8];
			v[10] = 1 / d0[0];
			v[11] = v[9] * v[10];
			v[12] = 1 / v[2];
			v[13] = (v[5] * v[6] + v[5] * v[6] + v[11]) * v[12];
			v[14] = v[13] / 2.;
			v[15] = ((-1 * v[0] + v[0] * -1) / 2.) / v[2];
			v[16] = v[15] / d0[0];
			v[17] = v[16] / v[3];
			v[18] = 0 - v[17];
			v[18] = v[5] * v[15] + v[5] * v[15] + v[18] * v[6] + v[18] * v[6];
			v[17] = (0 - v[9] * v[17] + (-(v[15] * v[6] + v[6] * v[15])) * v[8]) * v[10];
			v[15] = ((v[18] + v[17] - v[13] * v[15]) * v[12]) / 2.;
			y[24] = v[14] * -1 + v[14] * -1 + v[15] * v[0] + v[15] * v[0];
			y[0] = 0 - y[24];
			v[14] = 0 - v[4];
			v[13] = ((-1 * v[1] + v[1] * -1) / 2.) / v[2];
			v[12] = v[13] / d0[0];
			v[10] = v[12] / v[3];
			v[9] = 0 - v[10];
			v[9] = v[14] * v[13] + v[14] * v[13] + v[9] * v[6] + v[9] * v[6];
			v[8] = 1 / v[3];
			v[5] = v[7] * v[8];
			v[19] = 1 / d0[0];
			v[8] = (0 - v[5] * v[10] + (-(v[13] * v[6] + v[6] * v[13])) * v[8]) * v[19];
			v[19] = v[5] * v[19];
			v[5] = 1 / v[2];
			v[14] = (v[14] * v[6] + v[14] * v[6] + v[19]) * v[5];
			v[5] = ((v[9] + v[8] - v[14] * v[13]) * v[5]) / 2.;
			y[25] = v[5] * v[0] + v[5] * v[0];
			y[1] = 0 - y[25];
			v[13] = 0 - v[4];
			v[10] = 1 / v[3];
			v[20] = v[7] * v[10];
			v[21] = 1 / d0[0];
			v[22] = v[20] * v[21];
			v[23] = 1 / v[2];
			v[24] = (v[13] * v[6] + v[13] * v[6] + v[22]) * v[23];
			v[25] = v[24] / 2.;
			v[26] = ((v[0] + v[0]) / 2.) / v[2];
			v[27] = v[26] / d0[0];
			v[28] = v[27] / v[3];
			v[29] = 0 - v[28];
			v[29] = v[13] * v[26] + v[13] * v[26] + v[29] * v[6] + v[29] * v[6];
			v[28] = (0 - v[20] * v[28] + (-(v[26] * v[6] + v[6] * v[26])) * v[10]) * v[21];
			v[26] = ((v[29] + v[28] - v[24] * v[26]) * v[23]) / 2.;
			y[28] = v[25] + v[25] + v[26] * v[0] + v[26] * v[0];
			y[4] = 0 - y[28];
			v[25] = 0 - v[4];
			v[24] = ((v[1] + v[1]) / 2.) / v[2];
			v[23] = v[24] / d0[0];
			v[21] = v[23] / v[3];
			v[20] = 0 - v[21];
			v[20] = v[25] * v[24] + v[25] * v[24] + v[20] * v[6] + v[20] * v[6];
			v[10] = 1 / v[3];
			v[13] = v[7] * v[10];
			v[30] = 1 / d0[0];
			v[10] = (0 - v[13] * v[21] + (-(v[24] * v[6] + v[6] * v[24])) * v[10]) * v[30];
			v[30] = v[13] * v[30];
			v[13] = 1 / v[2];
			v[25] = (v[25] * v[6] + v[25] * v[6] + v[30]) * v[13];
			v[13] = ((v[20] + v[10] - v[25] * v[24]) * v[13]) / 2.;
			y[29] = v[13] * v[0] + v[13] * v[0];
			y[5] = 0 - y[29];
			v[4] = 0 - v[4];
			v[24] = (0 - v[3]) / d0[0];
			v[21] = v[24] / v[3];
			v[31] = 0 - v[21];
			v[31] = v[4] * -1 + v[4] * -1 + v[31] * v[6] + v[31] * v[6];
			v[4] = 1 / v[3];
			v[7] = v[7] * v[4];
			v[32] = 1 / d0[0];
			v[33] = v[7] * v[32];
			v[32] = (0 - v[7] * v[21] + (-(-1 * v[6] + v[6] * -1)) * v[4] - v[33]) * v[32];
			v[2] = ((v[31] + v[32]) * 1 / v[2]) / 2.;
			v[35] = v[2] * v[0] + v[2] * v[0];
			y[30] = v[15] * v[1] + v[15] * v[1];
			y[6] = 0 - y[30];
			v[14] = v[14] / 2.;
			y[31] = v[14] * -1 + v[14] * -1 + v[5] * v[1] + v[5] * v[1];
			y[7] = 0 - y[31];
			y[34] = v[26] * v[1] + v[26] * v[1];
			y[10] = 0 - y[34];
			v[25] = v[25] / 2.;
			y[35] = v[25] + v[25] + v[13] * v[1] + v[13] * v[1];
			y[11] = 0 - y[35];
			v[34] = v[2] * v[1] + v[2] * v[1];
			// dependent variables without operations
			y[2] = 0;
			y[3] = 0;
			y[8] = 0;
			y[9] = 0;
			y[12] = 0;
			y[13] = 0;
			y[14] = 0;
			y[15] = 0;
			y[16] = 0;
			y[17] = 0;
			y[18] = 0;
			y[19] = 0;
			y[20] = 0;
			y[21] = 0;
			y[22] = 0;
			y[23] = 0;
			y[26] = 0;
			y[27] = 0;
			y[32] = 0;
			y[33] = 0;
		}
}
