#include <igl/triangle/triangulate.h>
// libigl libirary must be included first
#include "Projects/Foam2D/include/Tessellation/Voronoi.h"
#include "Projects/Foam2D/include/Energy/CodeGen.h"
#include <iostream>

void Voronoi::getNode(const VectorXT &v1, const VectorXT &v2, const VectorXT &v3, TV &node) {
    assert(v1.rows() == 2 && v2.rows() == 2 && v3.rows() == 2);

    double x1 = v1(0);
    double y1 = v1(1);
    double x2 = v2(0);
    double y2 = v2(1);
    double x3 = v3(0);
    double y3 = v3(1);

//    double m = 0.5 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1));
//    double xn = 0.5 * (x1 + x3) - m * (y3 - y1);
//    double yn = 0.5 * (y1 + y3) + m * (x3 - x1);
//    node = {xn, yn};

    double xn, yn;
    // @formatter:off
    xn = 0.5e0 * x1 + 0.5e0 * x3 - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (y3 - y1);
    yn = 0.5e0 * y1 + 0.5e0 * y3 + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (x3 - x1);
    // @formatter:on
    node = {xn, yn};
}

void
Voronoi::getNodeGradient(const VectorXT &v1, const VectorXT &v2, const VectorXT &v3, VectorXT &gradX, VectorXT &gradY) {
    assert(v1.rows() == 2 && v2.rows() == 2 && v3.rows() == 2 && gradX.rows() == 6 && gradY.rows() == 6);

    double x1 = v1(0);
    double y1 = v1(1);
    double x2 = v2(0);
    double y2 = v2(1);
    double x3 = v3(0);
    double y3 = v3(1);

    // @formatter:off
    gradX[0] = 0.5e0 - 0.5e0 * (-x3 + x2) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (y3 - y1) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y2 - y3);
    gradX[1] = -0.5e0 * (y2 - y3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (y3 - y1) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (x3 - x2) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1));
    gradX[2] = -0.5e0 * (-0.2e1 * x2 + x1 + x3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (y3 - y1) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * pow(y3 - y1, 0.2e1);
    gradX[3] = -0.5e0 * (y1 - 0.2e1 * y2 + y3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (y3 - y1) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (-x3 + x1);
    gradX[4] = 0.5e0 - 0.5e0 * (x2 - x1) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (y3 - y1) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y1 - y2);
    gradX[5] = -0.5e0 * (y2 - y1) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (y3 - y1) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (x2 - x1) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1));

    gradY[0] = 0.5e0 * (-x3 + x2) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (x3 - x1) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y2 - y3) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1));
    gradY[1] = 0.5e0 + 0.5e0 * (y2 - y3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (x3 - x1) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (x3 - x2);
    gradY[2] = 0.5e0 * (-0.2e1 * x2 + x1 + x3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (x3 - x1) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y3 - y1);
    gradY[3] = 0.5e0 * (y1 - 0.2e1 * y2 + y3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (x3 - x1) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (-x3 + x1);
    gradY[4] = 0.5e0 * (x2 - x1) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (x3 - x1) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y1 - y2) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1));
    gradY[5] = 0.5e0 + 0.5e0 * (y2 - y1) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (x3 - x1) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (x2 - x1);
    // @formatter:on
}

void
Voronoi::getNodeHessian(const VectorXT &v1, const VectorXT &v2, const VectorXT &v3, MatrixXT &hessX, MatrixXT &hessY) {
    assert(v1.rows() == 2 && v2.rows() == 2 && v3.rows() == 2 && hessX.rows() == 6 && hessX.cols() == 6 &&
           hessY.rows() == 6 && hessY.cols() == 6);

    double x1 = v1(0);
    double y1 = v1(1);
    double x2 = v2(0);
    double y2 = v2(1);
    double x3 = v3(0);
    double y3 = v3(1);

    int n = 6;
    double hessX_c[n][n];
    Eigen::Map<Eigen::MatrixXd>(&hessX_c[0][0], n, n) = hessX;
    double hessY_c[n][n];
    Eigen::Map<Eigen::MatrixXd>(&hessY_c[0][0], n, n) = hessY;

    // @formatter:off
    hessX_c[0][0] = 0.10e1 * (-x3 + x2) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y2 - y3) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * pow(y2 - y3, 0.2e1);
    hessX_c[0][1] = 0.5e0 * (-x3 + x2) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (x3 - x2) + 0.5e0 * (-x3 + x2) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.5e0 * pow(y2 - y3, 0.2e1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * (y2 - y3) * (x3 - x2) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y2 - y3);
    hessX_c[0][2] = -0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (y3 - y1) + 0.5e0 * (-x3 + x2) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * pow(y3 - y1, 0.2e1) + 0.5e0 * (-0.2e1 * x2 + x1 + x3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y2 - y3) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * pow(y3 - y1, 0.2e1) * (y2 - y3);
    hessX_c[0][3] = 0.5e0 * (-x3 + x2) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (-x3 + x1) + 0.5e0 * (y1 - 0.2e1 * y2 + y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y2 - y3) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * (y2 - y3) * (-x3 + x1) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1);
    hessX_c[0][4] = 0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (y3 - y1) + 0.5e0 * (-x3 + x2) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y1 - y2) + 0.5e0 * (x2 - x1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y2 - y3) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * (y2 - y3) * (y1 - y2);
    hessX_c[0][5] = 0.5e0 * (-x3 + x2) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (x2 - x1) - 0.5e0 * (-x3 + x2) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.5e0 * (y2 - y1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y2 - y3) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * (y2 - y3) * (x2 - x1) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y2 - y3) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1);
    hessX_c[1][0] = 0.5e0 * (-x3 + x2) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (x3 - x2) + 0.5e0 * (-x3 + x2) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.5e0 * pow(y2 - y3, 0.2e1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * (y2 - y3) * (x3 - x2) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y2 - y3);
    hessX_c[1][1] = 0.10e1 * (y2 - y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (x3 - x2) + 0.10e1 * (y2 - y3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * pow(x3 - x2, 0.2e1) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x2);
    hessX_c[1][2] = 0.5e0 * (y2 - y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * pow(y3 - y1, 0.2e1) + 0.5e0 * (-0.2e1 * x2 + x1 + x3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (x3 - x2) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * pow(y3 - y1, 0.2e1) * (x3 - x2) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) + 0.5e0 * (-0.2e1 * x2 + x1 + x3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1));
    hessX_c[1][3] = -0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (y3 - y1) + 0.5e0 * (y2 - y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (-x3 + x1) + 0.5e0 * (y1 - 0.2e1 * y2 + y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (x3 - x2) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * (x3 - x2) * (-x3 + x1) + 0.5e0 * (y1 - 0.2e1 * y2 + y3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (-x3 + x1);
    hessX_c[1][4] = 0.5e0 * (y2 - y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y1 - y2) + 0.5e0 * (x2 - x1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (x3 - x2) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * (x3 - x2) * (y1 - y2) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) + 0.5e0 * (x2 - x1) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y1 - y2);
    hessX_c[1][5] = 0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (y3 - y1) + 0.5e0 * (x2 - x1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y2 - y3) - 0.5e0 * (y2 - y3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.5e0 * (y2 - y1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (x3 - x2) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * (x3 - x2) * (x2 - x1) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x2) + 0.5e0 * (y2 - y1) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x2 - x1);
    hessX_c[2][0] = -0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (y3 - y1) + 0.5e0 * (-x3 + x2) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * pow(y3 - y1, 0.2e1) + 0.5e0 * (-0.2e1 * x2 + x1 + x3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y2 - y3) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * pow(y3 - y1, 0.2e1) * (y2 - y3);
    hessX_c[2][1] = 0.5e0 * (y2 - y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * pow(y3 - y1, 0.2e1) + 0.5e0 * (-0.2e1 * x2 + x1 + x3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (x3 - x2) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * pow(y3 - y1, 0.2e1) * (x3 - x2) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) + 0.5e0 * (-0.2e1 * x2 + x1 + x3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1));
    hessX_c[2][2] = 0.10e1 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (y3 - y1) + 0.10e1 * (-0.2e1 * x2 + x1 + x3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * pow(y3 - y1, 0.2e1) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * pow(y3 - y1, 0.3e1);
    hessX_c[2][3] = 0.5e0 * (-0.2e1 * x2 + x1 + x3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (-x3 + x1) + 0.5e0 * (y1 - 0.2e1 * y2 + y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * pow(y3 - y1, 0.2e1) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * pow(y3 - y1, 0.2e1) * (-x3 + x1);
    hessX_c[2][4] = -0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (y3 - y1) + 0.5e0 * (-0.2e1 * x2 + x1 + x3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y1 - y2) + 0.5e0 * (x2 - x1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * pow(y3 - y1, 0.2e1) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * pow(y3 - y1, 0.2e1) * (y1 - y2);
    hessX_c[2][5] = 0.5e0 * (-0.2e1 * x2 + x1 + x3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (x2 - x1) - 0.5e0 * (-0.2e1 * x2 + x1 + x3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.5e0 * (y2 - y1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * pow(y3 - y1, 0.2e1) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * pow(y3 - y1, 0.2e1) * (x2 - x1) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1);
    hessX_c[3][0] = 0.5e0 * (-x3 + x2) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (-x3 + x1) + 0.5e0 * (y1 - 0.2e1 * y2 + y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y2 - y3) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * (y2 - y3) * (-x3 + x1) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1);
    hessX_c[3][1] = -0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (y3 - y1) + 0.5e0 * (y2 - y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (-x3 + x1) + 0.5e0 * (y1 - 0.2e1 * y2 + y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (x3 - x2) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * (x3 - x2) * (-x3 + x1) + 0.5e0 * (y1 - 0.2e1 * y2 + y3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (-x3 + x1);
    hessX_c[3][2] = 0.5e0 * (-0.2e1 * x2 + x1 + x3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (-x3 + x1) + 0.5e0 * (y1 - 0.2e1 * y2 + y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * pow(y3 - y1, 0.2e1) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * pow(y3 - y1, 0.2e1) * (-x3 + x1);
    hessX_c[3][3] = 0.10e1 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (y3 - y1) + 0.10e1 * (y1 - 0.2e1 * y2 + y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (-x3 + x1) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * pow(-x3 + x1, 0.2e1);
    hessX_c[3][4] = 0.5e0 * (y1 - 0.2e1 * y2 + y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y1 - y2) + 0.5e0 * (x2 - x1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (-x3 + x1) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * (-x3 + x1) * (y1 - y2) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1);
    hessX_c[3][5] = -0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (y3 - y1) + 0.5e0 * (y1 - 0.2e1 * y2 + y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (x2 - x1) - 0.5e0 * (y1 - 0.2e1 * y2 + y3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.5e0 * (y2 - y1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (-x3 + x1) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * (-x3 + x1) * (x2 - x1) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (-x3 + x1);
    hessX_c[4][0] = 0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (y3 - y1) + 0.5e0 * (-x3 + x2) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y1 - y2) + 0.5e0 * (x2 - x1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y2 - y3) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * (y2 - y3) * (y1 - y2);
    hessX_c[4][1] = 0.5e0 * (y2 - y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y1 - y2) + 0.5e0 * (x2 - x1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (x3 - x2) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * (x3 - x2) * (y1 - y2) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) + 0.5e0 * (x2 - x1) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y1 - y2);
    hessX_c[4][2] = -0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (y3 - y1) + 0.5e0 * (-0.2e1 * x2 + x1 + x3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y1 - y2) + 0.5e0 * (x2 - x1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * pow(y3 - y1, 0.2e1) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * pow(y3 - y1, 0.2e1) * (y1 - y2);
    hessX_c[4][3] = 0.5e0 * (y1 - 0.2e1 * y2 + y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y1 - y2) + 0.5e0 * (x2 - x1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (-x3 + x1) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * (-x3 + x1) * (y1 - y2) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1);
    hessX_c[4][4] = 0.10e1 * (x2 - x1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y1 - y2) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * pow(y1 - y2, 0.2e1);
    hessX_c[4][5] = 0.5e0 * pow(x2 - x1, 0.2e1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) - 0.5e0 * (x2 - x1) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.5e0 * (y2 - y1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y1 - y2) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * (y1 - y2) * (x2 - x1) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y1 - y2);
    hessX_c[5][0] = 0.5e0 * (-x3 + x2) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (x2 - x1) - 0.5e0 * (-x3 + x2) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.5e0 * (y2 - y1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y2 - y3) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * (y2 - y3) * (x2 - x1) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y2 - y3) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1);
    hessX_c[5][1] = 0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (y3 - y1) + 0.5e0 * (x2 - x1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y2 - y3) - 0.5e0 * (y2 - y3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.5e0 * (y2 - y1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (x3 - x2) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * (x3 - x2) * (x2 - x1) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x2) + 0.5e0 * (y2 - y1) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x2 - x1);
    hessX_c[5][2] = 0.5e0 * (-0.2e1 * x2 + x1 + x3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (x2 - x1) - 0.5e0 * (-0.2e1 * x2 + x1 + x3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.5e0 * (y2 - y1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * pow(y3 - y1, 0.2e1) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * pow(y3 - y1, 0.2e1) * (x2 - x1) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1);
    hessX_c[5][3] = -0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (y3 - y1) + 0.5e0 * (y1 - 0.2e1 * y2 + y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (x2 - x1) - 0.5e0 * (y1 - 0.2e1 * y2 + y3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.5e0 * (y2 - y1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (-x3 + x1) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * (-x3 + x1) * (x2 - x1) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (-x3 + x1);
    hessX_c[5][4] = 0.5e0 * pow(x2 - x1, 0.2e1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) - 0.5e0 * (x2 - x1) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.5e0 * (y2 - y1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (y1 - y2) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * (y1 - y2) * (x2 - x1) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y1 - y2);
    hessX_c[5][5] = 0.10e1 * (y2 - y1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1) * (x2 - x1) - 0.10e1 * (y2 - y1) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (y3 - y1) * pow(x2 - x1, 0.2e1) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x2 - x1);

    hessY_c[0][0] = -0.10e1 * (-x3 + x2) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y2 - y3) - 0.10e1 * (-x3 + x2) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * pow(y2 - y3, 0.2e1) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y2 - y3);
    hessY_c[0][1] = -0.5e0 * (-x3 + x2) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (x3 - x2) - 0.5e0 * pow(y2 - y3, 0.2e1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (y2 - y3) * (x3 - x2) - 0.5e0 * (y2 - y3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x2);
    hessY_c[0][2] = 0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (x3 - x1) - 0.5e0 * (-x3 + x2) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y3 - y1) - 0.5e0 * (-0.2e1 * x2 + x1 + x3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y2 - y3) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (y2 - y3) * (y3 - y1) - 0.5e0 * (-0.2e1 * x2 + x1 + x3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1);
    hessY_c[0][3] = -0.5e0 * (-x3 + x2) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (-x3 + x1) - 0.5e0 * (y1 - 0.2e1 * y2 + y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y2 - y3) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (y2 - y3) * (-x3 + x1) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) - 0.5e0 * (y1 - 0.2e1 * y2 + y3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (-x3 + x1);
    hessY_c[0][4] = -0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (x3 - x1) - 0.5e0 * (-x3 + x2) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y1 - y2) + 0.5e0 * (-x3 + x2) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) - 0.5e0 * (x2 - x1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y2 - y3) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (y2 - y3) * (y1 - y2) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y2 - y3) - 0.5e0 * (x2 - x1) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y1 - y2);
    hessY_c[0][5] = -0.5e0 * (-x3 + x2) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (x2 - x1) - 0.5e0 * (y2 - y1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y2 - y3) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (y2 - y3) * (x2 - x1) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) - 0.5e0 * (y2 - y1) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x2 - x1);
    hessY_c[1][0] = -0.5e0 * (-x3 + x2) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (x3 - x2) - 0.5e0 * pow(y2 - y3, 0.2e1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (y2 - y3) * (x3 - x2) - 0.5e0 * (y2 - y3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x2);
    hessY_c[1][1] = -0.10e1 * (y2 - y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (x3 - x2) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * pow(x3 - x2, 0.2e1);
    hessY_c[1][2] = -0.5e0 * (y2 - y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y3 - y1) - 0.5e0 * (-0.2e1 * x2 + x1 + x3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (x3 - x2) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (x3 - x2) * (y3 - y1) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1);
    hessY_c[1][3] = 0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (x3 - x1) - 0.5e0 * (y2 - y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (-x3 + x1) - 0.5e0 * (y1 - 0.2e1 * y2 + y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (x3 - x2) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (x3 - x2) * (-x3 + x1);
    hessY_c[1][4] = -0.5e0 * (y2 - y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y1 - y2) + 0.5e0 * (y2 - y3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) - 0.5e0 * (x2 - x1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (x3 - x2) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (x3 - x2) * (y1 - y2) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x2) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1);
    hessY_c[1][5] = -0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (x3 - x1) - 0.5e0 * (x2 - x1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y2 - y3) - 0.5e0 * (y2 - y1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (x3 - x2) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (x3 - x2) * (x2 - x1);
    hessY_c[2][0] = 0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (x3 - x1) - 0.5e0 * (-x3 + x2) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y3 - y1) - 0.5e0 * (-0.2e1 * x2 + x1 + x3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y2 - y3) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (y2 - y3) * (y3 - y1) - 0.5e0 * (-0.2e1 * x2 + x1 + x3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1);
    hessY_c[2][1] = -0.5e0 * (y2 - y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y3 - y1) - 0.5e0 * (-0.2e1 * x2 + x1 + x3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (x3 - x2) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (x3 - x2) * (y3 - y1) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1);
    hessY_c[2][2] = -0.10e1 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (x3 - x1) - 0.10e1 * (-0.2e1 * x2 + x1 + x3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y3 - y1) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * pow(y3 - y1, 0.2e1);
    hessY_c[2][3] = -0.5e0 * (-0.2e1 * x2 + x1 + x3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (-x3 + x1) - 0.5e0 * (y1 - 0.2e1 * y2 + y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y3 - y1) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (y3 - y1) * (-x3 + x1);
    hessY_c[2][4] = 0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (x3 - x1) - 0.5e0 * (-0.2e1 * x2 + x1 + x3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y1 - y2) + 0.5e0 * (-0.2e1 * x2 + x1 + x3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) - 0.5e0 * (x2 - x1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y3 - y1) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (y3 - y1) * (y1 - y2) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1);
    hessY_c[2][5] = -0.5e0 * (-0.2e1 * x2 + x1 + x3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (x2 - x1) - 0.5e0 * (y2 - y1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y3 - y1) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (y3 - y1) * (x2 - x1) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1);
    hessY_c[3][0] = -0.5e0 * (-x3 + x2) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (-x3 + x1) - 0.5e0 * (y1 - 0.2e1 * y2 + y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y2 - y3) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (y2 - y3) * (-x3 + x1) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) - 0.5e0 * (y1 - 0.2e1 * y2 + y3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (-x3 + x1);
    hessY_c[3][1] = 0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (x3 - x1) - 0.5e0 * (y2 - y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (-x3 + x1) - 0.5e0 * (y1 - 0.2e1 * y2 + y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (x3 - x2) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (x3 - x2) * (-x3 + x1);
    hessY_c[3][2] = -0.5e0 * (-0.2e1 * x2 + x1 + x3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (-x3 + x1) - 0.5e0 * (y1 - 0.2e1 * y2 + y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y3 - y1) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (y3 - y1) * (-x3 + x1);
    hessY_c[3][3] = -0.10e1 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (x3 - x1) - 0.10e1 * (y1 - 0.2e1 * y2 + y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (-x3 + x1) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * pow(-x3 + x1, 0.2e1);
    hessY_c[3][4] = -0.5e0 * (y1 - 0.2e1 * y2 + y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y1 - y2) + 0.5e0 * (y1 - 0.2e1 * y2 + y3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) - 0.5e0 * (x2 - x1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (-x3 + x1) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (-x3 + x1) * (y1 - y2) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (-x3 + x1) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1);
    hessY_c[3][5] = 0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (x3 - x1) - 0.5e0 * (y1 - 0.2e1 * y2 + y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (x2 - x1) - 0.5e0 * (y2 - y1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (-x3 + x1) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (-x3 + x1) * (x2 - x1);
    hessY_c[4][0] = -0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (x3 - x1) - 0.5e0 * (-x3 + x2) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y1 - y2) + 0.5e0 * (-x3 + x2) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) - 0.5e0 * (x2 - x1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y2 - y3) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (y2 - y3) * (y1 - y2) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y2 - y3) - 0.5e0 * (x2 - x1) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y1 - y2);
    hessY_c[4][1] = -0.5e0 * (y2 - y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y1 - y2) + 0.5e0 * (y2 - y3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) - 0.5e0 * (x2 - x1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (x3 - x2) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (x3 - x2) * (y1 - y2) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x2) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1);
    hessY_c[4][2] = 0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (x3 - x1) - 0.5e0 * (-0.2e1 * x2 + x1 + x3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y1 - y2) + 0.5e0 * (-0.2e1 * x2 + x1 + x3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) - 0.5e0 * (x2 - x1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y3 - y1) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (y3 - y1) * (y1 - y2) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y3 - y1);
    hessY_c[4][3] = -0.5e0 * (y1 - 0.2e1 * y2 + y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y1 - y2) + 0.5e0 * (y1 - 0.2e1 * y2 + y3) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) - 0.5e0 * (x2 - x1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (-x3 + x1) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (-x3 + x1) * (y1 - y2) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (-x3 + x1) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1);
    hessY_c[4][4] = -0.10e1 * (x2 - x1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y1 - y2) + 0.10e1 * (x2 - x1) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * pow(y1 - y2, 0.2e1) - 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (y1 - y2);
    hessY_c[4][5] = -0.5e0 * pow(x2 - x1, 0.2e1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) - 0.5e0 * (y2 - y1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y1 - y2) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (y1 - y2) * (x2 - x1) + 0.5e0 * (y2 - y1) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x2 - x1);
    hessY_c[5][0] = -0.5e0 * (-x3 + x2) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (x2 - x1) - 0.5e0 * (y2 - y1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y2 - y3) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (y2 - y3) * (x2 - x1) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) - 0.5e0 * (y2 - y1) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) + 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x2 - x1);
    hessY_c[5][1] = -0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (x3 - x1) - 0.5e0 * (x2 - x1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y2 - y3) - 0.5e0 * (y2 - y1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (x3 - x2) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (x3 - x2) * (x2 - x1);
    hessY_c[5][2] = -0.5e0 * (-0.2e1 * x2 + x1 + x3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (x2 - x1) - 0.5e0 * (y2 - y1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y3 - y1) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (y3 - y1) * (x2 - x1) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1);
    hessY_c[5][3] = 0.5e0 / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) * (x3 - x1) - 0.5e0 * (y1 - 0.2e1 * y2 + y3) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (x2 - x1) - 0.5e0 * (y2 - y1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (-x3 + x1) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (-x3 + x1) * (x2 - x1);
    hessY_c[5][4] = -0.5e0 * pow(x2 - x1, 0.2e1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) - 0.5e0 * (y2 - y1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (y1 - y2) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * (y1 - y2) * (x2 - x1) + 0.5e0 * (y2 - y1) / ((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1)) - 0.5e0 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x2 - x1);
    hessY_c[5][5] = -0.10e1 * (y2 - y1) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.2e1) * (x3 - x1) * (x2 - x1) + 0.10e1 * ((y3 - y2) * (y2 - y1) + (x3 - x2) * (x2 - x1)) * pow((y3 - y1) * (x2 - x1) - (y2 - y1) * (x3 - x1), -0.3e1) * (x3 - x1) * pow(x2 - x1, 0.2e1);
    // @formatter:on
}

void Voronoi::getBoundaryNode(const VectorXT &v1, const VectorXT &v2, const TV &b0, const TV &b1, TV &node) {
    assert(v1.rows() == 2 && v2.rows() == 2);

//    double x1 = (v1(0) + v2(0)) / 2;
//    double y1 = (v1(1) + v2(1)) / 2;
//    double x2 = x1 + (v2(1) - v1(1));
//    double y2 = y1 - (v2(0) - v1(0));
//    double x3 = b0(0);
//    double y3 = b0(1);
//    double x4 = b1(0);
//    double y4 = b1(1);
//    double t = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / (-(x4 - x3) * (y2 - y1) + (x2 - x1) * (y4 - y3));
//    double xn = x1 + t * (x2 - x1);
//    double yn = y1 + t * (y2 - y1);
//    node = {xn, yn};

    double v1x = v1(0);
    double v1y = v1(1);
    double v2x = v2(0);
    double v2y = v2(1);
    double x3 = b0(0);
    double y3 = b0(1);
    double x4 = b1(0);
    double y4 = b1(1);

    double xn, yn;
    // @formatter:off
    xn = 0.5e0 * v1x + 0.5e0 * v2x + ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) * (v2y - v1y);
    yn = 0.5e0 * v1y + 0.5e0 * v2y + ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) * (-v2x + v1x);
    // @formatter:on
    node = {xn, yn};
}

void
Voronoi::getBoundaryNodeGradient(const VectorXT &v1, const VectorXT &v2, const TV &b0, const TV &b1, VectorXT &gradX,
                                 VectorXT &gradY) {
    assert(v1.rows() == 2 && v2.rows() == 2 && v3.rows() == 2 && gradX.rows() == 4 && gradY.rows() == 4);

    double v1x = v1(0);
    double v1y = v1(1);
    double v2x = v2(0);
    double v2y = v2(1);
    double x3 = b0(0);
    double y3 = b0(1);
    double x4 = b1(0);
    double y4 = b1(1);

    // @formatter:off
    gradX[0] = 0.5e0 + (-0.5e0 * y4 + 0.5e0 * y3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) * (v2y - v1y) - ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (-x4 + x3);
    gradX[1] = (0.5e0 * x4 - 0.5e0 * x3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) * (v2y - v1y) - ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (-y4 + y3) - ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3));
    gradX[2] = 0.5e0 + (-0.5e0 * y4 + 0.5e0 * y3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) * (v2y - v1y) - ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (x4 - x3);
    gradX[3] = (0.5e0 * x4 - 0.5e0 * x3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) * (v2y - v1y) - ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (y4 - y3) + ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3));

    gradY[0] = (-0.5e0 * y4 + 0.5e0 * y3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) * (-v2x + v1x) - ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (-x4 + x3) + ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3));
    gradY[1] = 0.5e0 + (0.5e0 * x4 - 0.5e0 * x3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) * (-v2x + v1x) - ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (-y4 + y3);
    gradY[2] = (-0.5e0 * y4 + 0.5e0 * y3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) * (-v2x + v1x) - ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (x4 - x3) - ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3));
    gradY[3] = 0.5e0 + (0.5e0 * x4 - 0.5e0 * x3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) * (-v2x + v1x) - ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (y4 - y3);
    // @formatter:on
}

void
Voronoi::getBoundaryNodeHessian(const VectorXT &v1, const VectorXT &v2, const TV &b0, const TV &b1, MatrixXT &hessX,
                                MatrixXT &hessY) {
    assert(v1.rows() == 2 && v2.rows() == 2 && v3.rows() == 2 && hessX.rows() == 4 && hessX.cols() == 4 &&
           hessY.rows() == 4 && hessY.cols() == 4);

    double v1x = v1(0);
    double v1y = v1(1);
    double v2x = v2(0);
    double v2y = v2(1);
    double x3 = b0(0);
    double y3 = b0(1);
    double x4 = b1(0);
    double y4 = b1(1);

    int n = 4;
    double hessX_c[n][n];
    Eigen::Map<Eigen::MatrixXd>(&hessX_c[0][0], n, n) = hessX;
    double hessY_c[n][n];
    Eigen::Map<Eigen::MatrixXd>(&hessY_c[0][0], n, n) = hessY;

    // @formatter:off
    hessX_c[0][0] = -0.2e1 * (-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (-x4 + x3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (v2y - v1y) * pow(-x4 + x3, 0.2e1);
    hessX_c[0][1] = -(-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (-y4 + y3) - (-0.5e0 * y4 + 0.5e0 * y3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) - (0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (-x4 + x3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (v2y - v1y) * (-x4 + x3) * (-y4 + y3) + ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-x4 + x3);
    hessX_c[0][2] = -(-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (x4 - x3) - (-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (-x4 + x3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (v2y - v1y) * (-x4 + x3) * (x4 - x3);
    hessX_c[0][3] = -(-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (y4 - y3) + (-0.5e0 * y4 + 0.5e0 * y3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) - (0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (-x4 + x3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (v2y - v1y) * (-x4 + x3) * (y4 - y3) - ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-x4 + x3);
    hessX_c[1][0] = -(-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (-y4 + y3) - (-0.5e0 * y4 + 0.5e0 * y3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) - (0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (-x4 + x3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (v2y - v1y) * (-x4 + x3) * (-y4 + y3) + ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-x4 + x3);
    hessX_c[1][1] = -0.2e1 * (0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (-y4 + y3) - 0.2e1 * (0.5e0 * x4 - 0.5e0 * x3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (v2y - v1y) * pow(-y4 + y3, 0.2e1) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-y4 + y3);
    hessX_c[1][2] = -(0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (x4 - x3) - (-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (-y4 + y3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (v2y - v1y) * (-y4 + y3) * (x4 - x3) - (-0.5e0 * y4 + 0.5e0 * y3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) + ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (x4 - x3);
    hessX_c[1][3] = -(0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (y4 - y3) - (0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (-y4 + y3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (v2y - v1y) * (-y4 + y3) * (y4 - y3) - ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-y4 + y3) + ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (y4 - y3);
    hessX_c[2][0] = -(-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (x4 - x3) - (-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (-x4 + x3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (v2y - v1y) * (-x4 + x3) * (x4 - x3);
    hessX_c[2][1] = -(0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (x4 - x3) - (-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (-y4 + y3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (v2y - v1y) * (-y4 + y3) * (x4 - x3) - (-0.5e0 * y4 + 0.5e0 * y3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) + ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (x4 - x3);
    hessX_c[2][2] = -0.2e1 * (-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (x4 - x3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (v2y - v1y) * pow(x4 - x3, 0.2e1);
    hessX_c[2][3] = -(-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (y4 - y3) + (-0.5e0 * y4 + 0.5e0 * y3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) - (0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (x4 - x3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (v2y - v1y) * (x4 - x3) * (y4 - y3) - ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (x4 - x3);
    hessX_c[3][0] = -(-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (y4 - y3) + (-0.5e0 * y4 + 0.5e0 * y3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) - (0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (-x4 + x3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (v2y - v1y) * (-x4 + x3) * (y4 - y3) - ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-x4 + x3);
    hessX_c[3][1] = -(0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (y4 - y3) - (0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (-y4 + y3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (v2y - v1y) * (-y4 + y3) * (y4 - y3) - ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-y4 + y3) + ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (y4 - y3);
    hessX_c[3][2] = -(-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (y4 - y3) + (-0.5e0 * y4 + 0.5e0 * y3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) - (0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (x4 - x3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (v2y - v1y) * (x4 - x3) * (y4 - y3) - ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (x4 - x3);
    hessX_c[3][3] = -0.2e1 * (0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (v2y - v1y) * (y4 - y3) + 0.2e1 * (0.5e0 * x4 - 0.5e0 * x3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (v2y - v1y) * pow(y4 - y3, 0.2e1) - 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (y4 - y3);

    hessY_c[0][0] = -0.2e1 * (-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (-x4 + x3) + 0.2e1 * (-0.5e0 * y4 + 0.5e0 * y3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (-v2x + v1x) * pow(-x4 + x3, 0.2e1) - 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-x4 + x3);
    hessY_c[0][1] = -(-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (-y4 + y3) - (0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (-x4 + x3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (-v2x + v1x) * (-x4 + x3) * (-y4 + y3) + (0.5e0 * x4 - 0.5e0 * x3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) - ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-y4 + y3);
    hessY_c[0][2] = -(-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (x4 - x3) - (-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (-x4 + x3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (-v2x + v1x) * (-x4 + x3) * (x4 - x3) + ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-x4 + x3) - ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (x4 - x3);
    hessY_c[0][3] = -(-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (y4 - y3) - (0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (-x4 + x3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (-v2x + v1x) * (-x4 + x3) * (y4 - y3) + (0.5e0 * x4 - 0.5e0 * x3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) - ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (y4 - y3);
    hessY_c[1][0] = -(-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (-y4 + y3) - (0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (-x4 + x3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (-v2x + v1x) * (-x4 + x3) * (-y4 + y3) + (0.5e0 * x4 - 0.5e0 * x3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) - ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-y4 + y3);
    hessY_c[1][1] = -0.2e1 * (0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (-y4 + y3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (-v2x + v1x) * pow(-y4 + y3, 0.2e1);
    hessY_c[1][2] = -(0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (x4 - x3) - (0.5e0 * x4 - 0.5e0 * x3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) - (-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (-y4 + y3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (-v2x + v1x) * (-y4 + y3) * (x4 - x3) + ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-y4 + y3);
    hessY_c[1][3] = -(0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (y4 - y3) - (0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (-y4 + y3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (-v2x + v1x) * (-y4 + y3) * (y4 - y3);
    hessY_c[2][0] = -(-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (x4 - x3) - (-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (-x4 + x3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (-v2x + v1x) * (-x4 + x3) * (x4 - x3) + ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-x4 + x3) - ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (x4 - x3);
    hessY_c[2][1] = -(0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (x4 - x3) - (0.5e0 * x4 - 0.5e0 * x3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) - (-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (-y4 + y3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (-v2x + v1x) * (-y4 + y3) * (x4 - x3) + ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-y4 + y3);
    hessY_c[2][2] = -0.2e1 * (-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (x4 - x3) - 0.2e1 * (-0.5e0 * y4 + 0.5e0 * y3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (-v2x + v1x) * pow(x4 - x3, 0.2e1) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (x4 - x3);
    hessY_c[2][3] = -(-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (y4 - y3) - (0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (x4 - x3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (-v2x + v1x) * (x4 - x3) * (y4 - y3) - (0.5e0 * x4 - 0.5e0 * x3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) + ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (y4 - y3);
    hessY_c[3][0] = -(-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (y4 - y3) - (0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (-x4 + x3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (-v2x + v1x) * (-x4 + x3) * (y4 - y3) + (0.5e0 * x4 - 0.5e0 * x3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) - ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (y4 - y3);
    hessY_c[3][1] = -(0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (y4 - y3) - (0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (-y4 + y3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (-v2x + v1x) * (-y4 + y3) * (y4 - y3);
    hessY_c[3][2] = -(-0.5e0 * y4 + 0.5e0 * y3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (y4 - y3) - (0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (x4 - x3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (-v2x + v1x) * (x4 - x3) * (y4 - y3) - (0.5e0 * x4 - 0.5e0 * x3) / (-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3)) + ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (y4 - y3);
    hessY_c[3][3] = -0.2e1 * (0.5e0 * x4 - 0.5e0 * x3) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.2e1) * (-v2x + v1x) * (y4 - y3) + 0.2e1 * ((x4 - x3) * (-y3 + 0.5e0 * v1y + 0.5e0 * v2y) - (y4 - y3) * (-x3 + 0.5e0 * v1x + 0.5e0 * v2x)) * pow(-(x4 - x3) * (-v2x + v1x) + (v2y - v1y) * (y4 - y3), -0.3e1) * (-v2x + v1x) * pow(y4 - y3, 0.2e1);
    // @formatter:on
}

VectorXi Voronoi::delaunayNaive(const VectorXT &vertices) {
    int n_vtx = vertices.rows() / 2;
    std::vector<int> tri1;
    std::vector<int> tri2;
    std::vector<int> tri3;

    for (int i = 0; i < n_vtx; i++) {
        TV vi = vertices.segment<2>(i * 2);
        std::vector<int> neighbors;

        for (int j = 0; j < n_vtx; j++) {
            if (j == i) continue;

            TV vj = vertices.segment<2>(j * 2);
            TV line = {-(vj(1) - vi(1)), vj(0) - vi(0)};

            double dmin = INFINITY;
            double dmax = -INFINITY;

            for (int k = 0; k < n_vtx; k++) {
                if (k == i || k == j) continue;

                TV vk = vertices.segment<2>(k * 2);
                TV vc;
                getNode(vi, vj, vk, vc);
                double d = vc.dot(line);

                if ((vk - vi).dot(line) > 0) {
                    dmin = fmin(dmin, d);
                } else {
                    dmax = fmax(dmax, d);
                }
                if (dmax > dmin) break;
            }

            if (dmax < dmin || (dmax == dmin)) {
                neighbors.push_back(j);
            }
        }

        double xc = vertices(i * 2 + 0);
        double yc = vertices(i * 2 + 1);

        std::sort(neighbors.begin(), neighbors.end(), [vertices, xc, yc](int a, int b) {
            double xa = vertices(a * 2 + 0);
            double ya = vertices(a * 2 + 1);
            double angle_a = atan2(ya - yc, xa - xc);

            double xb = vertices(b * 2 + 0);
            double yb = vertices(b * 2 + 1);
            double angle_b = atan2(yb - yc, xb - xc);

            return angle_a < angle_b;
        });

        if (neighbors.size() > 0) {
            assert(neighbors.size() > 1);
            for (int j = 0; j < neighbors.size(); j++) {
                int v1 = i;
                int v2 = neighbors[j];
                int v3 = neighbors[(j + 1) % neighbors.size()];

                if (v1 < v2 && v1 < v3) {
                    double x1 = vertices(v1 * 2 + 0);
                    double y1 = vertices(v1 * 2 + 1);
                    double x2 = vertices(v2 * 2 + 0);
                    double y2 = vertices(v2 * 2 + 1);
                    double x3 = vertices(v3 * 2 + 0);
                    double y3 = vertices(v3 * 2 + 1);

                    if (x1 * y2 + x2 * y3 + x3 * y1 - x1 * y3 - x2 * y1 - x3 * y2 > 0) {
                        tri1.push_back(v1);
                        tri2.push_back(v2);
                        tri3.push_back(v3);
                    }
                }
            }
        }
    }

    VectorXi tri(tri1.size() * 3);
    for (int i = 0; i < tri1.size(); i++) {
        tri(i * 3 + 0) = tri1[i];
        tri(i * 3 + 1) = tri2[i];
        tri(i * 3 + 2) = tri3[i];
    }

    return tri;
}

VectorXi Voronoi::delaunayJRS(const VectorXT &vertices) {
    int n_vtx = vertices.rows() / 2;

    MatrixXT P;
    P.resize(n_vtx, 2);
    for (int i = 0; i < n_vtx; i++) {
        P.row(i) = vertices.segment<2>(i * 2);
    }

    MatrixXT V;
    MatrixXi F;
    igl::triangle::triangulate(P,
                               MatrixXi(),
                               MatrixXT(),
                               "cQ", // Enclose convex hull with segments
                               V, F);

    VectorXi tri;
    tri.resize(F.rows() * 3);
    for (int i = 0; i < F.rows(); i++)
        tri.segment<3>(i * 3) = F.row(i);
    return tri;
}

VectorXi Voronoi::getDualGraph(const VectorXT &vertices, const VectorXT &params) {
    return delaunayJRS(vertices);
}

VectorXT Voronoi::getDefaultVertexParams(const VectorXT &vertices) {
    return {};
}

