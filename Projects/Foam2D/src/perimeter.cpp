#include <vector>
#include <cmath>

#include "../include/constants.hpp"

using std::pow;
using std::sqrt;

template <typename T>
// vertices are stored as x0, y0, x1, ..., yN_SEGMENTS
T perimeter(const std::vector<T>& vertices) {
	// vertices is a vector of vertices stored as 2d coordinates
	T perimeter = (T) 0;
	for (size_t i = 0; i < N_SEGMENTS; i++) {
		size_t vertA = i;
		size_t vertB = (i+1) % N_SEGMENTS;
		T horz = vertices[vertA*2] - vertices[vertB*2];
		T vert = vertices[vertA*2+1] - vertices[vertB*2+1];
		perimeter += sqrt(pow(horz, 2) + pow(vert, 2));
	}
	return perimeter;
}

template <typename T>
void perimeterJacobian(std::vector<T>& jacobian, const std::vector<T>& vertices) {
	T v[7];
	v[0] = vertices[12] - vertices[0];
	v[1] = vertices[13] - vertices[1];
	v[2] = (1 / sqrt(v[0] * v[0] + v[1] * v[1])) / 2.;
	v[0] = v[2] * v[0] + v[2] * v[0];
	v[3] = vertices[0] - vertices[2];
	v[4] = vertices[1] - vertices[3];
	v[5] = (1 / sqrt(v[3] * v[3] + v[4] * v[4])) / 2.;
	v[3] = v[5] * v[3] + v[5] * v[3];
	jacobian[0] = 0 - v[0] + v[3];
	v[2] = v[2] * v[1] + v[2] * v[1];
	v[5] = v[5] * v[4] + v[5] * v[4];
	jacobian[1] = 0 - v[2] + v[5];
	v[4] = vertices[2] - vertices[4];
	v[1] = vertices[3] - vertices[5];
	v[6] = (1 / sqrt(v[4] * v[4] + v[1] * v[1])) / 2.;
	v[4] = v[6] * v[4] + v[6] * v[4];
	jacobian[2] = v[4] - v[3];
	v[6] = v[6] * v[1] + v[6] * v[1];
	jacobian[3] = v[6] - v[5];
	v[5] = vertices[4] - vertices[6];
	v[1] = vertices[5] - vertices[7];
	v[3] = (1 / sqrt(v[5] * v[5] + v[1] * v[1])) / 2.;
	v[5] = v[3] * v[5] + v[3] * v[5];
	jacobian[4] = v[5] - v[4];
	v[3] = v[3] * v[1] + v[3] * v[1];
	jacobian[5] = v[3] - v[6];
	v[6] = vertices[6] - vertices[8];
	v[1] = vertices[7] - vertices[9];
	v[4] = (1 / sqrt(v[6] * v[6] + v[1] * v[1])) / 2.;
	v[6] = v[4] * v[6] + v[4] * v[6];
	jacobian[6] = v[6] - v[5];
	v[4] = v[4] * v[1] + v[4] * v[1];
	jacobian[7] = v[4] - v[3];
	v[3] = vertices[8] - vertices[10];
	v[1] = vertices[9] - vertices[11];
	v[5] = (1 / sqrt(v[3] * v[3] + v[1] * v[1])) / 2.;
	v[3] = v[5] * v[3] + v[5] * v[3];
	jacobian[8] = v[3] - v[6];
	v[5] = v[5] * v[1] + v[5] * v[1];
	jacobian[9] = v[5] - v[4];
	v[4] = vertices[10] - vertices[12];
	v[1] = vertices[11] - vertices[13];
	v[6] = (1 / sqrt(v[4] * v[4] + v[1] * v[1])) / 2.;
	v[4] = v[6] * v[4] + v[6] * v[4];
	jacobian[10] = v[4] - v[3];
	v[6] = v[6] * v[1] + v[6] * v[1];
	jacobian[11] = v[6] - v[5];
	jacobian[12] = v[0] - v[4];
	jacobian[13] = v[2] - v[6];
}

template <typename T>
void perimeterHessian(std::vector<T>& hessian, const std::vector<T>& vertices) {
	double v[18];
	std::vector<double>& y = hessian;
	std::vector<double>& x = vertices;
	v[0] = x[12] - x[0];
	v[1] = x[13] - x[1];
	v[2] = sqrt(v[0] * v[0] + v[1] * v[1]);
	v[3] = 1 / v[2];
	v[4] = v[3] / 2.;
	v[3] = ((0 - v[3] * ((-1 * v[0] + v[0] * -1) / 2.) / v[2]) * v[3]) / 2.;
	y[168] = v[4] * -1 + v[4] * -1 + v[3] * v[0] + v[3] * v[0];
	v[4] = x[0] - x[2];
	v[5] = x[1] - x[3];
	v[6] = sqrt(v[4] * v[4] + v[5] * v[5]);
	v[7] = 1 / v[6];
	v[8] = v[7] / 2.;
	v[7] = ((0 - v[7] * ((v[4] + v[4]) / 2.) / v[6]) * v[7]) / 2.;
	v[8] = v[8] + v[8] + v[7] * v[4] + v[7] * v[4];
	y[0] = 0 - y[168] + v[8];
	v[9] = 1 / v[2];
	v[10] = ((0 - v[9] * ((-1 * v[1] + v[1] * -1) / 2.) / v[2]) * v[9]) / 2.;
	y[169] = v[10] * v[0] + v[10] * v[0];
	v[11] = 1 / v[6];
	v[12] = ((0 - v[11] * ((v[5] + v[5]) / 2.) / v[6]) * v[11]) / 2.;
	v[13] = v[12] * v[4] + v[12] * v[4];
	y[1] = 0 - y[169] + v[13];
	v[14] = 1 / v[6];
	v[15] = v[14] / 2.;
	v[14] = ((0 - v[14] * ((-1 * v[4] + v[4] * -1) / 2.) / v[6]) * v[14]) / 2.;
	y[2] = v[15] * -1 + v[15] * -1 + v[14] * v[4] + v[14] * v[4];
	v[15] = 1 / v[6];
	v[6] = ((0 - v[15] * ((-1 * v[5] + v[5] * -1) / 2.) / v[6]) * v[15]) / 2.;
	y[3] = v[6] * v[4] + v[6] * v[4];
	v[4] = 1 / v[2];
	v[16] = v[4] / 2.;
	v[4] = ((0 - v[4] * ((v[0] + v[0]) / 2.) / v[2]) * v[4]) / 2.;
	v[16] = v[16] + v[16] + v[4] * v[0] + v[4] * v[0];
	y[12] = 0 - v[16];
	v[17] = 1 / v[2];
	v[2] = ((0 - v[17] * ((v[1] + v[1]) / 2.) / v[2]) * v[17]) / 2.;
	v[0] = v[2] * v[0] + v[2] * v[0];
	y[13] = 0 - v[0];
	y[182] = v[3] * v[1] + v[3] * v[1];
	v[7] = v[7] * v[5] + v[7] * v[5];
	y[14] = 0 - y[182] + v[7];
	v[9] = v[9] / 2.;
	y[183] = v[9] * -1 + v[9] * -1 + v[10] * v[1] + v[10] * v[1];
	v[11] = v[11] / 2.;
	v[11] = v[11] + v[11] + v[12] * v[5] + v[12] * v[5];
	y[15] = 0 - y[183] + v[11];
	y[16] = v[14] * v[5] + v[14] * v[5];
	v[15] = v[15] / 2.;
	y[17] = v[15] * -1 + v[15] * -1 + v[6] * v[5] + v[6] * v[5];
	v[4] = v[4] * v[1] + v[4] * v[1];
	y[26] = 0 - v[4];
	v[17] = v[17] / 2.;
	v[17] = v[17] + v[17] + v[2] * v[1] + v[2] * v[1];
	y[27] = 0 - v[17];
	y[28] = 0 - v[8];
	y[29] = 0 - v[13];
	v[13] = x[2] - x[4];
	v[8] = x[3] - x[5];
	v[2] = sqrt(v[13] * v[13] + v[8] * v[8]);
	v[1] = 1 / v[2];
	v[15] = v[1] / 2.;
	v[1] = ((0 - v[1] * ((v[13] + v[13]) / 2.) / v[2]) * v[1]) / 2.;
	v[15] = v[15] + v[15] + v[1] * v[13] + v[1] * v[13];
	y[30] = v[15] - y[2];
	v[6] = 1 / v[2];
	v[5] = ((0 - v[6] * ((v[8] + v[8]) / 2.) / v[2]) * v[6]) / 2.;
	v[14] = v[5] * v[13] + v[5] * v[13];
	y[31] = v[14] - y[3];
	v[12] = 1 / v[2];
	v[9] = v[12] / 2.;
	v[12] = ((0 - v[12] * ((-1 * v[13] + v[13] * -1) / 2.) / v[2]) * v[12]) / 2.;
	y[32] = v[9] * -1 + v[9] * -1 + v[12] * v[13] + v[12] * v[13];
	v[9] = 1 / v[2];
	v[2] = ((0 - v[9] * ((-1 * v[8] + v[8] * -1) / 2.) / v[2]) * v[9]) / 2.;
	y[33] = v[2] * v[13] + v[2] * v[13];
	y[42] = 0 - v[7];
	y[43] = 0 - v[11];
	v[1] = v[1] * v[8] + v[1] * v[8];
	y[44] = v[1] - y[16];
	v[6] = v[6] / 2.;
	v[6] = v[6] + v[6] + v[5] * v[8] + v[5] * v[8];
	y[45] = v[6] - y[17];
	y[46] = v[12] * v[8] + v[12] * v[8];
	v[9] = v[9] / 2.;
	y[47] = v[9] * -1 + v[9] * -1 + v[2] * v[8] + v[2] * v[8];
	y[58] = 0 - v[15];
	y[59] = 0 - v[14];
	v[14] = x[4] - x[6];
	v[15] = x[5] - x[7];
	v[9] = sqrt(v[14] * v[14] + v[15] * v[15]);
	v[2] = 1 / v[9];
	v[8] = v[2] / 2.;
	v[2] = ((0 - v[2] * ((v[14] + v[14]) / 2.) / v[9]) * v[2]) / 2.;
	v[8] = v[8] + v[8] + v[2] * v[14] + v[2] * v[14];
	y[60] = v[8] - y[32];
	v[12] = 1 / v[9];
	v[5] = ((0 - v[12] * ((v[15] + v[15]) / 2.) / v[9]) * v[12]) / 2.;
	v[11] = v[5] * v[14] + v[5] * v[14];
	y[61] = v[11] - y[33];
	v[7] = 1 / v[9];
	v[13] = v[7] / 2.;
	v[7] = ((0 - v[7] * ((-1 * v[14] + v[14] * -1) / 2.) / v[9]) * v[7]) / 2.;
	y[62] = v[13] * -1 + v[13] * -1 + v[7] * v[14] + v[7] * v[14];
	v[13] = 1 / v[9];
	v[9] = ((0 - v[13] * ((-1 * v[15] + v[15] * -1) / 2.) / v[9]) * v[13]) / 2.;
	y[63] = v[9] * v[14] + v[9] * v[14];
	y[72] = 0 - v[1];
	y[73] = 0 - v[6];
	v[2] = v[2] * v[15] + v[2] * v[15];
	y[74] = v[2] - y[46];
	v[12] = v[12] / 2.;
	v[12] = v[12] + v[12] + v[5] * v[15] + v[5] * v[15];
	y[75] = v[12] - y[47];
	y[76] = v[7] * v[15] + v[7] * v[15];
	v[13] = v[13] / 2.;
	y[77] = v[13] * -1 + v[13] * -1 + v[9] * v[15] + v[9] * v[15];
	y[88] = 0 - v[8];
	y[89] = 0 - v[11];
	v[11] = x[6] - x[8];
	v[8] = x[7] - x[9];
	v[13] = sqrt(v[11] * v[11] + v[8] * v[8]);
	v[9] = 1 / v[13];
	v[15] = v[9] / 2.;
	v[9] = ((0 - v[9] * ((v[11] + v[11]) / 2.) / v[13]) * v[9]) / 2.;
	v[15] = v[15] + v[15] + v[9] * v[11] + v[9] * v[11];
	y[90] = v[15] - y[62];
	v[7] = 1 / v[13];
	v[5] = ((0 - v[7] * ((v[8] + v[8]) / 2.) / v[13]) * v[7]) / 2.;
	v[6] = v[5] * v[11] + v[5] * v[11];
	y[91] = v[6] - y[63];
	v[1] = 1 / v[13];
	v[14] = v[1] / 2.;
	v[1] = ((0 - v[1] * ((-1 * v[11] + v[11] * -1) / 2.) / v[13]) * v[1]) / 2.;
	y[92] = v[14] * -1 + v[14] * -1 + v[1] * v[11] + v[1] * v[11];
	v[14] = 1 / v[13];
	v[13] = ((0 - v[14] * ((-1 * v[8] + v[8] * -1) / 2.) / v[13]) * v[14]) / 2.;
	y[93] = v[13] * v[11] + v[13] * v[11];
	y[102] = 0 - v[2];
	y[103] = 0 - v[12];
	v[9] = v[9] * v[8] + v[9] * v[8];
	y[104] = v[9] - y[76];
	v[7] = v[7] / 2.;
	v[7] = v[7] + v[7] + v[5] * v[8] + v[5] * v[8];
	y[105] = v[7] - y[77];
	y[106] = v[1] * v[8] + v[1] * v[8];
	v[14] = v[14] / 2.;
	y[107] = v[14] * -1 + v[14] * -1 + v[13] * v[8] + v[13] * v[8];
	y[118] = 0 - v[15];
	y[119] = 0 - v[6];
	v[6] = x[8] - x[10];
	v[15] = x[9] - x[11];
	v[14] = sqrt(v[6] * v[6] + v[15] * v[15]);
	v[13] = 1 / v[14];
	v[8] = v[13] / 2.;
	v[13] = ((0 - v[13] * ((v[6] + v[6]) / 2.) / v[14]) * v[13]) / 2.;
	v[8] = v[8] + v[8] + v[13] * v[6] + v[13] * v[6];
	y[120] = v[8] - y[92];
	v[1] = 1 / v[14];
	v[5] = ((0 - v[1] * ((v[15] + v[15]) / 2.) / v[14]) * v[1]) / 2.;
	v[12] = v[5] * v[6] + v[5] * v[6];
	y[121] = v[12] - y[93];
	v[2] = 1 / v[14];
	v[11] = v[2] / 2.;
	v[2] = ((0 - v[2] * ((-1 * v[6] + v[6] * -1) / 2.) / v[14]) * v[2]) / 2.;
	y[122] = v[11] * -1 + v[11] * -1 + v[2] * v[6] + v[2] * v[6];
	v[11] = 1 / v[14];
	v[14] = ((0 - v[11] * ((-1 * v[15] + v[15] * -1) / 2.) / v[14]) * v[11]) / 2.;
	y[123] = v[14] * v[6] + v[14] * v[6];
	y[132] = 0 - v[9];
	y[133] = 0 - v[7];
	v[13] = v[13] * v[15] + v[13] * v[15];
	y[134] = v[13] - y[106];
	v[1] = v[1] / 2.;
	v[1] = v[1] + v[1] + v[5] * v[15] + v[5] * v[15];
	y[135] = v[1] - y[107];
	y[136] = v[2] * v[15] + v[2] * v[15];
	v[11] = v[11] / 2.;
	y[137] = v[11] * -1 + v[11] * -1 + v[14] * v[15] + v[14] * v[15];
	y[148] = 0 - v[8];
	y[149] = 0 - v[12];
	v[12] = x[10] - x[12];
	v[8] = x[11] - x[13];
	v[11] = sqrt(v[12] * v[12] + v[8] * v[8]);
	v[14] = 1 / v[11];
	v[15] = v[14] / 2.;
	v[14] = ((0 - v[14] * ((v[12] + v[12]) / 2.) / v[11]) * v[14]) / 2.;
	v[15] = v[15] + v[15] + v[14] * v[12] + v[14] * v[12];
	y[150] = v[15] - y[122];
	v[2] = 1 / v[11];
	v[5] = ((0 - v[2] * ((v[8] + v[8]) / 2.) / v[11]) * v[2]) / 2.;
	v[7] = v[5] * v[12] + v[5] * v[12];
	y[151] = v[7] - y[123];
	v[9] = 1 / v[11];
	v[6] = v[9] / 2.;
	v[9] = ((0 - v[9] * ((-1 * v[12] + v[12] * -1) / 2.) / v[11]) * v[9]) / 2.;
	y[152] = v[6] * -1 + v[6] * -1 + v[9] * v[12] + v[9] * v[12];
	v[6] = 1 / v[11];
	v[11] = ((0 - v[6] * ((-1 * v[8] + v[8] * -1) / 2.) / v[11]) * v[6]) / 2.;
	y[153] = v[11] * v[12] + v[11] * v[12];
	y[162] = 0 - v[13];
	y[163] = 0 - v[1];
	v[14] = v[14] * v[8] + v[14] * v[8];
	y[164] = v[14] - y[136];
	v[2] = v[2] / 2.;
	v[2] = v[2] + v[2] + v[5] * v[8] + v[5] * v[8];
	y[165] = v[2] - y[137];
	y[166] = v[9] * v[8] + v[9] * v[8];
	v[6] = v[6] / 2.;
	y[167] = v[6] * -1 + v[6] * -1 + v[11] * v[8] + v[11] * v[8];
	y[178] = 0 - v[15];
	y[179] = 0 - v[7];
	y[180] = v[16] - y[152];
	y[181] = v[0] - y[153];
	y[192] = 0 - v[14];
	y[193] = 0 - v[2];
	y[194] = v[4] - y[166];
	y[195] = v[17] - y[167];
	y[4] = 0;
	y[5] = 0;
	y[6] = 0;
	y[7] = 0;
	y[8] = 0;
	y[9] = 0;
	y[10] = 0;
	y[11] = 0;
	y[18] = 0;
	y[19] = 0;
	y[20] = 0;
	y[21] = 0;
	y[22] = 0;
	y[23] = 0;
	y[24] = 0;
	y[25] = 0;
	y[34] = 0;
	y[35] = 0;
	y[36] = 0;
	y[37] = 0;
	y[38] = 0;
	y[39] = 0;
	y[40] = 0;
	y[41] = 0;
	y[48] = 0;
	y[49] = 0;
	y[50] = 0;
	y[51] = 0;
	y[52] = 0;
	y[53] = 0;
	y[54] = 0;
	y[55] = 0;
	y[56] = 0;
	y[57] = 0;
	y[64] = 0;
	y[65] = 0;
	y[66] = 0;
	y[67] = 0;
	y[68] = 0;
	y[69] = 0;
	y[70] = 0;
	y[71] = 0;
	y[78] = 0;
	y[79] = 0;
	y[80] = 0;
	y[81] = 0;
	y[82] = 0;
	y[83] = 0;
	y[84] = 0;
	y[85] = 0;
	y[86] = 0;
	y[87] = 0;
	y[94] = 0;
	y[95] = 0;
	y[96] = 0;
	y[97] = 0;
	y[98] = 0;
	y[99] = 0;
	y[100] = 0;
	y[101] = 0;
	y[108] = 0;
	y[109] = 0;
	y[110] = 0;
	y[111] = 0;
	y[112] = 0;
	y[113] = 0;
	y[114] = 0;
	y[115] = 0;
	y[116] = 0;
	y[117] = 0;
	y[124] = 0;
	y[125] = 0;
	y[126] = 0;
	y[127] = 0;
	y[128] = 0;
	y[129] = 0;
	y[130] = 0;
	y[131] = 0;
	y[138] = 0;
	y[139] = 0;
	y[140] = 0;
	y[141] = 0;
	y[142] = 0;
	y[143] = 0;
	y[144] = 0;
	y[145] = 0;
	y[146] = 0;
	y[147] = 0;
	y[154] = 0;
	y[155] = 0;
	y[156] = 0;
	y[157] = 0;
	y[158] = 0;
	y[159] = 0;
	y[160] = 0;
	y[161] = 0;
	y[170] = 0;
	y[171] = 0;
	y[172] = 0;
	y[173] = 0;
	y[174] = 0;
	y[175] = 0;
	y[176] = 0;
	y[177] = 0;
	y[184] = 0;
	y[185] = 0;
	y[186] = 0;
	y[187] = 0;
	y[188] = 0;
	y[189] = 0;
	y[190] = 0;
	y[191] = 0;
}
