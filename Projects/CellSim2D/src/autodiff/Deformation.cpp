#include "../../include/autodiff/Deformation.h"

void computeDeformationPenalty(double stiffness, const Eigen::Matrix<double,6,1> & X, const Eigen::Matrix<double,6,1> & x, double& energy){
	double _i_var[53];
	_i_var[0] = (X(5,0))-(X(3,0));
	_i_var[1] = (X(0,0))-(X(2,0));
	_i_var[2] = (X(1,0))-(X(3,0));
	_i_var[3] = (X(4,0))-(X(2,0));
	_i_var[4] = (_i_var[1])*(_i_var[0]);
	_i_var[5] = (_i_var[3])*(_i_var[2]);
	_i_var[6] = (_i_var[5])-(_i_var[4]);
	_i_var[7] = -(_i_var[0]);
	_i_var[8] = -(_i_var[1]);
	_i_var[9] = (_i_var[7])/(_i_var[6]);
	_i_var[10] = (x(1,0))-(x(3,0));
	_i_var[11] = (_i_var[2])/(_i_var[6]);
	_i_var[12] = (x(5,0))-(x(3,0));
	_i_var[13] = (x(0,0))-(x(2,0));
	_i_var[14] = (x(4,0))-(x(2,0));
	_i_var[15] = (_i_var[3])/(_i_var[6]);
	_i_var[16] = (_i_var[8])/(_i_var[6]);
	_i_var[17] = (_i_var[10])*(_i_var[9]);
	_i_var[18] = (_i_var[12])*(_i_var[11]);
	_i_var[19] = (_i_var[13])*(_i_var[9]);
	_i_var[20] = (_i_var[14])*(_i_var[11]);
	_i_var[21] = (_i_var[10])*(_i_var[15]);
	_i_var[22] = (_i_var[12])*(_i_var[16]);
	_i_var[23] = (_i_var[13])*(_i_var[15]);
	_i_var[24] = (_i_var[14])*(_i_var[16]);
	_i_var[25] = (_i_var[18])+(_i_var[17]);
	_i_var[26] = (_i_var[20])+(_i_var[19]);
	_i_var[27] = (_i_var[22])+(_i_var[21]);
	_i_var[28] = (_i_var[24])+(_i_var[23]);
	_i_var[29] = (_i_var[25])*(_i_var[25]);
	_i_var[30] = (_i_var[26])*(_i_var[26]);
	_i_var[31] = (_i_var[27])*(_i_var[25]);
	_i_var[32] = (_i_var[28])*(_i_var[26]);
	_i_var[33] = 1;
	_i_var[34] = (_i_var[30])+(_i_var[29]);
	_i_var[35] = (_i_var[27])*(_i_var[27]);
	_i_var[36] = (_i_var[28])*(_i_var[28]);
	_i_var[37] = (_i_var[25])*(_i_var[27]);
	_i_var[38] = (_i_var[26])*(_i_var[28]);
	_i_var[39] = (_i_var[32])+(_i_var[31]);
	_i_var[40] = (_i_var[34])-(_i_var[33]);
	_i_var[41] = (_i_var[36])+(_i_var[35]);
	_i_var[42] = (_i_var[38])+(_i_var[37]);
	_i_var[43] = (_i_var[39])*(_i_var[39]);
	_i_var[44] = (_i_var[40])*(_i_var[40]);
	_i_var[45] = (_i_var[41])-(_i_var[33]);
	_i_var[46] = (_i_var[42])*(_i_var[42]);
	_i_var[47] = (_i_var[44])+(_i_var[43]);
	_i_var[48] = (_i_var[45])*(_i_var[45]);
	_i_var[49] = (_i_var[47])+(_i_var[46]);
	_i_var[50] = (_i_var[49])+(_i_var[48]);
	_i_var[51] = std::sqrt(_i_var[50]);
	_i_var[52] = (stiffness)*(_i_var[51]);
	energy = _i_var[52];
}
void computeDeformationPenaltyGradient(double stiffness, const Eigen::Matrix<double,6,1> & X, const Eigen::Matrix<double,6,1> & x, Eigen::Matrix<double, 6, 1>& energygradient){
	double _i_var[107];
	_i_var[0] = (X(5,0))-(X(3,0));
	_i_var[1] = (X(0,0))-(X(2,0));
	_i_var[2] = (X(1,0))-(X(3,0));
	_i_var[3] = (X(4,0))-(X(2,0));
	_i_var[4] = (_i_var[1])*(_i_var[0]);
	_i_var[5] = (_i_var[3])*(_i_var[2]);
	_i_var[6] = (_i_var[5])-(_i_var[4]);
	_i_var[7] = -(_i_var[0]);
	_i_var[8] = -(_i_var[1]);
	_i_var[9] = (_i_var[7])/(_i_var[6]);
	_i_var[10] = (x(1,0))-(x(3,0));
	_i_var[11] = (_i_var[2])/(_i_var[6]);
	_i_var[12] = (x(5,0))-(x(3,0));
	_i_var[13] = (x(0,0))-(x(2,0));
	_i_var[14] = (x(4,0))-(x(2,0));
	_i_var[15] = (_i_var[3])/(_i_var[6]);
	_i_var[16] = (_i_var[8])/(_i_var[6]);
	_i_var[17] = (_i_var[10])*(_i_var[9]);
	_i_var[18] = (_i_var[12])*(_i_var[11]);
	_i_var[19] = (_i_var[13])*(_i_var[9]);
	_i_var[20] = (_i_var[14])*(_i_var[11]);
	_i_var[21] = (_i_var[10])*(_i_var[15]);
	_i_var[22] = (_i_var[12])*(_i_var[16]);
	_i_var[23] = (_i_var[13])*(_i_var[15]);
	_i_var[24] = (_i_var[14])*(_i_var[16]);
	_i_var[25] = (_i_var[18])+(_i_var[17]);
	_i_var[26] = (_i_var[20])+(_i_var[19]);
	_i_var[27] = (_i_var[22])+(_i_var[21]);
	_i_var[28] = (_i_var[24])+(_i_var[23]);
	_i_var[29] = (_i_var[25])*(_i_var[25]);
	_i_var[30] = (_i_var[26])*(_i_var[26]);
	_i_var[31] = (_i_var[27])*(_i_var[25]);
	_i_var[32] = (_i_var[28])*(_i_var[26]);
	_i_var[33] = 1;
	_i_var[34] = (_i_var[30])+(_i_var[29]);
	_i_var[35] = (_i_var[27])*(_i_var[27]);
	_i_var[36] = (_i_var[28])*(_i_var[28]);
	_i_var[37] = (_i_var[25])*(_i_var[27]);
	_i_var[38] = (_i_var[26])*(_i_var[28]);
	_i_var[39] = (_i_var[32])+(_i_var[31]);
	_i_var[40] = (_i_var[34])-(_i_var[33]);
	_i_var[41] = (_i_var[36])+(_i_var[35]);
	_i_var[42] = (_i_var[38])+(_i_var[37]);
	_i_var[43] = (_i_var[39])*(_i_var[39]);
	_i_var[44] = (_i_var[40])*(_i_var[40]);
	_i_var[45] = (_i_var[41])-(_i_var[33]);
	_i_var[46] = (_i_var[42])*(_i_var[42]);
	_i_var[47] = (_i_var[44])+(_i_var[43]);
	_i_var[48] = (_i_var[45])*(_i_var[45]);
	_i_var[49] = (_i_var[47])+(_i_var[46]);
	_i_var[50] = (_i_var[49])+(_i_var[48]);
	_i_var[51] = std::sqrt(_i_var[50]);
	_i_var[52] = 2;
	_i_var[53] = (_i_var[52])*(_i_var[51]);
	_i_var[54] = (_i_var[33])/(_i_var[53]);
	_i_var[55] = (stiffness)*(_i_var[54]);
	_i_var[56] = (_i_var[55])*(_i_var[39]);
	_i_var[57] = (_i_var[55])*(_i_var[42]);
	_i_var[58] = (_i_var[55])*(_i_var[45]);
	_i_var[59] = (_i_var[55])*(_i_var[40]);
	_i_var[60] = (_i_var[52])*(_i_var[56]);
	_i_var[61] = (_i_var[52])*(_i_var[57]);
	_i_var[62] = (_i_var[52])*(_i_var[58]);
	_i_var[63] = (_i_var[52])*(_i_var[59]);
	_i_var[64] = (_i_var[60])*(_i_var[28]);
	_i_var[65] = (_i_var[61])*(_i_var[28]);
	_i_var[66] = (_i_var[62])*(_i_var[28]);
	_i_var[67] = (_i_var[61])*(_i_var[26]);
	_i_var[68] = (_i_var[60])*(_i_var[27]);
	_i_var[69] = (_i_var[61])*(_i_var[27]);
	_i_var[70] = (_i_var[62])*(_i_var[27]);
	_i_var[71] = (_i_var[61])*(_i_var[25]);
	_i_var[72] = (_i_var[63])*(_i_var[26]);
	_i_var[73] = (_i_var[65])+(_i_var[64]);
	_i_var[74] = (_i_var[67])+(_i_var[66]);
	_i_var[75] = (_i_var[63])*(_i_var[25]);
	_i_var[76] = (_i_var[69])+(_i_var[68]);
	_i_var[77] = (_i_var[71])+(_i_var[70]);
	_i_var[78] = (_i_var[73])+(_i_var[72]);
	_i_var[79] = (_i_var[60])*(_i_var[26]);
	_i_var[80] = (_i_var[74])+(_i_var[66]);
	_i_var[81] = (_i_var[76])+(_i_var[75]);
	_i_var[82] = (_i_var[60])*(_i_var[25]);
	_i_var[83] = (_i_var[77])+(_i_var[70]);
	_i_var[84] = (_i_var[78])+(_i_var[72]);
	_i_var[85] = (_i_var[80])+(_i_var[79]);
	_i_var[86] = (_i_var[81])+(_i_var[75]);
	_i_var[87] = (_i_var[83])+(_i_var[82]);
	_i_var[88] = (_i_var[84])*(_i_var[9]);
	_i_var[89] = (_i_var[85])*(_i_var[15]);
	_i_var[90] = (_i_var[84])*(_i_var[11]);
	_i_var[91] = (_i_var[85])*(_i_var[16]);
	_i_var[92] = (_i_var[86])*(_i_var[9]);
	_i_var[93] = (_i_var[87])*(_i_var[15]);
	_i_var[94] = (_i_var[86])*(_i_var[11]);
	_i_var[95] = (_i_var[87])*(_i_var[16]);
	_i_var[96] = -1;
	_i_var[97] = (_i_var[89])+(_i_var[88]);
	_i_var[98] = (_i_var[91])+(_i_var[90]);
	_i_var[99] = (_i_var[93])+(_i_var[92]);
	_i_var[100] = (_i_var[95])+(_i_var[94]);
	_i_var[101] = (_i_var[97])*(_i_var[96]);
	_i_var[102] = (_i_var[98])*(_i_var[96]);
	_i_var[103] = (_i_var[99])*(_i_var[96]);
	_i_var[104] = (_i_var[100])*(_i_var[96]);
	_i_var[105] = (_i_var[102])+(_i_var[101]);
	_i_var[106] = (_i_var[104])+(_i_var[103]);
	energygradient(0,0) = _i_var[97];
	energygradient(1,0) = _i_var[99];
	energygradient(2,0) = _i_var[105];
	energygradient(3,0) = _i_var[106];
	energygradient(4,0) = _i_var[98];
	energygradient(5,0) = _i_var[100];
}
void computeDeformationPenaltyHessian(double stiffness, const Eigen::Matrix<double,6,1> & X, const Eigen::Matrix<double,6,1> & x, Eigen::Matrix<double, 6, 6>& energyhessian){
	double _i_var[351];
	_i_var[0] = (X(5,0))-(X(3,0));
	_i_var[1] = (X(0,0))-(X(2,0));
	_i_var[2] = (X(1,0))-(X(3,0));
	_i_var[3] = (X(4,0))-(X(2,0));
	_i_var[4] = (_i_var[1])*(_i_var[0]);
	_i_var[5] = (_i_var[3])*(_i_var[2]);
	_i_var[6] = (_i_var[5])-(_i_var[4]);
	_i_var[7] = -(_i_var[0]);
	_i_var[8] = -(_i_var[1]);
	_i_var[9] = (_i_var[7])/(_i_var[6]);
	_i_var[10] = (x(1,0))-(x(3,0));
	_i_var[11] = (_i_var[2])/(_i_var[6]);
	_i_var[12] = (x(5,0))-(x(3,0));
	_i_var[13] = (x(0,0))-(x(2,0));
	_i_var[14] = (x(4,0))-(x(2,0));
	_i_var[15] = (_i_var[3])/(_i_var[6]);
	_i_var[16] = (_i_var[8])/(_i_var[6]);
	_i_var[17] = (_i_var[10])*(_i_var[9]);
	_i_var[18] = (_i_var[12])*(_i_var[11]);
	_i_var[19] = (_i_var[13])*(_i_var[9]);
	_i_var[20] = (_i_var[14])*(_i_var[11]);
	_i_var[21] = (_i_var[10])*(_i_var[15]);
	_i_var[22] = (_i_var[12])*(_i_var[16]);
	_i_var[23] = (_i_var[13])*(_i_var[15]);
	_i_var[24] = (_i_var[14])*(_i_var[16]);
	_i_var[25] = (_i_var[18])+(_i_var[17]);
	_i_var[26] = (_i_var[20])+(_i_var[19]);
	_i_var[27] = (_i_var[22])+(_i_var[21]);
	_i_var[28] = (_i_var[24])+(_i_var[23]);
	_i_var[29] = (_i_var[25])*(_i_var[25]);
	_i_var[30] = (_i_var[26])*(_i_var[26]);
	_i_var[31] = (_i_var[27])*(_i_var[25]);
	_i_var[32] = (_i_var[28])*(_i_var[26]);
	_i_var[33] = 1;
	_i_var[34] = (_i_var[30])+(_i_var[29]);
	_i_var[35] = (_i_var[27])*(_i_var[27]);
	_i_var[36] = (_i_var[28])*(_i_var[28]);
	_i_var[37] = (_i_var[25])*(_i_var[27]);
	_i_var[38] = (_i_var[26])*(_i_var[28]);
	_i_var[39] = (_i_var[32])+(_i_var[31]);
	_i_var[40] = (_i_var[34])-(_i_var[33]);
	_i_var[41] = (_i_var[36])+(_i_var[35]);
	_i_var[42] = (_i_var[38])+(_i_var[37]);
	_i_var[43] = (_i_var[39])*(_i_var[39]);
	_i_var[44] = (_i_var[40])*(_i_var[40]);
	_i_var[45] = (_i_var[41])-(_i_var[33]);
	_i_var[46] = (_i_var[42])*(_i_var[42]);
	_i_var[47] = (_i_var[44])+(_i_var[43]);
	_i_var[48] = (_i_var[45])*(_i_var[45]);
	_i_var[49] = (_i_var[47])+(_i_var[46]);
	_i_var[50] = (_i_var[49])+(_i_var[48]);
	_i_var[51] = std::sqrt(_i_var[50]);
	_i_var[52] = 2;
	_i_var[53] = (_i_var[52])*(_i_var[51]);
	_i_var[54] = (_i_var[53])*(_i_var[53]);
	_i_var[55] = (_i_var[33])/(_i_var[54]);
	_i_var[56] = -(_i_var[55]);
	_i_var[57] = (_i_var[33])/(_i_var[53]);
	_i_var[58] = (_i_var[56])*(_i_var[52]);
	_i_var[59] = (_i_var[58])*(_i_var[57]);
	_i_var[60] = (_i_var[52])*(_i_var[42]);
	_i_var[61] = (stiffness)*(_i_var[59]);
	_i_var[62] = (_i_var[52])*(_i_var[45]);
	_i_var[63] = (stiffness)*(_i_var[57]);
	_i_var[64] = (_i_var[60])*(_i_var[60]);
	_i_var[65] = (_i_var[62])*(_i_var[61]);
	_i_var[66] = (_i_var[63])*(_i_var[52]);
	_i_var[67] = (_i_var[64])*(_i_var[61]);
	_i_var[68] = (_i_var[52])*(_i_var[39]);
	_i_var[69] = (_i_var[52])*(_i_var[40]);
	_i_var[70] = (_i_var[60])*(_i_var[61]);
	_i_var[71] = (_i_var[60])*(_i_var[65]);
	_i_var[72] = (_i_var[67])+(_i_var[66]);
	_i_var[73] = (_i_var[68])*(_i_var[68]);
	_i_var[74] = (_i_var[62])*(_i_var[62]);
	_i_var[75] = (_i_var[69])*(_i_var[61]);
	_i_var[76] = (_i_var[68])*(_i_var[70]);
	_i_var[77] = (_i_var[68])*(_i_var[65]);
	_i_var[78] = (_i_var[52])*(_i_var[28]);
	_i_var[79] = (_i_var[28])*(_i_var[71]);
	_i_var[80] = (_i_var[63])*(_i_var[60]);
	_i_var[81] = (_i_var[38])*(_i_var[72]);
	_i_var[82] = (_i_var[73])*(_i_var[61]);
	_i_var[83] = (_i_var[74])*(_i_var[61]);
	_i_var[84] = (_i_var[52])*(_i_var[27]);
	_i_var[85] = (_i_var[27])*(_i_var[71]);
	_i_var[86] = (_i_var[37])*(_i_var[72]);
	_i_var[87] = (_i_var[68])*(_i_var[75]);
	_i_var[88] = (_i_var[69])*(_i_var[70]);
	_i_var[89] = (_i_var[28])*(_i_var[76]);
	_i_var[90] = (_i_var[78])*(_i_var[77]);
	_i_var[91] = (_i_var[26])*(_i_var[76]);
	_i_var[92] = (_i_var[78])*(_i_var[79]);
	_i_var[93] = (_i_var[81])+(_i_var[80]);
	_i_var[94] = (_i_var[26])*(_i_var[71]);
	_i_var[95] = (_i_var[52])*(_i_var[78]);
	_i_var[96] = (_i_var[69])*(_i_var[69]);
	_i_var[97] = (_i_var[82])+(_i_var[66]);
	_i_var[98] = (_i_var[83])+(_i_var[66]);
	_i_var[99] = (_i_var[27])*(_i_var[76]);
	_i_var[100] = (_i_var[84])*(_i_var[77]);
	_i_var[101] = (_i_var[25])*(_i_var[76]);
	_i_var[102] = (_i_var[84])*(_i_var[85]);
	_i_var[103] = (_i_var[86])+(_i_var[80]);
	_i_var[104] = (_i_var[25])*(_i_var[71]);
	_i_var[105] = (_i_var[52])*(_i_var[84]);
	_i_var[106] = (_i_var[28])*(_i_var[87]);
	_i_var[107] = (_i_var[28])*(_i_var[88]);
	_i_var[108] = (_i_var[52])*(_i_var[26]);
	_i_var[109] = (_i_var[78])*(_i_var[89]);
	_i_var[110] = (_i_var[36])*(_i_var[72]);
	_i_var[111] = (_i_var[69])*(_i_var[65]);
	_i_var[112] = (_i_var[91])+(_i_var[90]);
	_i_var[113] = (_i_var[26])*(_i_var[89]);
	_i_var[114] = (_i_var[93])+(_i_var[92]);
	_i_var[115] = (_i_var[78])*(_i_var[78]);
	_i_var[116] = (_i_var[95])*(_i_var[94]);
	_i_var[117] = (_i_var[30])*(_i_var[72]);
	_i_var[118] = (_i_var[96])*(_i_var[61]);
	_i_var[119] = (_i_var[28])*(_i_var[97]);
	_i_var[120] = (_i_var[28])*(_i_var[72]);
	_i_var[121] = (_i_var[26])*(_i_var[72]);
	_i_var[122] = (_i_var[78])*(_i_var[98]);
	_i_var[123] = (_i_var[27])*(_i_var[87]);
	_i_var[124] = (_i_var[27])*(_i_var[88]);
	_i_var[125] = (_i_var[52])*(_i_var[25]);
	_i_var[126] = (_i_var[84])*(_i_var[99]);
	_i_var[127] = (_i_var[35])*(_i_var[72]);
	_i_var[128] = (_i_var[101])+(_i_var[100]);
	_i_var[129] = (_i_var[25])*(_i_var[99]);
	_i_var[130] = (_i_var[103])+(_i_var[102]);
	_i_var[131] = (_i_var[84])*(_i_var[84]);
	_i_var[132] = (_i_var[105])*(_i_var[104]);
	_i_var[133] = (_i_var[29])*(_i_var[72]);
	_i_var[134] = (_i_var[107])+(_i_var[106]);
	_i_var[135] = (_i_var[52])*(_i_var[108]);
	_i_var[136] = (_i_var[36])*(_i_var[97]);
	_i_var[137] = (_i_var[110])+(_i_var[109]);
	_i_var[138] = (_i_var[78])*(_i_var[111]);
	_i_var[139] = (_i_var[26])*(_i_var[88]);
	_i_var[140] = (_i_var[28])*(_i_var[112]);
	_i_var[141] = (_i_var[114])+(_i_var[113]);
	_i_var[142] = (_i_var[63])*(_i_var[62]);
	_i_var[143] = (_i_var[115])*(_i_var[98]);
	_i_var[144] = (_i_var[117])+(_i_var[116]);
	_i_var[145] = (_i_var[118])+(_i_var[66]);
	_i_var[146] = (_i_var[89])+(_i_var[119]);
	_i_var[147] = (_i_var[28])*(_i_var[99]);
	_i_var[148] = (_i_var[27])*(_i_var[120]);
	_i_var[149] = (_i_var[26])*(_i_var[97]);
	_i_var[150] = (_i_var[78])*(_i_var[85]);
	_i_var[151] = (_i_var[27])*(_i_var[121]);
	_i_var[152] = (_i_var[84])*(_i_var[111]);
	_i_var[153] = (_i_var[25])*(_i_var[88]);
	_i_var[154] = (_i_var[84])*(_i_var[79]);
	_i_var[155] = (_i_var[25])*(_i_var[120]);
	_i_var[156] = (_i_var[94])+(_i_var[122]);
	_i_var[157] = (_i_var[78])*(_i_var[104]);
	_i_var[158] = (_i_var[25])*(_i_var[121]);
	_i_var[159] = (_i_var[124])+(_i_var[123]);
	_i_var[160] = (_i_var[52])*(_i_var[125]);
	_i_var[161] = (_i_var[35])*(_i_var[97]);
	_i_var[162] = (_i_var[127])+(_i_var[126]);
	_i_var[163] = (_i_var[27])*(_i_var[128]);
	_i_var[164] = (_i_var[130])+(_i_var[129]);
	_i_var[165] = (_i_var[131])*(_i_var[98]);
	_i_var[166] = (_i_var[133])+(_i_var[132]);
	_i_var[167] = (_i_var[108])*(_i_var[108]);
	_i_var[168] = (_i_var[135])*(_i_var[134]);
	_i_var[169] = (_i_var[137])+(_i_var[136]);
	_i_var[170] = (_i_var[26])*(_i_var[87]);
	_i_var[171] = (_i_var[139])+(_i_var[138]);
	_i_var[172] = (_i_var[38])*(_i_var[97]);
	_i_var[173] = (_i_var[141])+(_i_var[140]);
	_i_var[174] = (_i_var[142])*(_i_var[52]);
	_i_var[175] = (_i_var[144])+(_i_var[143]);
	_i_var[176] = (_i_var[108])*(_i_var[145]);
	_i_var[177] = (_i_var[27])*(_i_var[146]);
	_i_var[178] = (_i_var[148])+(_i_var[147]);
	_i_var[179] = (_i_var[112])+(_i_var[149]);
	_i_var[180] = (_i_var[26])*(_i_var[99]);
	_i_var[181] = (_i_var[151])+(_i_var[150]);
	_i_var[182] = (_i_var[25])*(_i_var[87]);
	_i_var[183] = (_i_var[153])+(_i_var[152]);
	_i_var[184] = (_i_var[28])*(_i_var[128]);
	_i_var[185] = (_i_var[155])+(_i_var[154]);
	_i_var[186] = (_i_var[84])*(_i_var[156]);
	_i_var[187] = (_i_var[158])+(_i_var[157]);
	_i_var[188] = (_i_var[125])*(_i_var[125]);
	_i_var[189] = (_i_var[160])*(_i_var[159]);
	_i_var[190] = (_i_var[162])+(_i_var[161]);
	_i_var[191] = (_i_var[37])*(_i_var[97]);
	_i_var[192] = (_i_var[164])+(_i_var[163]);
	_i_var[193] = (_i_var[166])+(_i_var[165]);
	_i_var[194] = (_i_var[63])*(_i_var[69]);
	_i_var[195] = (_i_var[167])*(_i_var[145]);
	_i_var[196] = (_i_var[169])+(_i_var[168]);
	_i_var[197] = (_i_var[171])+(_i_var[170]);
	_i_var[198] = (_i_var[63])*(_i_var[68]);
	_i_var[199] = (_i_var[173])+(_i_var[172]);
	_i_var[200] = (_i_var[108])*(_i_var[112]);
	_i_var[201] = (_i_var[175])+(_i_var[174]);
	_i_var[202] = (_i_var[134])+(_i_var[176]);
	_i_var[203] = (_i_var[108])*(_i_var[159]);
	_i_var[204] = (_i_var[178])+(_i_var[177]);
	_i_var[205] = (_i_var[27])*(_i_var[179]);
	_i_var[206] = (_i_var[181])+(_i_var[180]);
	_i_var[207] = (_i_var[183])+(_i_var[182]);
	_i_var[208] = (_i_var[25])*(_i_var[146]);
	_i_var[209] = (_i_var[185])+(_i_var[184]);
	_i_var[210] = (_i_var[26])*(_i_var[128]);
	_i_var[211] = (_i_var[187])+(_i_var[186]);
	_i_var[212] = (_i_var[188])*(_i_var[145]);
	_i_var[213] = (_i_var[190])+(_i_var[189]);
	_i_var[214] = (_i_var[192])+(_i_var[191]);
	_i_var[215] = (_i_var[125])*(_i_var[128]);
	_i_var[216] = (_i_var[193])+(_i_var[174]);
	_i_var[217] = (_i_var[194])*(_i_var[52]);
	_i_var[218] = (_i_var[196])+(_i_var[195]);
	_i_var[219] = (_i_var[108])*(_i_var[197]);
	_i_var[220] = (_i_var[199])+(_i_var[198]);
	_i_var[221] = (_i_var[30])*(_i_var[97]);
	_i_var[222] = (_i_var[201])+(_i_var[200]);
	_i_var[223] = (_i_var[125])*(_i_var[202]);
	_i_var[224] = (_i_var[204])+(_i_var[203]);
	_i_var[225] = (_i_var[125])*(_i_var[197]);
	_i_var[226] = (_i_var[206])+(_i_var[205]);
	_i_var[227] = (_i_var[108])*(_i_var[207]);
	_i_var[228] = (_i_var[209])+(_i_var[208]);
	_i_var[229] = (_i_var[25])*(_i_var[179]);
	_i_var[230] = (_i_var[211])+(_i_var[210]);
	_i_var[231] = (_i_var[213])+(_i_var[212]);
	_i_var[232] = (_i_var[125])*(_i_var[207]);
	_i_var[233] = (_i_var[214])+(_i_var[198]);
	_i_var[234] = (_i_var[29])*(_i_var[97]);
	_i_var[235] = (_i_var[216])+(_i_var[215]);
	_i_var[236] = (_i_var[218])+(_i_var[217]);
	_i_var[237] = (_i_var[220])+(_i_var[219]);
	_i_var[238] = (_i_var[222])+(_i_var[221]);
	_i_var[239] = (_i_var[224])+(_i_var[223]);
	_i_var[240] = (_i_var[226])+(_i_var[225]);
	_i_var[241] = (_i_var[228])+(_i_var[227]);
	_i_var[242] = (_i_var[230])+(_i_var[229]);
	_i_var[243] = (_i_var[231])+(_i_var[217]);
	_i_var[244] = (_i_var[233])+(_i_var[232]);
	_i_var[245] = (_i_var[235])+(_i_var[234]);
	_i_var[246] = (_i_var[11])*(_i_var[236]);
	_i_var[247] = (_i_var[16])*(_i_var[237]);
	_i_var[248] = (_i_var[15])*(_i_var[237]);
	_i_var[249] = (_i_var[16])*(_i_var[238]);
	_i_var[250] = (_i_var[9])*(_i_var[239]);
	_i_var[251] = (_i_var[15])*(_i_var[240]);
	_i_var[252] = (_i_var[15])*(_i_var[241]);
	_i_var[253] = (_i_var[15])*(_i_var[242]);
	_i_var[254] = (_i_var[11])*(_i_var[239]);
	_i_var[255] = (_i_var[16])*(_i_var[240]);
	_i_var[256] = (_i_var[16])*(_i_var[242]);
	_i_var[257] = (_i_var[16])*(_i_var[241]);
	_i_var[258] = (_i_var[11])*(_i_var[243]);
	_i_var[259] = (_i_var[16])*(_i_var[244]);
	_i_var[260] = (_i_var[15])*(_i_var[244]);
	_i_var[261] = (_i_var[16])*(_i_var[245]);
	_i_var[262] = (_i_var[247])+(_i_var[246]);
	_i_var[263] = (_i_var[11])*(_i_var[248]);
	_i_var[264] = (_i_var[15])*(_i_var[249]);
	_i_var[265] = (_i_var[251])+(_i_var[250]);
	_i_var[266] = (_i_var[9])*(_i_var[252]);
	_i_var[267] = (_i_var[15])*(_i_var[253]);
	_i_var[268] = (_i_var[255])+(_i_var[254]);
	_i_var[269] = (_i_var[11])*(_i_var[252]);
	_i_var[270] = (_i_var[15])*(_i_var[256]);
	_i_var[271] = (_i_var[9])*(_i_var[257]);
	_i_var[272] = (_i_var[16])*(_i_var[253]);
	_i_var[273] = (_i_var[11])*(_i_var[257]);
	_i_var[274] = (_i_var[16])*(_i_var[256]);
	_i_var[275] = (_i_var[259])+(_i_var[258]);
	_i_var[276] = (_i_var[11])*(_i_var[260]);
	_i_var[277] = (_i_var[15])*(_i_var[261]);
	_i_var[278] = (_i_var[52])*(_i_var[9]);
	_i_var[279] = (_i_var[15])*(_i_var[15]);
	_i_var[280] = (_i_var[9])*(_i_var[262]);
	_i_var[281] = (_i_var[264])+(_i_var[263]);
	_i_var[282] = (_i_var[52])*(_i_var[11]);
	_i_var[283] = (_i_var[16])*(_i_var[16]);
	_i_var[284] = (_i_var[9])*(_i_var[265]);
	_i_var[285] = (_i_var[267])+(_i_var[266]);
	_i_var[286] = (_i_var[9])*(_i_var[268]);
	_i_var[287] = (_i_var[270])+(_i_var[269]);
	_i_var[288] = (_i_var[11])*(_i_var[265]);
	_i_var[289] = (_i_var[272])+(_i_var[271]);
	_i_var[290] = (_i_var[11])*(_i_var[268]);
	_i_var[291] = (_i_var[274])+(_i_var[273]);
	_i_var[292] = (_i_var[9])*(_i_var[275]);
	_i_var[293] = (_i_var[277])+(_i_var[276]);
	_i_var[294] = (_i_var[9])*(_i_var[9]);
	_i_var[295] = (_i_var[278])*(_i_var[248]);
	_i_var[296] = (_i_var[279])*(_i_var[238]);
	_i_var[297] = (_i_var[278])*(_i_var[260]);
	_i_var[298] = (_i_var[279])*(_i_var[245]);
	_i_var[299] = (_i_var[281])+(_i_var[280]);
	_i_var[300] = -1;
	_i_var[301] = (_i_var[11])*(_i_var[11]);
	_i_var[302] = (_i_var[282])*(_i_var[247]);
	_i_var[303] = (_i_var[283])*(_i_var[238]);
	_i_var[304] = (_i_var[285])+(_i_var[284]);
	_i_var[305] = (_i_var[287])+(_i_var[286]);
	_i_var[306] = (_i_var[289])+(_i_var[288]);
	_i_var[307] = (_i_var[291])+(_i_var[290]);
	_i_var[308] = (_i_var[293])+(_i_var[292]);
	_i_var[309] = (_i_var[282])*(_i_var[259]);
	_i_var[310] = (_i_var[283])*(_i_var[245]);
	_i_var[311] = (_i_var[294])*(_i_var[236]);
	_i_var[312] = (_i_var[296])+(_i_var[295]);
	_i_var[313] = (_i_var[294])*(_i_var[243]);
	_i_var[314] = (_i_var[298])+(_i_var[297]);
	_i_var[315] = (_i_var[300])*(_i_var[299]);
	_i_var[316] = -2;
	_i_var[317] = (_i_var[301])*(_i_var[236]);
	_i_var[318] = (_i_var[303])+(_i_var[302]);
	_i_var[319] = (_i_var[300])*(_i_var[304]);
	_i_var[320] = (_i_var[300])*(_i_var[305]);
	_i_var[321] = (_i_var[300])*(_i_var[306]);
	_i_var[322] = (_i_var[300])*(_i_var[307]);
	_i_var[323] = (_i_var[300])*(_i_var[308]);
	_i_var[324] = (_i_var[301])*(_i_var[243]);
	_i_var[325] = (_i_var[310])+(_i_var[309]);
	_i_var[326] = (_i_var[312])+(_i_var[311]);
	_i_var[327] = (_i_var[314])+(_i_var[313]);
	_i_var[328] = (_i_var[316])*(_i_var[315]);
	_i_var[329] = (_i_var[318])+(_i_var[317]);
	_i_var[330] = (_i_var[320])+(_i_var[319]);
	_i_var[331] = (_i_var[322])+(_i_var[321]);
	_i_var[332] = (_i_var[316])*(_i_var[323]);
	_i_var[333] = (_i_var[325])+(_i_var[324]);
	_i_var[334] = (_i_var[300])*(_i_var[326]);
	_i_var[335] = (_i_var[300])*(_i_var[327]);
	_i_var[336] = (_i_var[329])+(_i_var[328]);
	_i_var[337] = (_i_var[300])*(_i_var[330]);
	_i_var[338] = (_i_var[300])*(_i_var[331]);
	_i_var[339] = (_i_var[300])*(_i_var[329]);
	_i_var[340] = (_i_var[333])+(_i_var[332]);
	_i_var[341] = (_i_var[300])*(_i_var[333]);
	_i_var[342] = (_i_var[315])+(_i_var[334]);
	_i_var[343] = (_i_var[321])+(_i_var[319]);
	_i_var[344] = (_i_var[323])+(_i_var[335]);
	_i_var[345] = (_i_var[336])+(_i_var[326]);
	_i_var[346] = (_i_var[338])+(_i_var[337]);
	_i_var[347] = (_i_var[339])+(_i_var[315]);
	_i_var[348] = (_i_var[340])+(_i_var[327]);
	_i_var[349] = (_i_var[322])+(_i_var[320]);
	_i_var[350] = (_i_var[341])+(_i_var[323]);
	energyhessian(0,0) = _i_var[326];
	energyhessian(1,0) = _i_var[304];
	energyhessian(2,0) = _i_var[342];
	energyhessian(3,0) = _i_var[343];
	energyhessian(4,0) = _i_var[299];
	energyhessian(5,0) = _i_var[306];
	energyhessian(0,1) = _i_var[304];
	energyhessian(1,1) = _i_var[327];
	energyhessian(2,1) = _i_var[330];
	energyhessian(3,1) = _i_var[344];
	energyhessian(4,1) = _i_var[305];
	energyhessian(5,1) = _i_var[308];
	energyhessian(0,2) = _i_var[342];
	energyhessian(1,2) = _i_var[330];
	energyhessian(2,2) = _i_var[345];
	energyhessian(3,2) = _i_var[346];
	energyhessian(4,2) = _i_var[347];
	energyhessian(5,2) = _i_var[331];
	energyhessian(0,3) = _i_var[343];
	energyhessian(1,3) = _i_var[344];
	energyhessian(2,3) = _i_var[346];
	energyhessian(3,3) = _i_var[348];
	energyhessian(4,3) = _i_var[349];
	energyhessian(5,3) = _i_var[350];
	energyhessian(0,4) = _i_var[299];
	energyhessian(1,4) = _i_var[305];
	energyhessian(2,4) = _i_var[347];
	energyhessian(3,4) = _i_var[349];
	energyhessian(4,4) = _i_var[329];
	energyhessian(5,4) = _i_var[307];
	energyhessian(0,5) = _i_var[306];
	energyhessian(1,5) = _i_var[308];
	energyhessian(2,5) = _i_var[331];
	energyhessian(3,5) = _i_var[350];
	energyhessian(4,5) = _i_var[307];
	energyhessian(5,5) = _i_var[333];
}


void computeDeformationPenaltyDet(double stiffness, const Eigen::Matrix<double,6,1> & X, const Eigen::Matrix<double,6,1> & x, double& energy){
	double _i_var[36];
	_i_var[0] = (X(5,0))-(X(3,0));
	_i_var[1] = (X(0,0))-(X(2,0));
	_i_var[2] = (X(1,0))-(X(3,0));
	_i_var[3] = (X(4,0))-(X(2,0));
	_i_var[4] = (_i_var[1])*(_i_var[0]);
	_i_var[5] = (_i_var[3])*(_i_var[2]);
	_i_var[6] = (_i_var[5])-(_i_var[4]);
	_i_var[7] = -(_i_var[0]);
	_i_var[8] = -(_i_var[1]);
	_i_var[9] = (_i_var[7])/(_i_var[6]);
	_i_var[10] = (x(1,0))-(x(3,0));
	_i_var[11] = (_i_var[2])/(_i_var[6]);
	_i_var[12] = (x(5,0))-(x(3,0));
	_i_var[13] = (_i_var[3])/(_i_var[6]);
	_i_var[14] = (x(0,0))-(x(2,0));
	_i_var[15] = (_i_var[8])/(_i_var[6]);
	_i_var[16] = (x(4,0))-(x(2,0));
	_i_var[17] = (_i_var[10])*(_i_var[9]);
	_i_var[18] = (_i_var[12])*(_i_var[11]);
	_i_var[19] = (_i_var[14])*(_i_var[13]);
	_i_var[20] = (_i_var[16])*(_i_var[15]);
	_i_var[21] = (_i_var[10])*(_i_var[13]);
	_i_var[22] = (_i_var[12])*(_i_var[15]);
	_i_var[23] = (_i_var[14])*(_i_var[9]);
	_i_var[24] = (_i_var[16])*(_i_var[11]);
	_i_var[25] = (_i_var[18])+(_i_var[17]);
	_i_var[26] = (_i_var[20])+(_i_var[19]);
	_i_var[27] = (_i_var[22])+(_i_var[21]);
	_i_var[28] = (_i_var[24])+(_i_var[23]);
	_i_var[29] = (_i_var[26])*(_i_var[25]);
	_i_var[30] = (_i_var[28])*(_i_var[27]);
	_i_var[31] = 1;
	_i_var[32] = (_i_var[30])-(_i_var[29]);
	_i_var[33] = (_i_var[32])-(_i_var[31]);
	_i_var[34] = (stiffness)*(_i_var[33]);
	_i_var[35] = (_i_var[34])*(_i_var[33]);
	energy = _i_var[35];
}
void computeDeformationPenaltyDetGradient(double stiffness, const Eigen::Matrix<double,6,1> & X, const Eigen::Matrix<double,6,1> & x, Eigen::Matrix<double, 6, 1>& energygradient){
	double _i_var[61];
	_i_var[0] = (X(5,0))-(X(3,0));
	_i_var[1] = (X(0,0))-(X(2,0));
	_i_var[2] = (X(1,0))-(X(3,0));
	_i_var[3] = (X(4,0))-(X(2,0));
	_i_var[4] = (_i_var[1])*(_i_var[0]);
	_i_var[5] = (_i_var[3])*(_i_var[2]);
	_i_var[6] = (_i_var[5])-(_i_var[4]);
	_i_var[7] = -(_i_var[0]);
	_i_var[8] = -(_i_var[1]);
	_i_var[9] = (_i_var[7])/(_i_var[6]);
	_i_var[10] = (x(1,0))-(x(3,0));
	_i_var[11] = (_i_var[2])/(_i_var[6]);
	_i_var[12] = (x(5,0))-(x(3,0));
	_i_var[13] = (_i_var[3])/(_i_var[6]);
	_i_var[14] = (x(0,0))-(x(2,0));
	_i_var[15] = (_i_var[8])/(_i_var[6]);
	_i_var[16] = (x(4,0))-(x(2,0));
	_i_var[17] = (_i_var[10])*(_i_var[9]);
	_i_var[18] = (_i_var[12])*(_i_var[11]);
	_i_var[19] = (_i_var[14])*(_i_var[13]);
	_i_var[20] = (_i_var[16])*(_i_var[15]);
	_i_var[21] = (_i_var[10])*(_i_var[13]);
	_i_var[22] = (_i_var[12])*(_i_var[15]);
	_i_var[23] = (_i_var[14])*(_i_var[9]);
	_i_var[24] = (_i_var[16])*(_i_var[11]);
	_i_var[25] = (_i_var[18])+(_i_var[17]);
	_i_var[26] = (_i_var[20])+(_i_var[19]);
	_i_var[27] = (_i_var[22])+(_i_var[21]);
	_i_var[28] = (_i_var[24])+(_i_var[23]);
	_i_var[29] = (_i_var[26])*(_i_var[25]);
	_i_var[30] = (_i_var[28])*(_i_var[27]);
	_i_var[31] = 1;
	_i_var[32] = (_i_var[30])-(_i_var[29]);
	_i_var[33] = (_i_var[32])-(_i_var[31]);
	_i_var[34] = (_i_var[33])*(stiffness);
	_i_var[35] = (stiffness)*(_i_var[33]);
	_i_var[36] = -1;
	_i_var[37] = (_i_var[35])+(_i_var[34]);
	_i_var[38] = (_i_var[37])*(_i_var[36]);
	_i_var[39] = (_i_var[38])*(_i_var[25]);
	_i_var[40] = (_i_var[37])*(_i_var[27]);
	_i_var[41] = (_i_var[38])*(_i_var[26]);
	_i_var[42] = (_i_var[37])*(_i_var[28]);
	_i_var[43] = (_i_var[39])*(_i_var[13]);
	_i_var[44] = (_i_var[40])*(_i_var[9]);
	_i_var[45] = (_i_var[39])*(_i_var[15]);
	_i_var[46] = (_i_var[40])*(_i_var[11]);
	_i_var[47] = (_i_var[41])*(_i_var[9]);
	_i_var[48] = (_i_var[42])*(_i_var[13]);
	_i_var[49] = (_i_var[41])*(_i_var[11]);
	_i_var[50] = (_i_var[42])*(_i_var[15]);
	_i_var[51] = (_i_var[44])+(_i_var[43]);
	_i_var[52] = (_i_var[46])+(_i_var[45]);
	_i_var[53] = (_i_var[48])+(_i_var[47]);
	_i_var[54] = (_i_var[50])+(_i_var[49]);
	_i_var[55] = (_i_var[51])*(_i_var[36]);
	_i_var[56] = (_i_var[52])*(_i_var[36]);
	_i_var[57] = (_i_var[53])*(_i_var[36]);
	_i_var[58] = (_i_var[54])*(_i_var[36]);
	_i_var[59] = (_i_var[56])+(_i_var[55]);
	_i_var[60] = (_i_var[58])+(_i_var[57]);
	energygradient(0,0) = _i_var[51];
	energygradient(1,0) = _i_var[53];
	energygradient(2,0) = _i_var[59];
	energygradient(3,0) = _i_var[60];
	energygradient(4,0) = _i_var[52];
	energygradient(5,0) = _i_var[54];
}
void computeDeformationPenaltyDetHessian(double stiffness, const Eigen::Matrix<double,6,1> & X, const Eigen::Matrix<double,6,1> & x, Eigen::Matrix<double, 6, 6>& energyhessian){
	double _i_var[168];
	_i_var[0] = (X(5,0))-(X(3,0));
	_i_var[1] = (X(0,0))-(X(2,0));
	_i_var[2] = (X(1,0))-(X(3,0));
	_i_var[3] = (X(4,0))-(X(2,0));
	_i_var[4] = (_i_var[1])*(_i_var[0]);
	_i_var[5] = (_i_var[3])*(_i_var[2]);
	_i_var[6] = (_i_var[5])-(_i_var[4]);
	_i_var[7] = -(_i_var[0]);
	_i_var[8] = -(_i_var[1]);
	_i_var[9] = (_i_var[7])/(_i_var[6]);
	_i_var[10] = (x(1,0))-(x(3,0));
	_i_var[11] = (_i_var[2])/(_i_var[6]);
	_i_var[12] = (x(5,0))-(x(3,0));
	_i_var[13] = (_i_var[3])/(_i_var[6]);
	_i_var[14] = (x(0,0))-(x(2,0));
	_i_var[15] = (_i_var[8])/(_i_var[6]);
	_i_var[16] = (x(4,0))-(x(2,0));
	_i_var[17] = (_i_var[10])*(_i_var[9]);
	_i_var[18] = (_i_var[12])*(_i_var[11]);
	_i_var[19] = (_i_var[14])*(_i_var[13]);
	_i_var[20] = (_i_var[16])*(_i_var[15]);
	_i_var[21] = (_i_var[10])*(_i_var[13]);
	_i_var[22] = (_i_var[12])*(_i_var[15]);
	_i_var[23] = (_i_var[14])*(_i_var[9]);
	_i_var[24] = (_i_var[16])*(_i_var[11]);
	_i_var[25] = (_i_var[18])+(_i_var[17]);
	_i_var[26] = (_i_var[20])+(_i_var[19]);
	_i_var[27] = (_i_var[22])+(_i_var[21]);
	_i_var[28] = (_i_var[24])+(_i_var[23]);
	_i_var[29] = (_i_var[26])*(_i_var[25]);
	_i_var[30] = (_i_var[28])*(_i_var[27]);
	_i_var[31] = 1;
	_i_var[32] = (_i_var[30])-(_i_var[29]);
	_i_var[33] = 2;
	_i_var[34] = (_i_var[32])-(_i_var[31]);
	_i_var[35] = (_i_var[33])*(stiffness);
	_i_var[36] = -1;
	_i_var[37] = (_i_var[34])*(stiffness);
	_i_var[38] = (stiffness)*(_i_var[34]);
	_i_var[39] = (_i_var[36])*(_i_var[35]);
	_i_var[40] = (_i_var[38])+(_i_var[37]);
	_i_var[41] = (_i_var[25])*(_i_var[26]);
	_i_var[42] = (_i_var[27])*(_i_var[28]);
	_i_var[43] = (_i_var[25])*(_i_var[25]);
	_i_var[44] = (_i_var[27])*(_i_var[39]);
	_i_var[45] = (_i_var[27])*(_i_var[27]);
	_i_var[46] = (_i_var[40])*(_i_var[36]);
	_i_var[47] = (_i_var[41])*(_i_var[35]);
	_i_var[48] = (_i_var[28])*(_i_var[39]);
	_i_var[49] = (_i_var[42])*(_i_var[35]);
	_i_var[50] = (_i_var[26])*(_i_var[26]);
	_i_var[51] = (_i_var[28])*(_i_var[28]);
	_i_var[52] = (_i_var[43])*(_i_var[35]);
	_i_var[53] = (_i_var[25])*(_i_var[44]);
	_i_var[54] = (_i_var[45])*(_i_var[35]);
	_i_var[55] = (_i_var[47])+(_i_var[46]);
	_i_var[56] = (_i_var[26])*(_i_var[44]);
	_i_var[57] = (_i_var[25])*(_i_var[48]);
	_i_var[58] = (_i_var[49])+(_i_var[40]);
	_i_var[59] = (_i_var[50])*(_i_var[35]);
	_i_var[60] = (_i_var[26])*(_i_var[48]);
	_i_var[61] = (_i_var[51])*(_i_var[35]);
	_i_var[62] = (_i_var[15])*(_i_var[52]);
	_i_var[63] = (_i_var[11])*(_i_var[53]);
	_i_var[64] = (_i_var[9])*(_i_var[53]);
	_i_var[65] = (_i_var[11])*(_i_var[54]);
	_i_var[66] = (_i_var[13])*(_i_var[55]);
	_i_var[67] = (_i_var[9])*(_i_var[56]);
	_i_var[68] = (_i_var[13])*(_i_var[57]);
	_i_var[69] = (_i_var[9])*(_i_var[58]);
	_i_var[70] = (_i_var[15])*(_i_var[55]);
	_i_var[71] = (_i_var[11])*(_i_var[56]);
	_i_var[72] = (_i_var[11])*(_i_var[58]);
	_i_var[73] = (_i_var[15])*(_i_var[57]);
	_i_var[74] = (_i_var[11])*(_i_var[59]);
	_i_var[75] = (_i_var[15])*(_i_var[60]);
	_i_var[76] = (_i_var[13])*(_i_var[60]);
	_i_var[77] = (_i_var[15])*(_i_var[61]);
	_i_var[78] = (_i_var[63])+(_i_var[62]);
	_i_var[79] = (_i_var[15])*(_i_var[64]);
	_i_var[80] = (_i_var[9])*(_i_var[65]);
	_i_var[81] = (_i_var[67])+(_i_var[66]);
	_i_var[82] = (_i_var[13])*(_i_var[68]);
	_i_var[83] = (_i_var[13])*(_i_var[69]);
	_i_var[84] = (_i_var[71])+(_i_var[70]);
	_i_var[85] = (_i_var[15])*(_i_var[68]);
	_i_var[86] = (_i_var[13])*(_i_var[72]);
	_i_var[87] = (_i_var[13])*(_i_var[73]);
	_i_var[88] = (_i_var[15])*(_i_var[69]);
	_i_var[89] = (_i_var[15])*(_i_var[73]);
	_i_var[90] = (_i_var[15])*(_i_var[72]);
	_i_var[91] = (_i_var[75])+(_i_var[74]);
	_i_var[92] = (_i_var[11])*(_i_var[76]);
	_i_var[93] = (_i_var[13])*(_i_var[77]);
	_i_var[94] = (_i_var[33])*(_i_var[13]);
	_i_var[95] = (_i_var[9])*(_i_var[9]);
	_i_var[96] = (_i_var[33])*(_i_var[9]);
	_i_var[97] = (_i_var[13])*(_i_var[13]);
	_i_var[98] = (_i_var[13])*(_i_var[78]);
	_i_var[99] = (_i_var[80])+(_i_var[79]);
	_i_var[100] = (_i_var[33])*(_i_var[15]);
	_i_var[101] = (_i_var[11])*(_i_var[11]);
	_i_var[102] = (_i_var[9])*(_i_var[81]);
	_i_var[103] = (_i_var[83])+(_i_var[82]);
	_i_var[104] = (_i_var[9])*(_i_var[84]);
	_i_var[105] = (_i_var[86])+(_i_var[85]);
	_i_var[106] = (_i_var[11])*(_i_var[81]);
	_i_var[107] = (_i_var[88])+(_i_var[87]);
	_i_var[108] = (_i_var[11])*(_i_var[84]);
	_i_var[109] = (_i_var[90])+(_i_var[89]);
	_i_var[110] = (_i_var[9])*(_i_var[91]);
	_i_var[111] = (_i_var[93])+(_i_var[92]);
	_i_var[112] = (_i_var[33])*(_i_var[11]);
	_i_var[113] = (_i_var[15])*(_i_var[15]);
	_i_var[114] = (_i_var[94])*(_i_var[64]);
	_i_var[115] = (_i_var[95])*(_i_var[54]);
	_i_var[116] = (_i_var[96])*(_i_var[76]);
	_i_var[117] = (_i_var[97])*(_i_var[61]);
	_i_var[118] = (_i_var[99])+(_i_var[98]);
	_i_var[119] = (_i_var[100])*(_i_var[63]);
	_i_var[120] = (_i_var[101])*(_i_var[54]);
	_i_var[121] = (_i_var[103])+(_i_var[102]);
	_i_var[122] = (_i_var[105])+(_i_var[104]);
	_i_var[123] = (_i_var[107])+(_i_var[106]);
	_i_var[124] = (_i_var[109])+(_i_var[108]);
	_i_var[125] = (_i_var[111])+(_i_var[110]);
	_i_var[126] = (_i_var[112])*(_i_var[75]);
	_i_var[127] = (_i_var[113])*(_i_var[61]);
	_i_var[128] = (_i_var[97])*(_i_var[52]);
	_i_var[129] = (_i_var[115])+(_i_var[114]);
	_i_var[130] = (_i_var[95])*(_i_var[59]);
	_i_var[131] = (_i_var[117])+(_i_var[116]);
	_i_var[132] = (_i_var[36])*(_i_var[118]);
	_i_var[133] = -2;
	_i_var[134] = (_i_var[113])*(_i_var[52]);
	_i_var[135] = (_i_var[120])+(_i_var[119]);
	_i_var[136] = (_i_var[36])*(_i_var[121]);
	_i_var[137] = (_i_var[36])*(_i_var[122]);
	_i_var[138] = (_i_var[36])*(_i_var[123]);
	_i_var[139] = (_i_var[36])*(_i_var[124]);
	_i_var[140] = (_i_var[36])*(_i_var[125]);
	_i_var[141] = (_i_var[101])*(_i_var[59]);
	_i_var[142] = (_i_var[127])+(_i_var[126]);
	_i_var[143] = (_i_var[129])+(_i_var[128]);
	_i_var[144] = (_i_var[131])+(_i_var[130]);
	_i_var[145] = (_i_var[133])*(_i_var[132]);
	_i_var[146] = (_i_var[135])+(_i_var[134]);
	_i_var[147] = (_i_var[137])+(_i_var[136]);
	_i_var[148] = (_i_var[139])+(_i_var[138]);
	_i_var[149] = (_i_var[133])*(_i_var[140]);
	_i_var[150] = (_i_var[142])+(_i_var[141]);
	_i_var[151] = (_i_var[36])*(_i_var[143]);
	_i_var[152] = (_i_var[36])*(_i_var[144]);
	_i_var[153] = (_i_var[146])+(_i_var[145]);
	_i_var[154] = (_i_var[36])*(_i_var[147]);
	_i_var[155] = (_i_var[36])*(_i_var[148]);
	_i_var[156] = (_i_var[36])*(_i_var[146]);
	_i_var[157] = (_i_var[150])+(_i_var[149]);
	_i_var[158] = (_i_var[36])*(_i_var[150]);
	_i_var[159] = (_i_var[132])+(_i_var[151]);
	_i_var[160] = (_i_var[138])+(_i_var[136]);
	_i_var[161] = (_i_var[140])+(_i_var[152]);
	_i_var[162] = (_i_var[153])+(_i_var[143]);
	_i_var[163] = (_i_var[155])+(_i_var[154]);
	_i_var[164] = (_i_var[156])+(_i_var[132]);
	_i_var[165] = (_i_var[157])+(_i_var[144]);
	_i_var[166] = (_i_var[139])+(_i_var[137]);
	_i_var[167] = (_i_var[158])+(_i_var[140]);
	energyhessian(0,0) = _i_var[143];
	energyhessian(1,0) = _i_var[121];
	energyhessian(2,0) = _i_var[159];
	energyhessian(3,0) = _i_var[160];
	energyhessian(4,0) = _i_var[118];
	energyhessian(5,0) = _i_var[123];
	energyhessian(0,1) = _i_var[121];
	energyhessian(1,1) = _i_var[144];
	energyhessian(2,1) = _i_var[147];
	energyhessian(3,1) = _i_var[161];
	energyhessian(4,1) = _i_var[122];
	energyhessian(5,1) = _i_var[125];
	energyhessian(0,2) = _i_var[159];
	energyhessian(1,2) = _i_var[147];
	energyhessian(2,2) = _i_var[162];
	energyhessian(3,2) = _i_var[163];
	energyhessian(4,2) = _i_var[164];
	energyhessian(5,2) = _i_var[148];
	energyhessian(0,3) = _i_var[160];
	energyhessian(1,3) = _i_var[161];
	energyhessian(2,3) = _i_var[163];
	energyhessian(3,3) = _i_var[165];
	energyhessian(4,3) = _i_var[166];
	energyhessian(5,3) = _i_var[167];
	energyhessian(0,4) = _i_var[118];
	energyhessian(1,4) = _i_var[122];
	energyhessian(2,4) = _i_var[164];
	energyhessian(3,4) = _i_var[166];
	energyhessian(4,4) = _i_var[146];
	energyhessian(5,4) = _i_var[124];
	energyhessian(0,5) = _i_var[123];
	energyhessian(1,5) = _i_var[125];
	energyhessian(2,5) = _i_var[148];
	energyhessian(3,5) = _i_var[167];
	energyhessian(4,5) = _i_var[124];
	energyhessian(5,5) = _i_var[150];
}

void computeSpringUnilateralQubicEnergy2D(double stiffness, const Eigen::Matrix<double,4,1> & X, const Eigen::Matrix<double,4,1> & x, double& energy){
	double _i_var[16];
	_i_var[0] = (x(3,0))-(x(1,0));
	_i_var[1] = (x(2,0))-(x(0,0));
	_i_var[2] = (X(3,0))-(X(1,0));
	_i_var[3] = (X(2,0))-(X(0,0));
	_i_var[4] = (_i_var[0])*(_i_var[0]);
	_i_var[5] = (_i_var[1])*(_i_var[1]);
	_i_var[6] = (_i_var[2])*(_i_var[2]);
	_i_var[7] = (_i_var[3])*(_i_var[3]);
	_i_var[8] = (_i_var[5])+(_i_var[4]);
	_i_var[9] = (_i_var[7])+(_i_var[6]);
	_i_var[10] = std::sqrt(_i_var[8]);
	_i_var[11] = std::sqrt(_i_var[9]);
	_i_var[12] = 3;
	_i_var[13] = (_i_var[11])-(_i_var[10]);
	_i_var[14] = std::pow(_i_var[13],_i_var[12]);
	_i_var[15] = (stiffness)*(_i_var[14]);
	energy = _i_var[15];
}
void computeSpringUnilateralQubicEnergy2DGradient(double stiffness, const Eigen::Matrix<double,4,1> & X, const Eigen::Matrix<double,4,1> & x, Eigen::Matrix<double, 4, 1>& energygradient){
	double _i_var[30];
	_i_var[0] = (x(3,0))-(x(1,0));
	_i_var[1] = (x(2,0))-(x(0,0));
	_i_var[2] = (X(3,0))-(X(1,0));
	_i_var[3] = (X(2,0))-(X(0,0));
	_i_var[4] = (_i_var[0])*(_i_var[0]);
	_i_var[5] = (_i_var[1])*(_i_var[1]);
	_i_var[6] = (_i_var[2])*(_i_var[2]);
	_i_var[7] = (_i_var[3])*(_i_var[3]);
	_i_var[8] = (_i_var[5])+(_i_var[4]);
	_i_var[9] = (_i_var[7])+(_i_var[6]);
	_i_var[10] = std::sqrt(_i_var[8]);
	_i_var[11] = std::sqrt(_i_var[9]);
	_i_var[12] = (_i_var[11])-(_i_var[10]);
	_i_var[13] = (_i_var[12])*(_i_var[12]);
	_i_var[14] = 3;
	_i_var[15] = 2;
	_i_var[16] = (_i_var[14])*(_i_var[13]);
	_i_var[17] = (_i_var[15])*(_i_var[10]);
	_i_var[18] = 1;
	_i_var[19] = -1;
	_i_var[20] = (stiffness)*(_i_var[16]);
	_i_var[21] = (_i_var[18])/(_i_var[17]);
	_i_var[22] = (_i_var[20])*(_i_var[19]);
	_i_var[23] = (_i_var[22])*(_i_var[21]);
	_i_var[24] = (_i_var[23])*(_i_var[1]);
	_i_var[25] = (_i_var[23])*(_i_var[0]);
	_i_var[26] = (_i_var[15])*(_i_var[24]);
	_i_var[27] = (_i_var[15])*(_i_var[25]);
	_i_var[28] = (_i_var[26])*(_i_var[19]);
	_i_var[29] = (_i_var[27])*(_i_var[19]);
	energygradient(0,0) = _i_var[28];
	energygradient(1,0) = _i_var[29];
	energygradient(2,0) = _i_var[26];
	energygradient(3,0) = _i_var[27];
}
void computeSpringUnilateralQubicEnergy2DHessian(double stiffness, const Eigen::Matrix<double,4,1> & X, const Eigen::Matrix<double,4,1> & x, Eigen::Matrix<double, 4, 4>& energyhessian){
	double _i_var[51];
	_i_var[0] = (x(3,0))-(x(1,0));
	_i_var[1] = (x(2,0))-(x(0,0));
	_i_var[2] = (_i_var[0])*(_i_var[0]);
	_i_var[3] = (_i_var[1])*(_i_var[1]);
	_i_var[4] = (X(3,0))-(X(1,0));
	_i_var[5] = (X(2,0))-(X(0,0));
	_i_var[6] = (_i_var[3])+(_i_var[2]);
	_i_var[7] = (_i_var[4])*(_i_var[4]);
	_i_var[8] = (_i_var[5])*(_i_var[5]);
	_i_var[9] = std::sqrt(_i_var[6]);
	_i_var[10] = 2;
	_i_var[11] = (_i_var[8])+(_i_var[7]);
	_i_var[12] = (_i_var[10])*(_i_var[9]);
	_i_var[13] = std::sqrt(_i_var[11]);
	_i_var[14] = (_i_var[12])*(_i_var[12]);
	_i_var[15] = 1;
	_i_var[16] = (_i_var[13])-(_i_var[9]);
	_i_var[17] = (_i_var[15])/(_i_var[14]);
	_i_var[18] = (_i_var[16])*(_i_var[16]);
	_i_var[19] = 3;
	_i_var[20] = -(_i_var[17]);
	_i_var[21] = (_i_var[19])*(_i_var[18]);
	_i_var[22] = (_i_var[10])*(_i_var[16]);
	_i_var[23] = (_i_var[15])/(_i_var[12]);
	_i_var[24] = (_i_var[20])*(_i_var[10]);
	_i_var[25] = -1;
	_i_var[26] = (stiffness)*(_i_var[21]);
	_i_var[27] = (_i_var[19])*(_i_var[22]);
	_i_var[28] = (_i_var[24])*(_i_var[23]);
	_i_var[29] = (_i_var[26])*(_i_var[25]);
	_i_var[30] = (stiffness)*(_i_var[27]);
	_i_var[31] = (_i_var[23])*(_i_var[23]);
	_i_var[32] = (_i_var[29])*(_i_var[28]);
	_i_var[33] = (_i_var[31])*(_i_var[30]);
	_i_var[34] = (_i_var[33])+(_i_var[32]);
	_i_var[35] = (_i_var[10])*(_i_var[1]);
	_i_var[36] = (_i_var[10])*(_i_var[0]);
	_i_var[37] = (_i_var[35])*(_i_var[34]);
	_i_var[38] = (_i_var[29])*(_i_var[23]);
	_i_var[39] = (_i_var[35])*(_i_var[35]);
	_i_var[40] = (_i_var[36])*(_i_var[36]);
	_i_var[41] = (_i_var[36])*(_i_var[37]);
	_i_var[42] = (_i_var[38])*(_i_var[10]);
	_i_var[43] = (_i_var[39])*(_i_var[34]);
	_i_var[44] = (_i_var[40])*(_i_var[34]);
	_i_var[45] = (_i_var[25])*(_i_var[41]);
	_i_var[46] = (_i_var[43])+(_i_var[42]);
	_i_var[47] = (_i_var[44])+(_i_var[42]);
	_i_var[48] = (_i_var[25])*(_i_var[45]);
	_i_var[49] = (_i_var[25])*(_i_var[46]);
	_i_var[50] = (_i_var[25])*(_i_var[47]);
	energyhessian(0,0) = _i_var[46];
	energyhessian(1,0) = _i_var[48];
	energyhessian(2,0) = _i_var[49];
	energyhessian(3,0) = _i_var[45];
	energyhessian(0,1) = _i_var[48];
	energyhessian(1,1) = _i_var[47];
	energyhessian(2,1) = _i_var[45];
	energyhessian(3,1) = _i_var[50];
	energyhessian(0,2) = _i_var[49];
	energyhessian(1,2) = _i_var[45];
	energyhessian(2,2) = _i_var[46];
	energyhessian(3,2) = _i_var[41];
	energyhessian(0,3) = _i_var[45];
	energyhessian(1,3) = _i_var[50];
	energyhessian(2,3) = _i_var[41];
	energyhessian(3,3) = _i_var[47];
}

void computeSpringUnilateralQubicEnergyRestLength2D(double stiffness, double l0, const Eigen::Matrix<double,4,1> & x, double& energy){
	double _i_var[10];
	_i_var[0] = (x(3,0))-(x(1,0));
	_i_var[1] = (x(2,0))-(x(0,0));
	_i_var[2] = (_i_var[0])*(_i_var[0]);
	_i_var[3] = (_i_var[1])*(_i_var[1]);
	_i_var[4] = (_i_var[3])+(_i_var[2]);
	_i_var[5] = std::sqrt(_i_var[4]);
	_i_var[6] = 3;
	_i_var[7] = (l0)-(_i_var[5]);
	_i_var[8] = std::pow(_i_var[7],_i_var[6]);
	_i_var[9] = (stiffness)*(_i_var[8]);
	energy = _i_var[9];
}
void computeSpringUnilateralQubicEnergyRestLength2DGradient(double stiffness, double l0, const Eigen::Matrix<double,4,1> & x, Eigen::Matrix<double, 4, 1>& energygradient){
	double _i_var[24];
	_i_var[0] = (x(3,0))-(x(1,0));
	_i_var[1] = (x(2,0))-(x(0,0));
	_i_var[2] = (_i_var[0])*(_i_var[0]);
	_i_var[3] = (_i_var[1])*(_i_var[1]);
	_i_var[4] = (_i_var[3])+(_i_var[2]);
	_i_var[5] = std::sqrt(_i_var[4]);
	_i_var[6] = (l0)-(_i_var[5]);
	_i_var[7] = (_i_var[6])*(_i_var[6]);
	_i_var[8] = 3;
	_i_var[9] = 2;
	_i_var[10] = (_i_var[8])*(_i_var[7]);
	_i_var[11] = (_i_var[9])*(_i_var[5]);
	_i_var[12] = 1;
	_i_var[13] = -1;
	_i_var[14] = (stiffness)*(_i_var[10]);
	_i_var[15] = (_i_var[12])/(_i_var[11]);
	_i_var[16] = (_i_var[14])*(_i_var[13]);
	_i_var[17] = (_i_var[16])*(_i_var[15]);
	_i_var[18] = (_i_var[17])*(_i_var[1]);
	_i_var[19] = (_i_var[17])*(_i_var[0]);
	_i_var[20] = (_i_var[9])*(_i_var[18]);
	_i_var[21] = (_i_var[9])*(_i_var[19]);
	_i_var[22] = (_i_var[20])*(_i_var[13]);
	_i_var[23] = (_i_var[21])*(_i_var[13]);
	energygradient(0,0) = _i_var[22];
	energygradient(1,0) = _i_var[23];
	energygradient(2,0) = _i_var[20];
	energygradient(3,0) = _i_var[21];
}
void computeSpringUnilateralQubicEnergyRestLength2DHessian(double stiffness, double l0, const Eigen::Matrix<double,4,1> & x, Eigen::Matrix<double, 4, 4>& energyhessian){
	double _i_var[45];
	_i_var[0] = (x(3,0))-(x(1,0));
	_i_var[1] = (x(2,0))-(x(0,0));
	_i_var[2] = (_i_var[0])*(_i_var[0]);
	_i_var[3] = (_i_var[1])*(_i_var[1]);
	_i_var[4] = (_i_var[3])+(_i_var[2]);
	_i_var[5] = std::sqrt(_i_var[4]);
	_i_var[6] = 2;
	_i_var[7] = (_i_var[6])*(_i_var[5]);
	_i_var[8] = (_i_var[7])*(_i_var[7]);
	_i_var[9] = 1;
	_i_var[10] = (l0)-(_i_var[5]);
	_i_var[11] = (_i_var[9])/(_i_var[8]);
	_i_var[12] = (_i_var[10])*(_i_var[10]);
	_i_var[13] = 3;
	_i_var[14] = -(_i_var[11]);
	_i_var[15] = (_i_var[13])*(_i_var[12]);
	_i_var[16] = (_i_var[6])*(_i_var[10]);
	_i_var[17] = (_i_var[9])/(_i_var[7]);
	_i_var[18] = (_i_var[14])*(_i_var[6]);
	_i_var[19] = -1;
	_i_var[20] = (stiffness)*(_i_var[15]);
	_i_var[21] = (_i_var[13])*(_i_var[16]);
	_i_var[22] = (_i_var[18])*(_i_var[17]);
	_i_var[23] = (_i_var[20])*(_i_var[19]);
	_i_var[24] = (stiffness)*(_i_var[21]);
	_i_var[25] = (_i_var[17])*(_i_var[17]);
	_i_var[26] = (_i_var[23])*(_i_var[22]);
	_i_var[27] = (_i_var[25])*(_i_var[24]);
	_i_var[28] = (_i_var[27])+(_i_var[26]);
	_i_var[29] = (_i_var[6])*(_i_var[1]);
	_i_var[30] = (_i_var[6])*(_i_var[0]);
	_i_var[31] = (_i_var[29])*(_i_var[28]);
	_i_var[32] = (_i_var[23])*(_i_var[17]);
	_i_var[33] = (_i_var[29])*(_i_var[29]);
	_i_var[34] = (_i_var[30])*(_i_var[30]);
	_i_var[35] = (_i_var[30])*(_i_var[31]);
	_i_var[36] = (_i_var[32])*(_i_var[6]);
	_i_var[37] = (_i_var[33])*(_i_var[28]);
	_i_var[38] = (_i_var[34])*(_i_var[28]);
	_i_var[39] = (_i_var[19])*(_i_var[35]);
	_i_var[40] = (_i_var[37])+(_i_var[36]);
	_i_var[41] = (_i_var[38])+(_i_var[36]);
	_i_var[42] = (_i_var[19])*(_i_var[39]);
	_i_var[43] = (_i_var[19])*(_i_var[40]);
	_i_var[44] = (_i_var[19])*(_i_var[41]);
	energyhessian(0,0) = _i_var[40];
	energyhessian(1,0) = _i_var[42];
	energyhessian(2,0) = _i_var[43];
	energyhessian(3,0) = _i_var[39];
	energyhessian(0,1) = _i_var[42];
	energyhessian(1,1) = _i_var[41];
	energyhessian(2,1) = _i_var[39];
	energyhessian(3,1) = _i_var[44];
	energyhessian(0,2) = _i_var[43];
	energyhessian(1,2) = _i_var[39];
	energyhessian(2,2) = _i_var[40];
	energyhessian(3,2) = _i_var[35];
	energyhessian(0,3) = _i_var[39];
	energyhessian(1,3) = _i_var[44];
	energyhessian(2,3) = _i_var[35];
	energyhessian(3,3) = _i_var[41];
}