#include "../../include/autodiff/EdgeEnergy.h"

void computeEdgeSquaredNorm2D(const Eigen::Matrix<double,2,1> & r0, const Eigen::Matrix<double,2,1> & r1, double& energy){
	double _i_var[7];
	_i_var[0] = (r1(1,0))-(r0(1,0));
	_i_var[1] = (r1(0,0))-(r0(0,0));
	_i_var[2] = (_i_var[0])*(_i_var[0]);
	_i_var[3] = (_i_var[1])*(_i_var[1]);
	_i_var[4] = (_i_var[3])+(_i_var[2]);
	_i_var[5] = 0.5;
	_i_var[6] = (_i_var[5])*(_i_var[4]);
	energy = _i_var[6];
}
void computeEdgeSquaredNorm2DGradient(const Eigen::Matrix<double,2,1> & r0, const Eigen::Matrix<double,2,1> & r1, Eigen::Matrix<double, 4, 1>& energygradient){
	double _i_var[11];
	_i_var[0] = (r1(0,0))-(r0(0,0));
	_i_var[1] = 0.5;
	_i_var[2] = (r1(1,0))-(r0(1,0));
	_i_var[3] = (_i_var[1])*(_i_var[0]);
	_i_var[4] = 2;
	_i_var[5] = (_i_var[1])*(_i_var[2]);
	_i_var[6] = -1;
	_i_var[7] = (_i_var[4])*(_i_var[3]);
	_i_var[8] = (_i_var[4])*(_i_var[5]);
	_i_var[9] = (_i_var[7])*(_i_var[6]);
	_i_var[10] = (_i_var[8])*(_i_var[6]);
	energygradient(0,0) = _i_var[9];
	energygradient(1,0) = _i_var[10];
	energygradient(2,0) = _i_var[7];
	energygradient(3,0) = _i_var[8];
}
void computeEdgeSquaredNorm2DHessian(const Eigen::Matrix<double,2,1> & r0, const Eigen::Matrix<double,2,1> & r1, Eigen::Matrix<double, 4, 4>& energyhessian){
	double _i_var[3];
	_i_var[0] = 1;
	_i_var[1] = 0;
	_i_var[2] = -1;
	energyhessian(0,0) = _i_var[0];
	energyhessian(1,0) = _i_var[1];
	energyhessian(2,0) = _i_var[2];
	energyhessian(3,0) = _i_var[1];
	energyhessian(0,1) = _i_var[1];
	energyhessian(1,1) = _i_var[0];
	energyhessian(2,1) = _i_var[1];
	energyhessian(3,1) = _i_var[2];
	energyhessian(0,2) = _i_var[2];
	energyhessian(1,2) = _i_var[1];
	energyhessian(2,2) = _i_var[0];
	energyhessian(3,2) = _i_var[1];
	energyhessian(0,3) = _i_var[1];
	energyhessian(1,3) = _i_var[2];
	energyhessian(2,3) = _i_var[1];
	energyhessian(3,3) = _i_var[0];
}

void computeEdgeSpringEnergy2D(double stiffness, double l0, const Eigen::Matrix<double,2,1> & r0, const Eigen::Matrix<double,2,1> & r1, double& energy){
	double _i_var[11];
	_i_var[0] = (r1(1,0))-(r0(1,0));
	_i_var[1] = (r1(0,0))-(r0(0,0));
	_i_var[2] = (_i_var[0])*(_i_var[0]);
	_i_var[3] = (_i_var[1])*(_i_var[1]);
	_i_var[4] = (_i_var[3])+(_i_var[2]);
	_i_var[5] = std::sqrt(_i_var[4]);
	_i_var[6] = (_i_var[5])-(l0);
	_i_var[7] = 0.5;
	_i_var[8] = (_i_var[6])*(_i_var[6]);
	_i_var[9] = (_i_var[7])*(stiffness);
	_i_var[10] = (_i_var[9])*(_i_var[8]);
	energy = _i_var[10];
}
void computeEdgeSpringEnergy2DGradient(double stiffness, double l0, const Eigen::Matrix<double,2,1> & r0, const Eigen::Matrix<double,2,1> & r1, Eigen::Matrix<double, 4, 1>& energygradient){
	double _i_var[23];
	_i_var[0] = (r1(1,0))-(r0(1,0));
	_i_var[1] = (r1(0,0))-(r0(0,0));
	_i_var[2] = (_i_var[0])*(_i_var[0]);
	_i_var[3] = (_i_var[1])*(_i_var[1]);
	_i_var[4] = (_i_var[3])+(_i_var[2]);
	_i_var[5] = std::sqrt(_i_var[4]);
	_i_var[6] = 0.5;
	_i_var[7] = 2;
	_i_var[8] = (_i_var[5])-(l0);
	_i_var[9] = (_i_var[6])*(stiffness);
	_i_var[10] = (_i_var[7])*(_i_var[5]);
	_i_var[11] = 1;
	_i_var[12] = (_i_var[9])*(_i_var[8]);
	_i_var[13] = (_i_var[11])/(_i_var[10]);
	_i_var[14] = (_i_var[7])*(_i_var[12]);
	_i_var[15] = (_i_var[14])*(_i_var[13]);
	_i_var[16] = (_i_var[15])*(_i_var[1]);
	_i_var[17] = (_i_var[15])*(_i_var[0]);
	_i_var[18] = -1;
	_i_var[19] = (_i_var[7])*(_i_var[16]);
	_i_var[20] = (_i_var[7])*(_i_var[17]);
	_i_var[21] = (_i_var[19])*(_i_var[18]);
	_i_var[22] = (_i_var[20])*(_i_var[18]);
	energygradient(0,0) = _i_var[21];
	energygradient(1,0) = _i_var[22];
	energygradient(2,0) = _i_var[19];
	energygradient(3,0) = _i_var[20];
}
void computeEdgeSpringEnergy2DHessian(double stiffness, double l0, const Eigen::Matrix<double,2,1> & r0, const Eigen::Matrix<double,2,1> & r1, Eigen::Matrix<double, 4, 4>& energyhessian){
	double _i_var[42];
	_i_var[0] = (r1(1,0))-(r0(1,0));
	_i_var[1] = (r1(0,0))-(r0(0,0));
	_i_var[2] = (_i_var[0])*(_i_var[0]);
	_i_var[3] = (_i_var[1])*(_i_var[1]);
	_i_var[4] = (_i_var[3])+(_i_var[2]);
	_i_var[5] = std::sqrt(_i_var[4]);
	_i_var[6] = 2;
	_i_var[7] = (_i_var[6])*(_i_var[5]);
	_i_var[8] = (_i_var[7])*(_i_var[7]);
	_i_var[9] = 1;
	_i_var[10] = (_i_var[9])/(_i_var[8]);
	_i_var[11] = -(_i_var[10]);
	_i_var[12] = (_i_var[5])-(l0);
	_i_var[13] = 0.5;
	_i_var[14] = (_i_var[9])/(_i_var[7]);
	_i_var[15] = (_i_var[11])*(_i_var[6]);
	_i_var[16] = (_i_var[6])*(_i_var[12]);
	_i_var[17] = (_i_var[13])*(stiffness);
	_i_var[18] = (_i_var[15])*(_i_var[14]);
	_i_var[19] = (_i_var[17])*(_i_var[16]);
	_i_var[20] = (_i_var[17])*(_i_var[6]);
	_i_var[21] = (_i_var[14])*(_i_var[14]);
	_i_var[22] = (_i_var[19])*(_i_var[18]);
	_i_var[23] = (_i_var[21])*(_i_var[20]);
	_i_var[24] = (_i_var[23])+(_i_var[22]);
	_i_var[25] = (_i_var[6])*(_i_var[1]);
	_i_var[26] = (_i_var[6])*(_i_var[0]);
	_i_var[27] = (_i_var[25])*(_i_var[24]);
	_i_var[28] = (_i_var[19])*(_i_var[14]);
	_i_var[29] = (_i_var[25])*(_i_var[25]);
	_i_var[30] = (_i_var[26])*(_i_var[26]);
	_i_var[31] = (_i_var[26])*(_i_var[27]);
	_i_var[32] = -1;
	_i_var[33] = (_i_var[28])*(_i_var[6]);
	_i_var[34] = (_i_var[29])*(_i_var[24]);
	_i_var[35] = (_i_var[30])*(_i_var[24]);
	_i_var[36] = (_i_var[32])*(_i_var[31]);
	_i_var[37] = (_i_var[34])+(_i_var[33]);
	_i_var[38] = (_i_var[35])+(_i_var[33]);
	_i_var[39] = (_i_var[32])*(_i_var[36]);
	_i_var[40] = (_i_var[32])*(_i_var[37]);
	_i_var[41] = (_i_var[32])*(_i_var[38]);
	energyhessian(0,0) = _i_var[37];
	energyhessian(1,0) = _i_var[39];
	energyhessian(2,0) = _i_var[40];
	energyhessian(3,0) = _i_var[36];
	energyhessian(0,1) = _i_var[39];
	energyhessian(1,1) = _i_var[38];
	energyhessian(2,1) = _i_var[36];
	energyhessian(3,1) = _i_var[41];
	energyhessian(0,2) = _i_var[40];
	energyhessian(1,2) = _i_var[36];
	energyhessian(2,2) = _i_var[37];
	energyhessian(3,2) = _i_var[31];
	energyhessian(0,3) = _i_var[36];
	energyhessian(1,3) = _i_var[41];
	energyhessian(2,3) = _i_var[31];
	energyhessian(3,3) = _i_var[38];
}