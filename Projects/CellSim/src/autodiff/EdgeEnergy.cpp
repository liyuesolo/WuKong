#include "../../include/autodiff/EdgeEnergy.h"

double computeEdgeLength(const Matrix<double,3,1> & r0, const Matrix<double,3,1> & r1){
	double _i_var[9];
	_i_var[0] = (r1(1,0))-(r0(1,0));
	_i_var[1] = (r1(0,0))-(r0(0,0));
	_i_var[2] = (r1(2,0))-(r0(2,0));
	_i_var[3] = (_i_var[0])*(_i_var[0]);
	_i_var[4] = (_i_var[1])*(_i_var[1]);
	_i_var[5] = (_i_var[2])*(_i_var[2]);
	_i_var[6] = (_i_var[4])+(_i_var[3]);
	_i_var[7] = (_i_var[6])+(_i_var[5]);
	_i_var[8] = std::sqrt(_i_var[7]);
	return _i_var[8];
}
void computeEdgeLengthGradient(const Matrix<double,3,1> & r0, const Matrix<double,3,1> & r1, Matrix<double, 6, 1>& energygradient){
	double _i_var[23];
	_i_var[0] = (r1(1,0))-(r0(1,0));
	_i_var[1] = (r1(0,0))-(r0(0,0));
	_i_var[2] = (r1(2,0))-(r0(2,0));
	_i_var[3] = (_i_var[0])*(_i_var[0]);
	_i_var[4] = (_i_var[1])*(_i_var[1]);
	_i_var[5] = (_i_var[2])*(_i_var[2]);
	_i_var[6] = (_i_var[4])+(_i_var[3]);
	_i_var[7] = (_i_var[6])+(_i_var[5]);
	_i_var[8] = std::sqrt(_i_var[7]);
	_i_var[9] = 2;
	_i_var[10] = (_i_var[9])*(_i_var[8]);
	_i_var[11] = 1;
	_i_var[12] = (_i_var[11])/(_i_var[10]);
	_i_var[13] = (_i_var[12])*(_i_var[1]);
	_i_var[14] = (_i_var[12])*(_i_var[0]);
	_i_var[15] = (_i_var[12])*(_i_var[2]);
	_i_var[16] = -1;
	_i_var[17] = (_i_var[9])*(_i_var[13]);
	_i_var[18] = (_i_var[9])*(_i_var[14]);
	_i_var[19] = (_i_var[9])*(_i_var[15]);
	_i_var[20] = (_i_var[17])*(_i_var[16]);
	_i_var[21] = (_i_var[18])*(_i_var[16]);
	_i_var[22] = (_i_var[19])*(_i_var[16]);
	energygradient(0,0) = _i_var[20];
	energygradient(1,0) = _i_var[21];
	energygradient(2,0) = _i_var[22];
	energygradient(3,0) = _i_var[17];
	energygradient(4,0) = _i_var[18];
	energygradient(5,0) = _i_var[19];
}
void computeEdgeLengthHessian(const Matrix<double,3,1> & r0, const Matrix<double,3,1> & r1, Matrix<double, 6, 6>& energyhessian){
	double _i_var[46];
	_i_var[0] = (r1(1,0))-(r0(1,0));
	_i_var[1] = (r1(0,0))-(r0(0,0));
	_i_var[2] = (r1(2,0))-(r0(2,0));
	_i_var[3] = (_i_var[0])*(_i_var[0]);
	_i_var[4] = (_i_var[1])*(_i_var[1]);
	_i_var[5] = (_i_var[2])*(_i_var[2]);
	_i_var[6] = (_i_var[4])+(_i_var[3]);
	_i_var[7] = (_i_var[6])+(_i_var[5]);
	_i_var[8] = std::sqrt(_i_var[7]);
	_i_var[9] = 2;
	_i_var[10] = (_i_var[9])*(_i_var[8]);
	_i_var[11] = (_i_var[10])*(_i_var[10]);
	_i_var[12] = 1;
	_i_var[13] = (_i_var[12])/(_i_var[11]);
	_i_var[14] = -(_i_var[13]);
	_i_var[15] = (_i_var[12])/(_i_var[10]);
	_i_var[16] = (_i_var[14])*(_i_var[9]);
	_i_var[17] = (_i_var[16])*(_i_var[15]);
	_i_var[18] = (_i_var[9])*(_i_var[1]);
	_i_var[19] = (_i_var[9])*(_i_var[2]);
	_i_var[20] = (_i_var[9])*(_i_var[0]);
	_i_var[21] = (_i_var[18])*(_i_var[17]);
	_i_var[22] = (_i_var[19])*(_i_var[17]);
	_i_var[23] = (_i_var[18])*(_i_var[18]);
	_i_var[24] = (_i_var[20])*(_i_var[20]);
	_i_var[25] = (_i_var[19])*(_i_var[19]);
	_i_var[26] = (_i_var[20])*(_i_var[21]);
	_i_var[27] = -1;
	_i_var[28] = (_i_var[18])*(_i_var[22]);
	_i_var[29] = (_i_var[15])*(_i_var[9]);
	_i_var[30] = (_i_var[23])*(_i_var[17]);
	_i_var[31] = (_i_var[20])*(_i_var[22]);
	_i_var[32] = (_i_var[24])*(_i_var[17]);
	_i_var[33] = (_i_var[25])*(_i_var[17]);
	_i_var[34] = (_i_var[27])*(_i_var[26]);
	_i_var[35] = (_i_var[27])*(_i_var[28]);
	_i_var[36] = (_i_var[30])+(_i_var[29]);
	_i_var[37] = (_i_var[27])*(_i_var[31]);
	_i_var[38] = (_i_var[32])+(_i_var[29]);
	_i_var[39] = (_i_var[33])+(_i_var[29]);
	_i_var[40] = (_i_var[27])*(_i_var[34]);
	_i_var[41] = (_i_var[27])*(_i_var[35]);
	_i_var[42] = (_i_var[27])*(_i_var[36]);
	_i_var[43] = (_i_var[27])*(_i_var[37]);
	_i_var[44] = (_i_var[27])*(_i_var[38]);
	_i_var[45] = (_i_var[27])*(_i_var[39]);
	energyhessian(0,0) = _i_var[36];
	energyhessian(1,0) = _i_var[40];
	energyhessian(2,0) = _i_var[41];
	energyhessian(3,0) = _i_var[42];
	energyhessian(4,0) = _i_var[34];
	energyhessian(5,0) = _i_var[35];
	energyhessian(0,1) = _i_var[40];
	energyhessian(1,1) = _i_var[38];
	energyhessian(2,1) = _i_var[43];
	energyhessian(3,1) = _i_var[34];
	energyhessian(4,1) = _i_var[44];
	energyhessian(5,1) = _i_var[37];
	energyhessian(0,2) = _i_var[41];
	energyhessian(1,2) = _i_var[43];
	energyhessian(2,2) = _i_var[39];
	energyhessian(3,2) = _i_var[35];
	energyhessian(4,2) = _i_var[37];
	energyhessian(5,2) = _i_var[45];
	energyhessian(0,3) = _i_var[42];
	energyhessian(1,3) = _i_var[34];
	energyhessian(2,3) = _i_var[35];
	energyhessian(3,3) = _i_var[36];
	energyhessian(4,3) = _i_var[26];
	energyhessian(5,3) = _i_var[28];
	energyhessian(0,4) = _i_var[34];
	energyhessian(1,4) = _i_var[44];
	energyhessian(2,4) = _i_var[37];
	energyhessian(3,4) = _i_var[26];
	energyhessian(4,4) = _i_var[38];
	energyhessian(5,4) = _i_var[31];
	energyhessian(0,5) = _i_var[35];
	energyhessian(1,5) = _i_var[37];
	energyhessian(2,5) = _i_var[45];
	energyhessian(3,5) = _i_var[28];
	energyhessian(4,5) = _i_var[31];
	energyhessian(5,5) = _i_var[39];
}

double computeEdgeSquaredNorm(const Matrix<double,3,1> & r0, const Matrix<double,3,1> & r1){
	double _i_var[10];
	_i_var[0] = (r1(1,0))-(r0(1,0));
	_i_var[1] = (r1(0,0))-(r0(0,0));
	_i_var[2] = (r1(2,0))-(r0(2,0));
	_i_var[3] = (_i_var[0])*(_i_var[0]);
	_i_var[4] = (_i_var[1])*(_i_var[1]);
	_i_var[5] = (_i_var[2])*(_i_var[2]);
	_i_var[6] = (_i_var[4])+(_i_var[3]);
	_i_var[7] = (_i_var[6])+(_i_var[5]);
	_i_var[8] = 0.5;
	_i_var[9] = (_i_var[8])*(_i_var[7]);
	return _i_var[9];
}
void computeEdgeSquaredNormGradient(const Matrix<double,3,1> & r0, const Matrix<double,3,1> & r1, Matrix<double, 6, 1>& energygradient){
	double _i_var[15];
	_i_var[0] = (r1(0,0))-(r0(0,0));
	_i_var[1] = 0.5;
	_i_var[2] = (r1(1,0))-(r0(1,0));
	_i_var[3] = (r1(2,0))-(r0(2,0));
	_i_var[4] = (_i_var[1])*(_i_var[0]);
	_i_var[5] = 2;
	_i_var[6] = (_i_var[1])*(_i_var[2]);
	_i_var[7] = (_i_var[1])*(_i_var[3]);
	_i_var[8] = -1;
	_i_var[9] = (_i_var[5])*(_i_var[4]);
	_i_var[10] = (_i_var[5])*(_i_var[6]);
	_i_var[11] = (_i_var[5])*(_i_var[7]);
	_i_var[12] = (_i_var[9])*(_i_var[8]);
	_i_var[13] = (_i_var[10])*(_i_var[8]);
	_i_var[14] = (_i_var[11])*(_i_var[8]);
	energygradient(0,0) = _i_var[12];
	energygradient(1,0) = _i_var[13];
	energygradient(2,0) = _i_var[14];
	energygradient(3,0) = _i_var[9];
	energygradient(4,0) = _i_var[10];
	energygradient(5,0) = _i_var[11];
}
void computeEdgeSquaredNormHessian(const Matrix<double,3,1> & r0, const Matrix<double,3,1> & r1, Matrix<double, 6, 6>& energyhessian){
	double _i_var[3];
	_i_var[0] = 1;
	_i_var[1] = 0;
	_i_var[2] = -1;
	energyhessian(0,0) = _i_var[0];
	energyhessian(1,0) = _i_var[1];
	energyhessian(2,0) = _i_var[1];
	energyhessian(3,0) = _i_var[2];
	energyhessian(4,0) = _i_var[1];
	energyhessian(5,0) = _i_var[1];
	energyhessian(0,1) = _i_var[1];
	energyhessian(1,1) = _i_var[0];
	energyhessian(2,1) = _i_var[1];
	energyhessian(3,1) = _i_var[1];
	energyhessian(4,1) = _i_var[2];
	energyhessian(5,1) = _i_var[1];
	energyhessian(0,2) = _i_var[1];
	energyhessian(1,2) = _i_var[1];
	energyhessian(2,2) = _i_var[0];
	energyhessian(3,2) = _i_var[1];
	energyhessian(4,2) = _i_var[1];
	energyhessian(5,2) = _i_var[2];
	energyhessian(0,3) = _i_var[2];
	energyhessian(1,3) = _i_var[1];
	energyhessian(2,3) = _i_var[1];
	energyhessian(3,3) = _i_var[0];
	energyhessian(4,3) = _i_var[1];
	energyhessian(5,3) = _i_var[1];
	energyhessian(0,4) = _i_var[1];
	energyhessian(1,4) = _i_var[2];
	energyhessian(2,4) = _i_var[1];
	energyhessian(3,4) = _i_var[1];
	energyhessian(4,4) = _i_var[0];
	energyhessian(5,4) = _i_var[1];
	energyhessian(0,5) = _i_var[1];
	energyhessian(1,5) = _i_var[1];
	energyhessian(2,5) = _i_var[2];
	energyhessian(3,5) = _i_var[1];
	energyhessian(4,5) = _i_var[1];
	energyhessian(5,5) = _i_var[0];
}
