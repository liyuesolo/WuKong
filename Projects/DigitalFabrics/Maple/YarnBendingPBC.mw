restart: with(linalg):with(codegen):
toC := proc(expr, file)
try fremove(file) catch: end try:
writeto(file):
C(expr,optimized):
writeto(terminal):
end:

#For initially straight rods without twisting

x := matrix(5,3):



x0 := vector(3, [x[1,1], x[1,2], 0]):
x1 := vector(3, [x[2,1], x[2,2], 0]):
x2 := vector(3, [x[3,1], x[3,2], 0]):
x3 := vector(3, [x[4,1], x[4,2], 0]):
x4 := vector(3, [x[5,1], x[5,2], 0]):



u0 := x[1, 3]:
u1 := x[2, 3]:
u2 := x[3, 3]:
u3 := x[4, 3]:
u4 := x[5, 3]:


x1_move := x4 + (x1 - x0):
u1_move := u4 + (u1 - u0):

x3_move := x0 - (x4 - x3):
u3_move := u0 - (u4 - u3):

d1 := matadd(x1_move,-x3):
d1N := d1 / sqrt(dotprod(d1, d1, 'orthogonal')):
d2 := matadd(x3,-x2):
d2N := d2 / sqrt(dotprod(d2, d2, 'orthogonal')):

d3 := matadd(x1_move,-x4):
d3N := d3 / sqrt(dotprod(d3, d3, 'orthogonal')):
d4 := matadd(x4,-x3):
d4N := d4 / sqrt(dotprod(d4, d4, 'orthogonal')):

d5 := matadd(x2,-x1):
d5N := d5 / sqrt(dotprod(d5, d5, 'orthogonal')):
d6 := matadd(x1,-x3_move):
d6N := d6 / sqrt(dotprod(d6, d6, 'orthogonal')):


cos_theta1 := dotprod(d1N, d2N, 'orthogonal'):
sin_theta1 := crossprod(d1N, d2N)[3]:
theta1 := 2 * arctan(sin_theta1, (1.0 + cos_theta1)):

cos_theta2 := dotprod(d3N, d4N, 'orthogonal'):
sin_theta2 := crossprod(d3N, d4N)[3]:
theta2 := 2 * arctan(sin_theta2, (1.0 + cos_theta2)):

cos_theta3 := dotprod(d5N, d6N, 'orthogonal'):
sin_theta3 := crossprod(d5N, d6N)[3]:
theta3 := 2 * arctan(sin_theta3, (1.0 + cos_theta3)):



W1 := kb * theta1 * theta1 / (u1_move - u2):
W2 := kb_penalty * theta2 * theta2:
W3 := kb * theta3 * theta3 / (u2 - u3_move):

W := W1 + W2 + W3:

vx := vector(15,[x0[1],x0[2],u0, x1[1],x1[2],u1, x2[1],x2[2],u2, x3[1],x3[2],u3, x4[1],x4[2],u4]):

F := grad(-W,vx):
J := jacobian(F,vx):
V := array(1..1):
V[1] := W:
toC(V,"YarnBendPBCV.mcg"):
toC(F,"YarnBendPBCF.mcg"):
toC(J,"YarnBendPBCJ.mcg"):








