T t2 = pow(x[3][2]+x[1][2]-x[0][2]-x[2][2],2.0);
T t3 = sqrt(t2);
T t4 = t3*kb;
T t5 = x[1][0]-x[0][0];
T t6 = t5*t5;
T t7 = x[1][1]-x[0][1];
T t8 = t7*t7;
T t10 = sqrt(t6+t8);
T t11 = 1/t10;
T t12 = t5*t11;
T t13 = x[3][0]-x[2][0];
T t14 = t13*t13;
T t15 = x[3][1]-x[2][1];
T t16 = t15*t15;
T t18 = sqrt(t14+t16);
T t19 = 1/t18;
T t20 = t15*t19;
T t22 = t7*t11;
T t23 = t13*t19;
T t29 = atan2(t20*t12-t23*t22,0.1E1+t23*t12+t20*t22);
T t32 = 0.4E1/t3*t29;
T t34 = pow(t32-kappa0,2.0);
T t38 = pow(t32-kappa1,2.0);
// std::cout << "node " << nodes[0] << " " << x[0].transpose() << std::endl;
// std::cout << "node " << nodes[1] << " " << x[1].transpose() << std::endl;
// std::cout << "node " << nodes[2] << " " << x[2].transpose() << std::endl;
// std::cout << "node " << nodes[3] << " " << x[3].transpose() << std::endl;
// std::cout << "theta " << t29 << " discrete " << t32 << " analytical " << kappa0 << " " << kappa1 << std::endl;
// std::getchar();
V[0] = 0.5*t34*t4+0.5*t38*t4;
